{"version":3,"file":"module.js","sources":["../src/asset/AssetPromise.ts","../src/base/Util.ts","../src/asset/ResourceManager.ts","../src/base/Event.ts","../src/clone/enums/CloneMode.ts","../src/clone/CloneManager.ts","../src/base/EngineObject.ts","../src/base/EventDispatcher.ts","../src/base/Logger.ts","../src/base/Time.ts","../src/base/Constant.ts","../src/DisorderedArray.ts","../src/shader/ShaderMacroCollection.ts","../src/ComponentsManager.ts","../src/clone/ComponentCloner.ts","../src/ComponentsDependencies.ts","../src/Layer.ts","../src/Component.ts","../src/UpdateFlag.ts","../src/UpdateFlagManager.ts","../src/Transform.ts","../src/Entity.ts","../src/FeatureManager.ts","../src/enums/CameraClearFlags.ts","../src/physics/HitResult.ts","../src/physics/enums/PhysicsMaterialCombineMode.ts","../src/physics/enums/ColliderShapeUpAxis.ts","../src/physics/PhysicsManager.ts","../src/physics/PhysicsMaterial.ts","../src/physics/shape/ColliderShape.ts","../src/physics/shape/BoxColliderShape.ts","../src/physics/shape/SphereColliderShape.ts","../src/physics/shape/PlaneColliderShape.ts","../src/physics/shape/CapsuleColliderShape.ts","../src/physics/Collider.ts","../src/physics/StaticCollider.ts","../src/physics/DynamicCollider.ts","../src/input/enums/PointerPhase.ts","../src/input/pointer/Pointer.ts","../src/input/pointer/PointerManager.ts","../src/input/InputManager.ts","../src/material/enums/RenderQueueType.ts","../src/asset/RefObject.ts","../src/shader/enums/ShaderDataGroup.ts","../src/texture/Texture.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/shader/ShaderMacro.ts","../src/enums/ColorSpace.ts","../src/shader/ShaderUniform.ts","../src/shader/ShaderUniformBlock.ts","../src/shader/ShaderProgram.ts","../src/shader/ShaderProperty.ts","../src/shader/Shader.ts","../src/shader/ShaderData.ts","../src/shader/enums/BlendFactor.ts","../src/shader/enums/BlendOperation.ts","../src/shader/enums/ColorWriteMask.ts","../src/shader/state/RenderTargetBlendState.ts","../src/shader/state/BlendState.ts","../src/shader/enums/CompareFunction.ts","../src/shader/state/DepthState.ts","../src/shader/enums/CullMode.ts","../src/shader/state/RasterState.ts","../src/shader/enums/StencilOperation.ts","../src/shader/state/StencilState.ts","../src/shader/state/RenderState.ts","../src/material/Material.ts","../src/RenderPipeline/ClassPool.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/RenderElement.ts","../src/RenderPipeline/SpriteElement.ts","../src/RenderPipeline/SpriteMaskElement.ts","../src/2d/enums/SpriteMaskInteraction.ts","../src/Renderer.ts","../src/2d/enums/SpriteMaskLayer.ts","../src/2d/sprite/SpriteMask.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/VertexElement.ts","../src/graphic/enums/BufferBindFlag.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/Buffer.ts","../src/graphic/enums/MeshTopology.ts","../src/graphic/IndexBufferBinding.ts","../src/graphic/SubMesh.ts","../src/graphic/Mesh.ts","../src/graphic/VertexBufferBinding.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureWrapMode.ts","../src/texture/Texture2D.ts","../src/texture/enums/RenderBufferColorFormat.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/TextureCubeMap.ts","../src/texture/RenderDepthTexture.ts","../src/texture/RenderTarget.ts","../src/texture/RenderColorTexture.ts","../src/mesh/ModelMesh.ts","../src/mesh/Skin.ts","../src/mesh/MeshRenderer.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/mesh/PrimitiveMesh.ts","../src/mesh/BufferMesh.ts","../src/mesh/BlendShapeFrame.ts","../src/mesh/BlendShape.ts","../src/RenderPipeline/Basic2DBatcher.ts","../src/RenderPipeline/SpriteMaskBatcher.ts","../src/RenderPipeline/SpriteMaskManager.ts","../src/enums/BackgroundMode.ts","../src/enums/BackgroundTextureFillMode.ts","../src/sky/Sky.ts","../src/Background.ts","../src/lighting/enums/DiffuseMode.ts","../src/lighting/AmbientLight.ts","../src/SceneFeature.ts","../src/lighting/Light.ts","../src/lighting/DirectLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightFeature.ts","../src/Scene.ts","../src/SceneManager.ts","../src/shader/ShaderPool.ts","../src/shader/ShaderProgramPool.ts","../src/Engine.ts","../src/SystemInfo.ts","../src/EngineFeature.ts","../src/Script.ts","../src/RenderPipeline/RenderPass.ts","../src/RenderPipeline/SpriteBatcher.ts","../src/RenderPipeline/RenderQueue.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/Camera.ts","../src/asset/request.ts","../src/asset/Loader.ts","../src/asset/AssetType.ts","../src/material/enums/RenderFace.ts","../src/material/enums/BlendMode.ts","../src/material/BaseMaterial.ts","../src/material/BlinnPhongMaterial.ts","../src/material/PBRBaseMaterial.ts","../src/material/PBRMaterial.ts","../src/material/PBRSpecularMaterial.ts","../src/material/UnlitMaterial.ts","../src/2d/atlas/SpriteAtlas.ts","../src/2d/sprite/Sprite.ts","../src/2d/sprite/SpriteRenderer.ts","../src/animation/AnimationClipCurveBinding.ts","../src/animation/AnimationEvent.ts","../src/animation/enums/AnimationProperty.ts","../src/animation/Motion.ts","../src/animation/AnimationClip.ts","../src/animation/AnimatorUtils.ts","../src/animation/enums/AnimatorLayerBlendingMode.ts","../src/animation/enums/AnimatorStatePlayState.ts","../src/animation/enums/LayerState.ts","../src/animation/internal/AnimationCurveOwner.ts","../src/animation/internal/AnimationEventHandler.ts","../src/animation/AnimatorTransition.ts","../src/animation/enums/WrapMode.ts","../src/animation/internal/AnimatorStatePlayData.ts","../src/animation/internal/AnimatorLayerData.ts","../src/animation/internal/AnimatorStateData.ts","../src/animation/internal/AnimatorStateInfo.ts","../src/animation/internal/CrossCurveData.ts","../src/animation/Animator.ts","../src/animation/AnimatorController.ts","../src/animation/AnimatorControllerLayer.ts","../src/animation/StateMachineScript.ts","../src/animation/AnimatorState.ts","../src/animation/AnimatorStateMachine.ts","../src/animation/enums/InterpolableValueType.ts","../src/animation/enums/InterpolationType.ts","../src/animation/AnimationCurve.ts","../src/animation/KeyFrame.ts","../src/animation/enums/AnimatorConditionMode.ts","../src/sky/SkyBoxMaterial.ts","../src/particle/ParticleRenderer.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/fog/Fog.ts","../src/fog/EXP2Fog.ts","../src/fog/LinearFog.ts","../src/env-probe/Probe.ts","../src/env-probe/CubeProbe.ts","../src/shadow/LightShadow.ts","../src/shadow/Extension.ts","../src/shadow/ShadowMapMaterial.ts","../src/shadow/ShadowMapPass.ts","../src/shadow/ShadowMaterial.ts","../src/shadow/ShadowPass.ts","../src/shadow/ShadowFeature.ts","../src/shadow/index.ts","../src/index.ts"],"sourcesContent":["type PromiseNotifier = (progress: number) => void;\n\n/**\n * Asset Promise Status\n */\nexport enum AssetPromiseStatus {\n  /** Success. */\n  Success,\n  /** Pending. */\n  Pending,\n  /** Failed. */\n  Failed\n}\n/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - AssetPromise Collection\n   * @returns AssetPromise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * Current promise state.\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * Loading progress.\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * Progress callback.\n   * @param callback - Progress callback\n   * @returns Asset Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // Add it to the micro task to avoid reporting an error when calling this directly.\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly.\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n","export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * Fastly remove an element from array.\n * @param array - Array\n * @param item - Element\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n","import { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\nimport { Engine } from \"..\";\nimport { Loader } from \"./Loader\";\nimport { AssetType } from \"./AssetType\";\nimport { ObjectValues } from \"../base/Util\";\n\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** Loader collection. */\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: string } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: string, loader: Loader<any>, extnames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extnames.length; i < len; i++) {\n      this._extTypeMapping[extnames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): string {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = 20000;\n\n  /** Asset path pool, key is asset ID, value is asset path */\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** Asset pool, the key is the asset path and the value is the asset. */\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** Reference counted object pool, key is the object ID, and reference counted objects are put into this pool. */\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** Loading assets. */\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param paths - Path collections\n   * @returns Asset Promise\n   */\n  load(paths: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored) {\n        objects[i].destroy();\n      }\n    }\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: RefObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: RefObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const url = info.url;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res) => {\n        if (loader.useCache) this._addAsset(url, res);\n        delete this._loadingPromises[url];\n      })\n      .catch(() => {});\n    return promise;\n  }\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extnames - Name of file extension\n */\nexport function resourceLoader(assetType: string, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n","import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** Event Object. * @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n","/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\ntype TypeArray =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.。\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first.\n * Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _objectType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const objectType = CloneManager._objectType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== objectType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  /**\n   * Deep clone the object.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static deepCloneObject(source: Object, target: Object): void {\n    const type = source.constructor;\n    switch (type) {\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Int8Array:\n      case Int16Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        // Type array clone.\n        (<TypeArray>target).set(<TypeArray>source);\n        break;\n      case Array:\n        // Array clone.\n        for (let i = 0, n = (<[]>source).length; i < n; i++) {\n          CloneManager._deepCloneObjectItem(source, target, i);\n        }\n        break;\n      default:\n        const customSource = <IClone>source;\n        if (customSource.clone && customSource.cloneTo) {\n          // Custom clone.\n          customSource.cloneTo(target);\n        } else {\n          // Object or other class not implements custom clone.\n          const keys = Object.keys(source);\n          for (let i = 0, n = keys.length; i < n; i++) {\n            CloneManager._deepCloneObjectItem(source, target, keys[i]);\n          }\n        }\n    }\n  }\n\n  private static _deepCloneObjectItem(source: object, target: object, k: number | string): void {\n    const sourceItem = source[k];\n    if (sourceItem instanceof Object) {\n      const itemType = (<Object>sourceItem).constructor;\n      switch (itemType) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          // Type array clone.\n          const sourceTypeArrayItem = <TypeArray>sourceItem;\n          let targetTypeArrayItem = <TypeArray>target[k];\n          if (targetTypeArrayItem == null) {\n            target[k] = sourceTypeArrayItem.slice();\n          } else {\n            targetTypeArrayItem.set(sourceTypeArrayItem);\n          }\n          break;\n        case Array:\n          // Array clone.\n          const sourceArrayItem = <[]>sourceItem;\n          let targetArrayItem = <[]>target[k];\n          if (targetArrayItem == null) {\n            target[k] = new Array(sourceArrayItem.length);\n          } else {\n            targetArrayItem.length = sourceArrayItem.length;\n          }\n          CloneManager.deepCloneObject(sourceArrayItem, targetArrayItem);\n          break;\n        default:\n          if (sourceItem.clone && sourceItem.cloneTo) {\n            // Custom clone.\n            let sourceCustomItem = <IClone>sourceItem;\n            let targetCustomItem = <IClone>target[k];\n            if (targetCustomItem) {\n              sourceCustomItem.cloneTo(targetCustomItem);\n            } else {\n              target[k] = sourceCustomItem.clone();\n            }\n          } else {\n            // Object or other class not implements custom clone.\n            let targetItem = <Object>target[k];\n            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());\n            CloneManager.deepCloneObject(sourceItem, targetItem);\n            break;\n          }\n      }\n    } else {\n      // Null or undefined and primitive type.\n      target[k] = sourceItem;\n    }\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  /** Engine to which the object belongs. */\n  @ignoreClone\n  protected _engine: Engine;\n\n  /**\n   * Get the engine which the object belongs.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n}\n","import { EngineObject } from \"./EngineObject\";\nimport { Event } from \"./Event\";\nimport { ignoreClone } from \"../clone/CloneManager\";\n\n/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher extends EngineObject {\n  @ignoreClone\n  private _evts = Object.create(null);\n  private _evtCount = 0;\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._evts[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._evtCount === 0) return [];\n    return Object.keys(this._evts);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._evts[event];\n\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._evts[event]) {\n      return false;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeEventListener(event, listeners.fn);\n      listeners.fn(data);\n    } else {\n      const l = listeners.length;\n      for (let i = 0; i < l; i++) {\n        if (listeners[i].once) this.removeEventListener(event, listeners[i].fn);\n        listeners[i].fn(data);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated Use `on/once` instead.\n   * Add a listener function with the specified event name.\n   * @param event - Event name\n   * @param fn - Function\n   * @param once - Is it a one-time listener\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._evts;\n    if (!events[event]) {\n      events[event] = listener;\n      this._evtCount++;\n    } else if (!events[event].fn) {\n      events[event].push(listener);\n    } else {\n      events[event] = [events[event], listener];\n    }\n    return this;\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._evts[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else {\n      const index = listeners.indexOf(fn);\n      if (index > -1) {\n        const temp = listeners[listeners.length - 1];\n        listeners[index] = temp;\n        listeners.length--;\n        if (listeners.length === 1) {\n          this._evts[event] = listeners[0];\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._evts[event]) this._clearEvent(event);\n    } else {\n      this._evts = Object.create(null);\n      this._evtCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated Use `dispatch` instead.\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._evtCount === 0) {\n      this._evts = Object.create(null);\n    } else {\n      delete this._evts[event];\n    }\n  }\n}\n","/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","/**\n * Tools for calculating the time per frame.\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * Current Time\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * Time between two ticks\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Scaled delta time.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * Unscaled delta time.\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * The elapsed time, after the clock is initialized.\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * Call every frame, update delta time and other data.\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n","/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  shaderVertexID = \"shaderVertexID\",\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n  blendMinMax = \"EXT_blend_minmax\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    //TODO: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n\n  get(index: number): T {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    return this._elements[index];\n  }\n\n  /**\n   *\n   * @param index\n   * @returns The replaced item is used to reset its index.\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n","import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._value;\n      this._length = size;\n    } else {\n      mask[index] |= macro._value;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._value;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._index;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._value) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Component } from \"./Component\";\nimport { Renderer } from \"./Renderer\";\nimport { Script } from \"./Script\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Collider } from \"./physics/Collider\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  private static _tempVector0 = new Vector3();\n  private static _tempVector1 = new Vector3();\n\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _destroyComponents: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  // Physics\n  private _colliders: DisorderedArray<Collider> = new DisorderedArray();\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addCollider(collider: Collider) {\n    collider._index = this._colliders.length;\n    this._colliders.add(collider);\n  }\n\n  removeCollider(collider: Collider): void {\n    const replaced = this._colliders.deleteByIndex(collider._index);\n    replaced && (replaced._index = collider._index);\n    collider._index = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDestroyComponent(component): void {\n    this._destroyComponents.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        script._started = true;\n        script._onStartIndex = -1;\n        script.onStart();\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(context: RenderContext): void {\n    const camera = context._camera;\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      const element = elements[i];\n\n      // filter by camera culling mask.\n      if (!(camera.cullingMask & element._entity.layer)) {\n        continue;\n      }\n\n      // filter by camera frustum.\n      if (camera.enableFrustumCulling) {\n        element.isCulled = !camera._frustum.intersectsBox(element.bounds);\n        if (element.isCulled) {\n          continue;\n        }\n      }\n\n      const transform = camera.entity.transform;\n      const position = transform.worldPosition;\n      const center = element.bounds.getCenter(ComponentsManager._tempVector0);\n      if (camera.isOrthographic) {\n        const forward = transform.getWorldForward(ComponentsManager._tempVector1);\n        Vector3.subtract(center, position, center);\n        element._distanceForSort = Vector3.dot(center, forward);\n      } else {\n        element._distanceForSort = Vector3.distanceSquared(center, position);\n      }\n\n      element._updateShaderData(context);\n\n      element._render(camera);\n\n      // union camera global macro and renderer macro.\n      ShaderMacroCollection.unionCollection(\n        camera._globalShaderMacro,\n        element.shaderData._macroCollection,\n        element._globalShaderMacro\n      );\n    }\n  }\n\n  callComponentDestroy(): void {\n    const destroyComponents = this._destroyComponents;\n    const length = destroyComponents.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) {\n        destroyComponents[i].onDestroy();\n      }\n      destroyComponents.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onEndRender && (camComp as any).onEndRender(camera);\n    }\n  }\n\n  callColliderOnUpdate() {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onUpdate();\n    }\n  }\n\n  callColliderOnLateUpdate() {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onLateUpdate();\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n","import { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * Custom clone interface.\n */\nexport interface ICustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo(target: ICustomClone): void;\n}\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropS;\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            CloneManager.deepCloneObject(sourcePropD, tarProp);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropD;\n          }\n          break;\n      }\n    }\n    if ((<any>source)._cloneTo) {\n      (<any>source)._cloneTo(target);\n    }\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * Register component dependencies.\n   * @param currentComponent - The component you want to be register.\n   * @param dependentComponent - The component's dependencies.\n   */\n  static register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor) {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor) {\n    // Check if there are dependent components.\n    const dependencies = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependencies) {\n      for (let i = 0, len = dependencies.length; i < len; i++) {\n        if (!entity.getComponent(dependencies[i])) {\n          throw `you should add ${dependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor) {\n    const invDependencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDependencies) {\n      for (let i = 0, len = invDependencies.length; i < len; i++) {\n        if (entity.getComponent(invDependencies[i])) {\n          throw `you should remove ${invDependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<any, any>\n  ) {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\nexport function dependencies(...abilityClass: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    abilityClass.forEach((ability) => ComponentsDependencies.register(target, ability));\n  };\n}\n","/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  /** Layer 0. */\n  Layer0 = 0x1,\n  /** Layer 1. */\n  Layer1 = 0x2,\n  /** Layer 2. */\n  Layer2 = 0x4,\n  /** Layer 3. */\n  Layer3 = 0x8,\n  /** Layer 4. */\n  Layer4 = 0x10,\n  /** Layer 5. */\n  Layer5 = 0x20,\n  /** Layer 6. */\n  Layer6 = 0x40,\n  /** Layer 7. */\n  Layer7 = 0x80,\n  /** Layer 8. */\n  Layer8 = 0x100,\n  /** Layer 9. */\n  Layer9 = 0x200,\n  /** Layer 10. */\n  Layer10 = 0x400,\n  /** Layer 11. */\n  Layer11 = 0x800,\n  /** Layer 12. */\n  Layer12 = 0x1000,\n  /** Layer 13. */\n  Layer13 = 0x2000,\n  /** Layer 14. */\n  Layer14 = 0x4000,\n  /** Layer 15. */\n  Layer15 = 0x8000,\n  /** Layer 16. */\n  Layer16 = 0x10000,\n  /** Layer 17. */\n  Layer17 = 0x20000,\n  /** Layer 18. */\n  Layer18 = 0x40000,\n  /** Layer 19. */\n  Layer19 = 0x80000,\n  /** Layer 20. */\n  Layer20 = 0x100000,\n  /** Layer 21. */\n  Layer21 = 0x200000,\n  /** Layer 22. */\n  Layer22 = 0x400000,\n  /** Layer 23. */\n  Layer23 = 0x800000,\n  /** Layer 24. */\n  Layer24 = 0x1000000,\n  /** Layer 25. */\n  Layer25 = 0x2000000,\n  /** Layer 26. */\n  Layer26 = 0x4000000,\n  /** Layer 27. */\n  Layer27 = 0x8000000,\n  /** Layer 28. */\n  Layer28 = 0x10000000,\n  /** Layer 29. */\n  Layer29 = 0x20000000,\n  /** Layer 30. */\n  Layer30 = 0x40000000,\n  /** Layer 31. */\n  Layer31 = 0x80000000,\n  /** All layers. */\n  Everything = 0xffffffff,\n  /** None layer. */\n  Nothing = 0x0\n}\n","import { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport abstract class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @assignmentClone\n  private _enabled: boolean = true;\n  @ignoreClone\n  private _awoken: boolean = false;\n\n  /**\n   * Indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value === this._enabled) {\n      return;\n    }\n    this._enabled = value;\n    if (value) {\n      this._entity.isActiveInHierarchy && this._onEnable();\n    } else {\n      this._entity.isActiveInHierarchy && this._onDisable();\n    }\n  }\n\n  /**\n   * Indicates whether the component is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * The entity which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _onActive(): void {}\n\n  /**\n   * @internal\n   */\n  _onInActive(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    if (value) {\n      if (!this._awoken) {\n        this._awoken = true;\n        this._onAwake();\n      }\n      // You can do isActive = false in onAwake function.\n      if (this._entity._isActiveInHierarchy) {\n        this._onActive();\n        this._enabled && this._onEnable();\n      }\n    } else {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n  }\n}\n","import { removeFromArray } from \"./base/Util\";\n\n/**\n * Used to update tags.\n */\nexport class UpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  constructor(private _flags: UpdateFlag[] = []) {\n    this._flags.push(this);\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    const flags = this._flags;\n    removeFromArray(flags, this);\n    this._flags = null;\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @internal\n */\nexport class UpdateFlagManager {\n  private _updateFlags: UpdateFlag[] = [];\n\n  register(): UpdateFlag {\n    return new UpdateFlag(this._updateFlags);\n  }\n\n  distribute(): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].flag = true;\n    }\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat40: Matrix = new Matrix();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n  private static _tempMat43: Matrix = new Matrix();\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n\n  private _dirtyFlag: number = TransformFlag.WmWpWeWqWs;\n\n  /**\n   * Local position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * World position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldPosition(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldPosition)) {\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(this._worldPosition);\n      } else {\n        this._position.cloneTo(this._worldPosition);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n    }\n    return this._worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      value.cloneTo(this._worldPosition);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(value, Transform._tempMat41, this._position);\n    } else {\n      value.cloneTo(this._position);\n    }\n    this.position = this._position;\n    this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotation(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.LocalEuler)) {\n      this._rotationQuaternion.toEuler(this._rotation);\n      this._rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n\n      this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    }\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      value.cloneTo(this._rotation);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalQuat);\n    this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotation(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldEuler)) {\n      this.worldRotationQuaternion.toEuler(this._worldRotation);\n      this._worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n    }\n    return this._worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      value.cloneTo(this._worldRotation);\n    }\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(value.x),\n      MathUtil.degreeToRadian(value.y),\n      MathUtil.degreeToRadian(value.z),\n      this._worldRotationQuaternion\n    );\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this.rotationQuaternion.cloneTo(this._worldRotationQuaternion);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      value.cloneTo(this._worldRotationQuaternion);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, Transform._tempQuat0);\n      Quaternion.multiply(value, Transform._tempQuat0, this._rotationQuaternion);\n    } else {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n  }\n\n  /**\n   * Local scaling.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      value.cloneTo(this._scale);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,\n   * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldScale)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.setValue(e[0], e[4], e[8]);\n      } else {\n        this._scale.cloneTo(this._lossyWorldScale);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldScale);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      value.cloneTo(this._localMatrix);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this.localMatrix.cloneTo(this._worldMatrix);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      value.cloneTo(this._worldMatrix);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(value, Transform._tempMat42, this._localMatrix);\n    } else {\n      value.cloneTo(this._localMatrix);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    this.rotation = this._rotation;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.setValue(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.setValue(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.setValue(x, y, z);\n    this.worldPosition = this._worldPosition;\n  }\n\n  /**\n   * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.setValue(x, y, z);\n    this.worldRotation = this._worldRotation;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.setValue(x, y, z, w);\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n  }\n\n  /**\n   * Get the forward direction in world space.\n   * @param forward - Forward vector\n   * @returns Forward vector\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.setValue(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * Get the right direction in world space.\n   * @param right - Right vector\n   * @returns Right vector\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.setValue(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * Get the up direction in world space.\n   * @param up - Up vector\n   * @returns Up vector\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.setValue(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * Translate along the passed Vector3.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate along the passed X, Y, Z value.\n   * @param x - Translate direction and distance along x axis\n   * @param y - Translate direction and distance along y axis\n   * @param z - Translate direction and distance along z axis\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec3;\n      translate.setValue(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param worldPosition - Target world position\n   * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)\n   */\n  lookAt(worldPosition: Vector3, worldUp?: Vector3): void {\n    const position = this.worldPosition;\n    const EPSILON = MathUtil.zeroTolerance;\n    if (\n      Math.abs(position.x - worldPosition.x) < EPSILON &&\n      Math.abs(position.y - worldPosition.y) < EPSILON &&\n      Math.abs(position.z - worldPosition.z) < EPSILON\n    ) {\n      return;\n    }\n    const rotMat = Transform._tempMat43;\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n\n    worldUp = worldUp ?? Transform._tempVec3.setValue(0, 1, 0);\n    Matrix.lookAt(position, worldPosition, worldUp, rotMat);\n    rotMat.getRotation(worldRotationQuaternion).invert();\n    this.worldRotationQuaternion = worldRotationQuaternion;\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {\n      this._worldAssociatedChange(TransformFlag.WmWp);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.setValueByMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.distribute();\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean) {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n      this.rotationQuaternion = this._rotationQuaternion;\n    } else {\n      Quaternion.multiply(this.worldRotationQuaternion, rotateQuat, this._worldRotationQuaternion);\n      this.worldRotationQuaternion = this._worldRotationQuaternion;\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      this.position = this._position.add(translation);\n    } else {\n      this.worldPosition = this._worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n}\n\n/**\n * Dirty flag of transform.\n */\nenum TransformFlag {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { EngineObject } from \"./base\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { Script } from \"./Script\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { DisorderedArray } from \"./DisorderedArray\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /** The name of entity. */\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  /** Transform component. */\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _scripts: DisorderedArray<Script> = new DisorderedArray<Script>();\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(entity: Entity) {\n    if (entity !== this._parent) {\n      const oldParent = this._removeFromParent();\n      const newParent = (this._parent = entity);\n      if (newParent) {\n        newParent._children.push(this);\n        const parentScene = newParent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (newParent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to.\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component.\n   * @returns\tThe component which has been added.\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    if (this._isActiveInHierarchy) {\n      component._setActive(true);\n    }\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component.\n   * @returns\tThe first component which match type.\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component.\n   * @param results - The components which match type.\n   * @returns\tThe components which match type.\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type.\n   * @param results - The components collection.\n   * @returns\tThe components collection which match the type.\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added.\n   */\n  addChild(child: Entity): void {\n    child.parent = this;\n  }\n\n  /**\n   * Remove child entity.\n   * @param child - The child entity which want to be removed.\n   */\n  removeChild(child: Entity): void {\n    child.parent = null;\n  }\n\n  /**\n   * Find child entity by index.\n   * @param index - The index of the child entity.\n   * @returns\tThe component which be found.\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find child entity by name.\n   * @param name - The name of the entity which want to be found.\n   * @returns The component which be found.\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity.\n   * @returns The component which be found.\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name.\n   * @returns The child entity.\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone\n   * @returns Cloned entity.\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    const abilityArray = this._components;\n    for (let i = abilityArray.length - 1; i >= 0; i--) {\n      abilityArray[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._parent != null) {\n      const parentChildren = this._parent._children;\n      parentChildren.splice(parentChildren.indexOf(this), 1);\n    }\n    this._parent = null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _addScript(script: Script) {\n    script._entityCacheIndex = this._scripts.length;\n    this._scripts.add(script);\n  }\n\n  /**\n   * @internal\n   */\n  _removeScript(script: Script): void {\n    const replaced = this._scripts.deleteByIndex(script._entityCacheIndex);\n    replaced && (replaced._entityCacheIndex = script._entityCacheIndex);\n    script._entityCacheIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): Entity {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldParentChildren = oldParent._children;\n      oldParentChildren.splice(oldParentChildren.indexOf(this), 1);\n      this._parent = null;\n    }\n    return oldParent;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: UpdateFlag;\n\n  /**\n   * @deprecated\n   * Use transform.position instead.\n   */\n  get position(): Vector3 {\n    return this.transform.position;\n  }\n\n  set position(val: Vector3) {\n    this.transform.position = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.worldPosition instead.\n   */\n  get worldPosition(): Vector3 {\n    return this.transform.worldPosition;\n  }\n\n  set worldPosition(val: Vector3) {\n    this.transform.worldPosition = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.rotationQuaternion instead.\n   */\n  get rotation(): Quaternion {\n    return this.transform.rotationQuaternion;\n  }\n\n  set rotation(val: Quaternion) {\n    this.transform.rotationQuaternion = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.scale instead.\n   */\n  get scale(): Vector3 {\n    return this.transform.scale;\n  }\n\n  set scale(val: Vector3) {\n    this.transform.scale = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n","import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * Manage a set of feature objects.\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * Register a feature.\n   * @param {SceneFeature|EngineFeature} IFeature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // Search by type, avoid adding\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // Add to global array\n    featureArray.push(IFeature);\n\n    // Add to existing scene\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * Add an feature with functional characteristics.\n   * @param {Scene|Engine} obj - Scene or engine\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * Call the specified method of the feature.\n   * @param obj - Scene or engine\n   * @param method - Method name\n   * @param args - Function args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * Find feature.\n   * @param obj - Scene or engine\n   * @param IFeature - plug-in\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n","/**\n * Camera clear flags enumeration.\n */\nexport enum CameraClearFlags {\n  /* Clear depth and color from background. */\n  DepthColor,\n  /* Clear depth only. */\n  Depth,\n  /* Do nothing. */\n  None\n}\n","import { Entity } from \"../Entity\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n */\nexport class HitResult {\n  /** The entity that was hit. */\n  entity: Entity = null;\n  /** The distance from the ray's origin to the impact point. */\n  distance: number = 0;\n  /** The impact point in world space where the ray hit the collider. */\n  point: Vector3 = new Vector3();\n  /** The normal of the surface the ray hit. */\n  normal: Vector3 = new Vector3();\n}\n","/**\n * Describes how physics materials of the colliding objects are combined.\n */\nexport enum PhysicsMaterialCombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}","import { HitResult } from \"./HitResult\";\nimport { Ray } from \"@oasis-engine/math\";\nimport { IPhysics, IPhysicsManager } from \"@oasis-engine/design\";\nimport { Collider } from \"./Collider\";\nimport { Layer } from \"../Layer\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\n\n/**\n * A physics manager is a collection of bodies and constraints which can interact.\n */\nexport class PhysicsManager {\n  /** @internal */\n  static _nativePhysics: IPhysics;\n\n  private _nativePhysicsManager: IPhysicsManager;\n  private _physicalObjectsMap: Record<number, ColliderShape> = {};\n  private _onContactEnter = (obj1: number, obj2: number) => {};\n  private _onContactExit = (obj1: number, obj2: number) => {};\n  private _onContactStay = (obj1: number, obj2: number) => {};\n  private _onTriggerEnter = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerEnter(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerEnter(shape1);\n    }\n  };\n\n  private _onTriggerExit = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerExit(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerExit(shape1);\n    }\n  };\n\n  private _onTriggerStay = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerStay(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerStay(shape1);\n    }\n  };\n\n  constructor() {\n    this._nativePhysicsManager = PhysicsManager._nativePhysics.createPhysicsManager(\n      this._onContactEnter,\n      this._onContactExit,\n      this._onContactStay,\n      this._onTriggerEnter,\n      this._onTriggerExit,\n      this._onTriggerStay\n    );\n  }\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): boolean;\n\n  raycast(\n    ray: Ray,\n    distanceOrResult?: number | HitResult,\n    layerMaskOrResult?: Layer | HitResult,\n    outHitResult?: HitResult\n  ): boolean {\n    let hitResult: HitResult;\n\n    let distance = Number.MAX_VALUE;\n    if (typeof distanceOrResult === \"number\") {\n      distance = distanceOrResult;\n    } else if (distanceOrResult != undefined) {\n      hitResult = distanceOrResult;\n    }\n\n    let layerMask = Layer.Everything;\n    if (typeof layerMaskOrResult === \"number\") {\n      layerMask = layerMaskOrResult;\n    } else if (layerMaskOrResult != undefined) {\n      hitResult = layerMaskOrResult;\n    }\n\n    if (outHitResult) {\n      hitResult = outHitResult;\n    }\n\n    if (hitResult != undefined) {\n      const result = this._nativePhysicsManager.raycast(ray, distance, (idx, distance, position, normal) => {\n        hitResult.entity = this._physicalObjectsMap[idx]._collider.entity;\n        hitResult.distance = distance;\n        normal.cloneTo(hitResult.normal);\n        position.cloneTo(hitResult.point);\n      });\n\n      if (result) {\n        if (hitResult.entity.layer & layerMask) {\n          return true;\n        } else {\n          hitResult.entity = null;\n          hitResult.distance = 0;\n          hitResult.point.setValue(0, 0, 0);\n          hitResult.normal.setValue(0, 0, 0);\n          return false;\n        }\n      }\n      return false;\n    } else {\n      return this._nativePhysicsManager.raycast(ray, distance);\n    }\n  }\n\n  /**\n   * Call on every frame to update pose of objects.\n   * @internal\n   */\n  _update(deltaTime: number): void {\n    this._nativePhysicsManager.update(deltaTime);\n  }\n\n  /**\n   * Add ColliderShape into the manager.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _addColliderShape(colliderShape: ColliderShape): void {\n    this._physicalObjectsMap[colliderShape.id] = colliderShape;\n    this._nativePhysicsManager.addColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Remove ColliderShape.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _removeColliderShape(colliderShape: ColliderShape): void {\n    delete this._physicalObjectsMap[colliderShape.id];\n    this._nativePhysicsManager.removeColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Add collider into the manager.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _addCollider(collider: Collider): void {\n    this._nativePhysicsManager.addCollider(collider._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _removeCollider(collider: Collider): void {\n    this._nativePhysicsManager.removeCollider(collider._nativeCollider);\n  }\n}\n","import { IPhysicsMaterial } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { PhysicsMaterialCombineMode } from \"./enums/PhysicsMaterialCombineMode\";\n\n/**\n * Material class to represent a set of surface properties.\n */\nexport class PhysicsMaterial {\n  private _bounciness: number = 0.1;\n  private _dynamicFriction: number = 0.1;\n  private _staticFriction: number = 0.1;\n  private _bounceCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n  private _frictionCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n\n  /** @internal */\n  _nativeMaterial: IPhysicsMaterial;\n\n  constructor() {\n    this._nativeMaterial = PhysicsManager._nativePhysics.createPhysicsMaterial(\n      this._staticFriction,\n      this._dynamicFriction,\n      this._bounciness,\n      this._bounceCombine,\n      this._frictionCombine\n    );\n  }\n\n  /**\n   * The coefficient of bounciness.\n   */\n  get bounciness(): number {\n    return this._bounciness;\n  }\n\n  set bounciness(value: number) {\n    this._bounciness = value;\n    this._nativeMaterial.setBounciness(value);\n  }\n\n  /**\n   * The DynamicFriction value.\n   */\n  get dynamicFriction(): number {\n    return this._dynamicFriction;\n  }\n\n  set dynamicFriction(value: number) {\n    this._dynamicFriction = value;\n    this._nativeMaterial.setDynamicFriction(value);\n  }\n\n  /**\n   * The coefficient of static friction.\n   */\n  get staticFriction(): number {\n    return this._staticFriction;\n  }\n\n  set staticFriction(value: number) {\n    this._staticFriction = value;\n    this._nativeMaterial.setStaticFriction(value);\n  }\n\n  /**\n   * The restitution combine mode.\n   */\n  get bounceCombine(): PhysicsMaterialCombineMode {\n    return this._bounceCombine;\n  }\n\n  set bounceCombine(value: PhysicsMaterialCombineMode) {\n    this._bounceCombine = value;\n    this._nativeMaterial.setBounceCombine(value);\n  }\n\n  /**\n   * The friction combine mode.\n   */\n  get frictionCombine(): PhysicsMaterialCombineMode {\n    return this._frictionCombine;\n  }\n\n  set frictionCombine(value: PhysicsMaterialCombineMode) {\n    this._frictionCombine = value;\n    this._nativeMaterial.setFrictionCombine(value);\n  }\n}\n","import { IColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsMaterial } from \"../PhysicsMaterial\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Collider } from \"../Collider\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class ColliderShape {\n  private static _idGenerator: number = 0;\n\n  /** @internal */\n  _collider: Collider;\n  /** @internal */\n  _nativeShape: IColliderShape;\n\n  protected _id: number;\n  protected _position: Vector3 = new Vector3();\n  protected _material: PhysicsMaterial;\n  protected _isTrigger: boolean = false;\n  protected _isSceneQuery: boolean = true;\n\n  /**\n   * Collider owner of this shape.\n   */\n  get collider(): Collider {\n    return this._collider;\n  }\n\n  /**\n   * Unique id for this shape.\n   */\n  get id(): number {\n    return this._id;\n  }\n\n  /**\n   * Physical material.\n   */\n  get material(): PhysicsMaterial {\n    return this._material;\n  }\n\n  set material(value: PhysicsMaterial) {\n    this._material = value;\n    this._nativeShape.setMaterial(value._nativeMaterial);\n  }\n\n  /**\n   * The local position of this ColliderShape.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._nativeShape.setPosition(value);\n  }\n\n  /**\n   * True for TriggerShape, false for SimulationShape.\n   */\n  get isTrigger(): boolean {\n    return this._isTrigger;\n  }\n\n  set isTrigger(value: boolean) {\n    this._isTrigger = value;\n    this._nativeShape.setIsTrigger(value);\n  }\n\n  protected constructor() {\n    this._material = new PhysicsMaterial();\n    this._id = ColliderShape._idGenerator++;\n  }\n\n  /**\n   * Set local position of collider shape\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this._nativeShape.setPosition(this._position);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { IBoxColliderShape } from \"@oasis-engine/design\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for box.\n */\nexport class BoxColliderShape extends ColliderShape {\n  private _size: Vector3 = new Vector3(1, 1, 1);\n  /**\n   * Size of box shape.\n   */\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    if (this._size != value) {\n      value.cloneTo(this._size);\n    }\n    (<IBoxColliderShape>this._nativeShape).setSize(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createBoxColliderShape(\n      this._id,\n      this._size,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * Set size of box.\n   * @param x - Size of x-axis\n   * @param y - Size of y-axis\n   * @param z - Size of z-axis\n   */\n  setSize(x: number, y: number, z: number): void {\n    this._size.x = x;\n    this._size.y = y;\n    this._size.z = z;\n    (<IBoxColliderShape>this._nativeShape).setSize(this._size);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ISphereColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for sphere.\n */\nexport class SphereColliderShape extends ColliderShape {\n  private _radius: number = 1;\n\n  /**\n   * Radius of sphere shape.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    this._radius = value;\n    (<ISphereColliderShape>this._nativeShape).setRadius(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createSphereColliderShape(\n      this._id,\n      this._radius,\n      this._material._nativeMaterial\n    );\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { IPlaneColliderShape } from \"@oasis-engine/design\";\n\n/**\n * Physical collider shape plane.\n */\nexport class PlaneColliderShape extends ColliderShape {\n  private _rotation: Vector3 = new Vector3();\n\n  /**\n   * The local rotation of this plane.\n   */\n  get rotation(): Vector3 {\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation != value) {\n      value.cloneTo(this._rotation);\n    }\n    (<IPlaneColliderShape>this._nativeShape).setRotation(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createPlaneColliderShape(\n      this._id,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * Set the local rotation of this plane.\n   * @param x - Radian of yaw\n   * @param y - Radian of pitch\n   * @param z - Radian of roll\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    (<IPlaneColliderShape>this._nativeShape).setRotation(this._rotation);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ICapsuleColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { ColliderShapeUpAxis } from \"../enums/ColliderShapeUpAxis\";\n\n/**\n * Physical collider shape for capsule.\n */\nexport class CapsuleColliderShape extends ColliderShape {\n  private _radius: number = 1;\n  private _height: number = 2;\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n\n  /**\n   * Radius of capsule.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    (<ICapsuleColliderShape>this._nativeShape).setRadius(value);\n  }\n\n  /**\n   * Height of capsule.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    (<ICapsuleColliderShape>this._nativeShape).setHeight(value);\n  }\n\n  /**\n   * Up axis of capsule.\n   */\n  get upAxis(): ColliderShapeUpAxis {\n    return this._upAxis;\n  }\n\n  set upAxis(value: ColliderShapeUpAxis) {\n    this._upAxis = value;\n    (<ICapsuleColliderShape>this._nativeShape).setUpAxis(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createCapsuleColliderShape(\n      this._id,\n      this._radius,\n      this._height,\n      this._material._nativeMaterial\n    );\n  }\n}\n","import { Component } from \"../Component\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICollider } from \"@oasis-engine/design\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class Collider extends Component {\n  /** @internal */\n  @ignoreClone\n  _index: number = -1;\n  /** @internal */\n  _nativeCollider: ICollider;\n\n  protected _updateFlag: UpdateFlag;\n\n  private _shapes: ColliderShape[] = [];\n\n  /**\n   * The shapes of this collider.\n   */\n  get shapes(): Readonly<ColliderShape[]> {\n    return this._shapes;\n  }\n\n  protected constructor(entity: Entity) {\n    super(entity);\n    this._updateFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add collider shape on this collider.\n   * @param shape - Collider shape\n   */\n  addShape(shape: ColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n      this._shapes.push(shape);\n      this.engine.physicsManager._addColliderShape(shape);\n      this._nativeCollider.addShape(shape._nativeShape);\n      shape._collider = this;\n    }\n  }\n\n  /**\n   * Remove a collider shape.\n   * @param shape - The collider shape.\n   */\n  removeShape(shape: ColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      this._nativeCollider.removeShape(shape._nativeShape);\n      this.engine.physicsManager._removeColliderShape(shape);\n      shape._collider = null;\n    }\n  }\n\n  /**\n   * Remove all shape attached.\n   */\n  clearShapes(): void {\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      this._nativeCollider.removeShape(shapes[i]._nativeShape);\n      this.engine.physicsManager._removeColliderShape(shapes[i]);\n    }\n    shapes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _onUpdate() {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      this._nativeCollider.setWorldTransform(transform.worldPosition, transform.worldRotationQuaternion);\n      this._updateFlag.flag = false;\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = this.shapes.length; i < n; i++) {\n        this.shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onLateUpdate() {}\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable() {\n    this.engine.physicsManager._addCollider(this);\n    this.engine._componentsManager.addCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable() {\n    this.engine.physicsManager._removeCollider(this);\n    this.engine._componentsManager.removeCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy() {\n    this.clearShapes();\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class StaticCollider extends Collider {\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createStaticCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n}\n","import { IDynamicCollider } from \"@oasis-engine/design\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force.\n */\nexport class DynamicCollider extends Collider {\n  /** The linear velocity vector of the dynamic collider measured in world unit per second. */\n  linearVelocity: Vector3;\n  /** The angular velocity vector of the dynamic collider measured in radians per second. */\n  angularVelocity: Vector3;\n  /** The linear damping of the dynamic collider. */\n  linearDamping: number;\n  /** The angular damping of the dynamic collider. */\n  angularDamping: number;\n  /** The mass of the dynamic collider. */\n  mass: number;\n  /** Controls whether physics affects the dynamic collider. */\n  isKinematic: boolean;\n\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createDynamicCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n\n  /**\n   * Apply a force to the DynamicCollider.\n   * @param force - The force make the collider move\n   */\n  applyForce(force: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addForce(force);\n  }\n\n  /**\n   * Apply a torque to the DynamicCollider.\n   * @param torque - The force make the collider rotate\n   */\n  applyTorque(torque: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addTorque(torque);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onLateUpdate() {\n    const { transform } = this.entity;\n    const { worldPosition, worldRotationQuaternion } = transform;\n    this._nativeCollider.getWorldTransform(worldPosition, worldRotationQuaternion);\n    transform.worldPosition = worldPosition;\n    transform.worldRotationQuaternion = worldRotationQuaternion;\n    this._updateFlag.flag = false;\n  }\n}\n","/**\n *  The current phase of the pointer.\n */\nexport enum PointerPhase {\n  /** A Pointer pressed on the screen. */\n  Down,\n  /** A pointer moved on the screen. */\n  Move,\n  /** A pointer was lifted from the screen. */\n  Up,\n  /** The system cancelled tracking for the pointer. */\n  Leave\n}\n","import { Vector2 } from \"@oasis-engine/math\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\n\n/**\n * Pointer.\n */\nexport class Pointer {\n  /**\n   * Unique id.\n   * @remark Start from 0.\n   */\n  readonly id: number;\n  /** The phase of pointer. */\n  phase: PointerPhase = PointerPhase.Leave;\n  /** The position of the pointer in screen space pixel coordinates. */\n  position: Vector2 = new Vector2();\n\n  /** @internal */\n  _uniqueID: number;\n  /** @internal */\n  _needUpdate: boolean = true;\n\n  /**\n   * @internal\n   */\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n","import { Ray, Vector2 } from \"@oasis-engine/math\";\nimport { Canvas } from \"../../Canvas\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { CameraClearFlags } from \"../../enums/CameraClearFlags\";\nimport { HitResult } from \"../../physics\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\nimport { Pointer } from \"./Pointer\";\n\n/**\n * Pointer Manager.\n * @internal\n */\nexport class PointerManager {\n  private static _tempRay: Ray = new Ray();\n  private static _tempPoint: Vector2 = new Vector2();\n  private static _tempHitResult: HitResult = new HitResult();\n\n  /** @internal */\n  _pointers: Pointer[] = [];\n  /** @internal */\n  _multiPointerEnabled: boolean = true;\n  /** @internal */\n  _enablePhysics: boolean = false;\n\n  private _engine: Engine;\n  private _canvas: Canvas;\n  private _nativeEvents: PointerEvent[] = [];\n  private _pointerPool: Pointer[];\n  private _keyEventList: number[] = [];\n  private _keyEventCount: number = 0;\n  private _needOverallPointers: boolean = false;\n  private _currentPosition: Vector2 = new Vector2();\n  private _currentPressedEntity: Entity;\n  private _currentEnteredEntity: Entity;\n\n  /**\n   * Create a PointerManager.\n   * @param engine - The current engine instance\n   */\n  constructor(engine: Engine) {\n    this._engine = engine;\n    this._canvas = engine.canvas;\n    // @ts-ignore\n    const htmlCanvas = this._canvas._webCanvas as HTMLCanvasElement;\n    htmlCanvas.style.touchAction = \"none\";\n    // prettier-ignore\n    htmlCanvas.onpointerdown = htmlCanvas.onpointerup = htmlCanvas.onpointerout = htmlCanvas.onpointermove = (evt:PointerEvent)=>{\n      this._nativeEvents.push(evt);\n    };\n    // If there are no compatibility issues, navigator.maxTouchPoints should be used here.\n    this._pointerPool = new Array<Pointer>(11);\n    this._enablePhysics = engine.physicsManager ? true : false;\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    this._needOverallPointers && this._overallPointers();\n    this._nativeEvents.length > 0 && this._handlePointerEvent(this._nativeEvents);\n    if (this._enablePhysics) {\n      const rayCastEntity = this._pointerRayCast();\n      const { _keyEventCount: keyEventCount } = this;\n      if (keyEventCount > 0) {\n        const { _keyEventList: keyEventList } = this;\n        for (let i = 0; i < keyEventCount; i++) {\n          switch (keyEventList[i]) {\n            case PointerKeyEvent.Down:\n              this._firePointerDown(rayCastEntity);\n              break;\n            case PointerKeyEvent.Up:\n              this._firePointerUpAndClick(rayCastEntity);\n              break;\n          }\n        }\n        this._firePointerExitAndEnter(rayCastEntity);\n        keyEventList[keyEventCount - 1] === PointerKeyEvent.Leave && (this._currentPressedEntity = null);\n        this._keyEventCount = 0;\n      } else {\n        this._firePointerDrag();\n        this._firePointerExitAndEnter(rayCastEntity);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    // @ts-ignore\n    const htmlCanvas = this._canvas._webCanvas as HTMLCanvasElement;\n    htmlCanvas.onpointerdown = htmlCanvas.onpointerup = htmlCanvas.onpointerout = htmlCanvas.onpointermove = null;\n    this._nativeEvents.length = 0;\n    this._pointerPool.length = 0;\n    this._pointers.length = 0;\n    this._currentPosition = null;\n    this._currentEnteredEntity = null;\n    this._currentPressedEntity = null;\n    this._engine = null;\n    this._canvas = null;\n  }\n\n  private _overallPointers(): void {\n    const { _pointers: pointers } = this;\n    let deleteCount = 0;\n    const totalCount = pointers.length;\n    for (let i = 0; i < totalCount; i++) {\n      if (pointers[i].phase === PointerPhase.Leave) {\n        deleteCount++;\n      } else {\n        if (deleteCount > 0) {\n          pointers[i - deleteCount] = pointers[i];\n        }\n      }\n    }\n    pointers.length = totalCount - deleteCount;\n    this._needOverallPointers = false;\n  }\n\n  private _getIndexByPointerID(pointerId: number): number {\n    const { _pointers: pointers } = this;\n    for (let i = pointers.length - 1; i >= 0; i--) {\n      if (pointers[i]._uniqueID === pointerId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private _addPointer(pointerId: number, x: number, y: number, phase: PointerPhase): void {\n    const { _pointers: pointers } = this;\n    const lastCount = pointers.length;\n    if (lastCount === 0 || this._multiPointerEnabled) {\n      const { _pointerPool: pointerPool } = this;\n      // Get Pointer smallest index.\n      let i = 0;\n      for (; i < lastCount; i++) {\n        if (pointers[i].id > i) {\n          break;\n        }\n      }\n      let pointer = pointerPool[i];\n      if (!pointer) {\n        pointer = pointerPool[i] = new Pointer(i);\n      }\n      pointer._uniqueID = pointerId;\n      pointer._needUpdate = true;\n      pointer.position.setValue(x, y);\n      pointer.phase = phase;\n      pointers.splice(i, 0, pointer);\n    }\n  }\n\n  private _removePointer(pointerIndex: number): void {\n    this._pointers[pointerIndex].phase = PointerPhase.Leave;\n  }\n\n  private _updatePointer(pointerIndex: number, x: number, y: number, phase: PointerPhase): void {\n    const updatedPointer = this._pointers[pointerIndex];\n    updatedPointer.position.setValue(x, y);\n    updatedPointer._needUpdate = true;\n    updatedPointer.phase = phase;\n  }\n\n  private _handlePointerEvent(nativeEvents: PointerEvent[]): void {\n    const { _pointers: pointers, _keyEventList: keyEventList } = this;\n    let activePointerCount = pointers.length;\n    const nativeEventsLen = nativeEvents.length;\n    for (let i = 0; i < nativeEventsLen; i++) {\n      const evt = nativeEvents[i];\n      let pointerIndex = this._getIndexByPointerID(evt.pointerId);\n      switch (evt.type) {\n        case \"pointerdown\":\n          if (pointerIndex === -1) {\n            this._addPointer(evt.pointerId, evt.offsetX, evt.offsetY, PointerPhase.Down);\n            activePointerCount++;\n          } else {\n            this._updatePointer(pointerIndex, evt.offsetX, evt.offsetY, PointerPhase.Down);\n          }\n          activePointerCount === 1 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Down);\n          break;\n        case \"pointerup\":\n          if (pointerIndex >= 0) {\n            this._updatePointer(pointerIndex, evt.offsetX, evt.offsetY, PointerPhase.Up);\n            activePointerCount === 1 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Up);\n          }\n          break;\n        case \"pointermove\":\n          if (pointerIndex === -1) {\n            this._addPointer(evt.pointerId, evt.offsetX, evt.offsetY, PointerPhase.Move);\n            activePointerCount++;\n          } else {\n            this._updatePointer(pointerIndex, evt.offsetX, evt.offsetY, PointerPhase.Move);\n          }\n          break;\n        case \"pointerout\":\n          if (pointerIndex >= 0) {\n            this._removePointer(pointerIndex);\n            --activePointerCount === 0 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Leave);\n            this._needOverallPointers = true;\n          }\n          break;\n      }\n    }\n    const pointerCount = pointers.length;\n    if (pointerCount > 0) {\n      const { _canvas: canvas, _currentPosition: currentPosition } = this;\n      // @ts-ignore\n      const pixelRatioWidth = canvas.width / (canvas._webCanvas as HTMLCanvasElement).clientWidth;\n      // @ts-ignore\n      const pixelRatioHeight = canvas.height / (canvas._webCanvas as HTMLCanvasElement).clientHeight;\n      if (activePointerCount === 0) {\n        // Get the pointer coordinates when leaving, and use it to correctly dispatch the click event.\n        const lastNativeEvent = nativeEvents[nativeEventsLen - 1];\n        currentPosition.setValue(lastNativeEvent.offsetX * pixelRatioWidth, lastNativeEvent.offsetY * pixelRatioHeight);\n      } else {\n        currentPosition.setValue(0, 0);\n        for (let i = 0; i < pointerCount; i++) {\n          const pointer = pointers[i];\n          const { position } = pointer;\n          if (pointer._needUpdate) {\n            position.setValue(position.x * pixelRatioWidth, position.y * pixelRatioHeight);\n            pointer._needUpdate = false;\n          }\n          currentPosition.add(position);\n        }\n        currentPosition.scale(1 / pointerCount);\n      }\n    }\n    nativeEvents.length = 0;\n  }\n\n  private _pointerRayCast(): Entity {\n    if (this._pointers.length > 0) {\n      const { _tempPoint: point, _tempRay: ray, _tempHitResult: hitResult } = PointerManager;\n      const { _activeCameras: cameras } = this._engine.sceneManager.activeScene;\n      const x = this._currentPosition.x / this._canvas.width;\n      const y = this._currentPosition.y / this._canvas.height;\n      for (let i = cameras.length - 1; i >= 0; i--) {\n        const camera = cameras[i];\n        if (!camera.enabled || camera.renderTarget) {\n          continue;\n        }\n        const { x: vpX, y: vpY, z: vpW, w: vpH } = camera.viewport;\n        if (x >= vpX && y >= vpY && x - vpX <= vpW && y - vpY <= vpH) {\n          point.setValue((x - vpX) / vpW, (y - vpY) / vpH);\n          // TODO: Only check which colliders have listened to the input.\n          if (this._engine.physicsManager.raycast(camera.viewportPointToRay(point, ray), hitResult)) {\n            return hitResult.entity;\n          } else if (camera.clearFlags === CameraClearFlags.DepthColor) {\n            return null;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  private _firePointerDrag(): void {\n    if (this._currentPressedEntity) {\n      const scripts = this._currentPressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        scripts.get(i).onPointerDrag();\n      }\n    }\n  }\n\n  private _firePointerExitAndEnter(rayCastEntity: Entity): void {\n    if (this._currentEnteredEntity !== rayCastEntity) {\n      if (this._currentEnteredEntity) {\n        const scripts = this._currentEnteredEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          scripts.get(i).onPointerExit();\n        }\n      }\n      if (rayCastEntity) {\n        const scripts = rayCastEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          scripts.get(i).onPointerEnter();\n        }\n      }\n      this._currentEnteredEntity = rayCastEntity;\n    }\n  }\n\n  private _firePointerDown(rayCastEntity: Entity): void {\n    if (rayCastEntity) {\n      const scripts = rayCastEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        scripts.get(i).onPointerDown();\n      }\n    }\n    this._currentPressedEntity = rayCastEntity;\n  }\n\n  private _firePointerUpAndClick(rayCastEntity: Entity): void {\n    const { _currentPressedEntity: pressedEntity } = this;\n    if (pressedEntity) {\n      const sameTarget = pressedEntity === rayCastEntity;\n      const scripts = pressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        sameTarget && script.onPointerClick();\n        script.onPointerUp();\n      }\n      this._currentPressedEntity = null;\n    }\n  }\n}\n\n/**\n * @internal\n */\nenum PointerKeyEvent {\n  Down,\n  Up,\n  Leave\n}\n","import { Engine } from \"../Engine\";\nimport { Pointer } from \"./pointer/Pointer\";\nimport { PointerManager } from \"./pointer/PointerManager\";\n\n/**\n * InputManager manages device input such as mouse, touch, keyboard, etc.\n */\nexport class InputManager {\n  private _pointerManager: PointerManager;\n\n  /**\n   * Pointer List.\n   */\n  get pointers(): Readonly<Pointer[]> {\n    return this._pointerManager._pointers;\n  }\n\n  /**\n   *  Whether to handle multi-pointer.\n   */\n  get multiPointerEnabled(): boolean {\n    return this._pointerManager._multiPointerEnabled;\n  }\n\n  set multiPointerEnabled(enabled: boolean) {\n    this._pointerManager._multiPointerEnabled = enabled;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine) {\n    // @ts-ignore\n    this._pointerManager = new PointerManager(engine, engine.canvas._webCanvas);\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    this._pointerManager._update();\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._pointerManager._destroy();\n  }\n}\n","/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque = 1000,\n  /** Opaque queue, alpha cutoff. */\n  AlphaTest = 2000,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent = 3000\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IRefObject } from \"./IRefObject\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class RefObject extends EngineObject implements IRefObject {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n  private _destroyed: boolean = false;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      resourceManager._deleteAsset(this);\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n\n    const refCount = this._getRefCount();\n    if (refCount > 0) {\n      this._addRefCount(-refCount);\n    }\n    this._engine = null;\n    this._onDestroy();\n    this._destroyed = true;\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   * Add reference resource.\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   * Remove reference resource.\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * Called when the resource is destroyed.\n   * Subclasses can override this function.\n   */\n  protected abstract _onDestroy(): void;\n}\n","/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** material group. */\n  Material\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Logger } from \"../base/Logger\";\nimport { IPlatformTexture } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends RefObject {\n  name: string;\n\n  /** @internal */\n  _platformTexture: IPlatformTexture;\n  /** @internal */\n  _mipmap: boolean;\n\n  protected _width: number;\n  protected _height: number;\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n    this._wrapModeU = value;\n\n    this._platformTexture.wrapModeU = value;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n    this._wrapModeV = value;\n\n    this._platformTexture.wrapModeV = value;\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n    this._filterMode = value;\n\n    this._platformTexture.filterMode = value;\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._engine._hardwareRenderer.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    this._anisoLevel = value;\n\n    this._platformTexture.anisoLevel = value;\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    this._platformTexture.generateMipmaps();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    this._platformTexture.destroy();\n    this._platformTexture = null;\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down.\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n}\n","import pbr_frag_define from \"./pbr_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_helper from \"./pbr_helper.glsl\";\nimport brdf from \"./brdf.glsl\";\nimport direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport ibl_frag_define from \"./ibl_frag_define.glsl\";\n\nimport pbr_frag from \"./pbr_frag.glsl\";\n\nexport default {\n  pbr_frag_define,\n\n  pbr_helper,\n  brdf,\n  direct_irradiance_frag_define,\n  ibl_frag_define,\n\n  pbr_frag\n};\n","import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport blendShape_input from \"./blendShape_input.glsl\";\nimport blendShape_vert from \"./blendShape_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport light_frag_define from \"./light_frag_define.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\n\nimport normal_get from \"./normal_get.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  blendShape_input,\n  blendShape_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  fog_vert,\n\n  light_frag_define,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  ...PBRShaderLib,\n  normal_get\n};\n","import { ShaderLib } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  static parseCustomMacros(macros: string[]) {\n    return (\n      macros.map((m) => `#define ${m}\\n`).join(\"\")\n    );\n  }\n\n  static parseIncludes(src: string) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  /**\n   * GLSL extension.\n   * @param {string[]} extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]) {\n    return (\n      extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\")\n    );\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    /** replace attribute and in */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** replace api */\n    shader = shader.replace(/\\btexture(2D|Cube)\\b/g, \"texture\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\b/g, \"textureLod\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this._replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  private static _replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n","/**\n * Shader macro。\n */\nexport class ShaderMacro {\n  /** name */\n  readonly name: string;\n\n  /** @internal */\n  _index: number;\n  /** @internal */\n  _value: number;\n\n  /**\n   * @internal\n   */\n  constructor(name: string, index: number, value: number) {\n    this.name = name;\n    this._index = index;\n    this._value = value;\n  }\n}\n","/**\n * Color Space.\n */\nexport enum ColorSpace {\n  /** Linear color space. */\n  Linear,\n  /** Gamma color space. */\n  Gamma\n}\n","import { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform。\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n  textureIndex: GLenum | GLenum[];\n  textureDefault: Texture | Texture[];\n\n  private _rhi: IHardwareRenderer;\n  private _gl: WebGLRenderingContext;\n  private _colorSpace: ColorSpace;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n    this._colorSpace = engine.settings.colorSpace;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform2f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g)\n          );\n        } else {\n          this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform3f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b)\n          );\n        } else {\n          this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b),\n            (<Color>value).a\n          );\n        } else {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            (<Color>value).r,\n            (<Color>value).g,\n            (<Color>value).b,\n            (<Color>value).a\n          );\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._platformTexture);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._platformTexture);\n    }\n  }\n}\n","import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n","import { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadCamera: Camera;\n  /** @internal */\n  _uploadRenderer: Renderer;\n  /** @internal */\n  _uploadMaterial: Material;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = properties[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        const texture = properties[uniform.propertyId];\n        if (texture) {\n          uniform.applyFunc(uniform, texture);\n        } else {\n          uniform.applyFunc(uniform, uniform.textureDefault);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upload ungroup texture shader data in shader uniform block.\n   */\n  uploadUngroupTextures(): void {\n    const textureUniforms = this.otherUniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, uniform.textureDefault);\n      }\n    }\n  }\n\n  /**\n   * Grouping other data.\n   */\n  groupingOtherUniformBlock() {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: IHardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBind !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBind = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._vertexShader && gl.deleteShader(this._vertexShader);\n    this._fragmentShader && gl.deleteShader(this._fragmentShader);\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(uniforms: ShaderUniform[], isTexture: boolean): void {\n    for (let i = uniforms.length - 1; i >= 0; i--) {\n      const uniform = uniforms[i];\n      const group = Shader._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        uniforms.splice(uniforms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // link program and shader\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      Logger.error(\"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      Logger.error(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      Logger.error(\n        `Could not compile WebGL shader.\\n${gl.getShaderInfoLog(shader)}`,\n        ShaderProgram._addLineNum(shaderSource)\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation() {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const group = Shader._getShaderPropertyGroup(name);\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n          } else {\n          }\n          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;\n          shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n          const defaultTexture = type === gl.SAMPLER_2D ? this._engine._whiteTexture2D : this._engine._whiteTextureCube;\n\n          isTexture = true;\n          if (isArray) {\n            const defaultTextures = new Array<Texture>(size);\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n\n            for (let i = 0; i < size; i++) {\n              defaultTextures[i] = defaultTexture;\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureDefault = defaultTextures;\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n            shaderUniform.uploadTextureArray(shaderUniform, defaultTextures);\n          } else {\n            const textureIndex = gl.TEXTURE0 + this._activeTextureUint;\n\n            shaderUniform.textureDefault = defaultTexture;\n            shaderUniform.textureIndex = textureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n            shaderUniform.uploadTexture(shaderUniform, defaultTexture);\n          }\n          break;\n      }\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos: WebGLActiveInfo[] = [];\n\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos: WebGLActiveInfo[] = [];\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n","import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  private static _propertyNameCounter: number = 0;\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n\n  /** Shader property name. */\n  readonly name: string;\n\n  /**\n   * @internal\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n","import { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader containing vertex and fragment source.\n */\nexport class Shader {\n  /** @internal */\n  static readonly _compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private static _shaderCounter: number = 0;\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n  private static _macroMaskMap: string[][] = [];\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n  private static _shaderExtension = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader {\n    const shaderMap = Shader._shaderMap;\n    if (shaderMap[name]) {\n      throw `Shader named \"${name}\" already exists.`;\n    }\n    return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro {\n    let macro = Shader._macroMap[name];\n    if (!macro) {\n      const maskMap = Shader._macroMaskMap;\n      const counter = Shader._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n      macro = new ShaderMacro(name, index, 1 << bit);\n      Shader._macroMap[name] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<string>(32);\n      }\n      maskMap[index][bit] = name;\n      Shader._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    const propertyNameMap = Shader._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty(name);\n      propertyNameMap[name] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = Shader._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  private static _getNamesByMacros(macros: ShaderMacroCollection, out: string[]): void {\n    const maskMap = Shader._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const n = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contain 1 << 31.\n      for (let j = 0; j < n; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** The name of shader. */\n  readonly name: string;\n\n  /** @internal */\n  _shaderId: number = 0;\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  private constructor(name: string, vertexSource: string, fragmentSource: string) {\n    this._shaderId = Shader._shaderCounter++;\n    this.name = name;\n    this._vertexSource = vertexSource;\n    this._fragmentSource = fragmentSource;\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   * @returns Is the compiled shader variant valid\n   */\n  compileVariant(engine: Engine, macros: string[]): boolean {\n    const compileMacros = Shader._compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(Shader.getMacroByName(macros[i]));\n    }\n    return this._getShaderProgram(engine, compileMacros).isValid;\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = [];\n    Shader._getNamesByMacros(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    let precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n    #else\n      precision mediump float;\n      precision mediump int;\n    #endif\n    `;\n\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      precisionStr += \"#define HAS_TEX_LOD\\n\";\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      precisionStr += \"#define HAS_DERIVATIVES\\n\";\n    }\n\n    let vertexSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${precisionStr}\n        ${macroNameStr}\n        ` + this._vertexSource\n    );\n\n    let fragmentSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${isWebGL2 ? \"\" : ShaderFactory.parseExtension(Shader._shaderExtension)}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + this._fragmentSource\n    );\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { IRefObject } from \"../asset/IRefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IRefObject, IClone {\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _properties: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n  \n\n  private _variableMacros: Record<string, string> = Object.create(null);\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param property - Shader property\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this._getData(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this._getData(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture>(property);\n      lastValue && lastValue._addRefCount(-1);\n      value && value._addRefCount(1);\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addRefCount(-1);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addRefCount(1);\n        }\n      }\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Enable macro.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  /**\n   * Enable macro.\n   * @remarks Name and value will combine one macro, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  enableMacro(macro: string | ShaderMacro, value: string = null): void {\n    if (value) {\n      this._enableVariableMacro(<string>macro, value);\n    } else {\n      if (typeof macro === \"string\") {\n        macro = Shader.getMacroByName(macro);\n      }\n      this._macroCollection.enable(macro);\n    }\n  }\n\n  /**\n   * Disable macro\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    if (typeof macro === \"string\") {\n      // @todo: should optimization variable macros disable performance\n      const variableValue = this._variableMacros[macro];\n      if (variableValue) {\n        this._disableVariableMacro(macro, variableValue);\n      } else {\n        macro = Shader.getMacroByName(macro);\n        this._macroCollection.disable(macro);\n      }\n    } else {\n      this._macroCollection.disable(macro);\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);\n    Object.assign(target._variableMacros, this._variableMacros);\n\n    const properties = this._properties;\n    const targetProperties = target._properties;\n    const keys = Object.keys(properties);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property: ShaderPropertyValueType = properties[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetProperties[k] = property;\n        } else if (property instanceof Texture) {\n          targetProperties[k] = property;\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetProperties[k] = property.slice();\n        } else {\n          const targetProperty = targetProperties[k];\n          if (targetProperty) {\n            property.cloneTo(targetProperty);\n          } else {\n            targetProperties[k] = property.clone();\n          }\n        }\n      } else {\n        targetProperties[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getData<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n    return this._properties[property._uniqueId] as T;\n  }\n\n  /**\n   * @internal\n   */\n  _setData<T extends ShaderPropertyValueType>(property: string | ShaderProperty, value: T): void {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} property.`;\n      }\n    }\n\n    this._properties[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n    const properties = this._properties;\n    for (const k in properties) {\n      const property = properties[k];\n      // @todo: Separate array to speed performance.\n      if (property && property instanceof Texture) {\n        property._addRefCount(value);\n      }\n    }\n  }\n\n  private _enableVariableMacro(name: string, value: string): void {\n    const variableMacro = this._variableMacros;\n    const variableValue = variableMacro[name];\n    if (variableValue !== value) {\n      variableValue && this._disableVariableMacro(name, variableValue);\n\n      const macro = Shader.getMacroByName(`${name} ${value}`);\n      this._macroCollection.enable(macro);\n      variableMacro[name] = value;\n    }\n  }\n\n  private _disableVariableMacro(name: string, value: string): void {\n    const oldMacro = Shader.getMacroByName(`${name} ${value}`);\n    this._macroCollection.disable(oldMacro);\n    delete this._variableMacros[name];\n  }\n}\n","/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n","/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n","/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n","import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** Whether to enable blend. */\n  enabled: boolean = false;\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../../base/Constant\";\nimport { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(rhi: IHardwareRenderer, blendFactor: BlendFactor): number {\n    const gl = rhi.gl;\n\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return gl.ZERO;\n      case BlendFactor.One:\n        return gl.ONE;\n      case BlendFactor.SourceColor:\n        return gl.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return gl.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return gl.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return gl.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return gl.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return gl.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return gl.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return gl.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return gl.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return gl.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return gl.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(rhi: IHardwareRenderer, blendOperation: BlendOperation): number {\n    const gl = rhi.gl;\n\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return gl.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return gl.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return gl.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Min is not supported in this context\");\n        }\n        return gl.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Max is not supported in this context\");\n        }\n        return gl.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technology. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: BlendState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    const {\n      enabled,\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    if (enabled !== lastTargetBlendState.enabled) {\n      if (enabled) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(rhi, sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(rhi, colorBlendOperation),\n          BlendState._getGLBlendOperation(rhi, alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        blendColor.cloneTo(lastState.blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n","/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: DepthState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { enabled, compareFunction, writeEnabled } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply compare func.\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(rhi, compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n\n      // apply write enabled.\n      if (writeEnabled != lastState.writeEnabled) {\n        gl.depthMask(writeEnabled);\n        lastState.writeEnabled = writeEnabled;\n      }\n    }\n  }\n}\n","/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** The scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: RasterState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    // apply polygonOffset.\n    if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n      if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(slopeScaledDepthBias, depthBias);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n      lastState.depthBias = depthBias;\n      lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n    }\n  }\n}\n","/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(rhi: IHardwareRenderer, compareFunction: StencilOperation): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return gl.KEEP;\n      case StencilOperation.Zero:\n        return gl.ZERO;\n      case StencilOperation.Replace:\n        return gl.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return gl.INCR;\n      case StencilOperation.DecrementSaturate:\n        return gl.DECR;\n      case StencilOperation.Invert:\n        return gl.INVERT;\n      case StencilOperation.IncrementWrap:\n        return gl.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return gl.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: StencilState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(rhi, compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(gl.BACK, StencilState._getGLCompareFunction(rhi, compareFunctionBack), referenceValue, mask);\n        lastState.compareFunctionBack = this.compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = this.referenceValue;\n        lastState.mask = this.mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(rhi, failOperationFront),\n          StencilState._getGLStencilOperation(rhi, zFailOperationFront),\n          StencilState._getGLStencilOperation(rhi, passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(rhi, failOperationBack),\n          StencilState._getGLStencilOperation(rhi, zFailOperationBack),\n          StencilState._getGLStencilOperation(rhi, passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n","import { Engine } from \"../../Engine\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  readonly rasterState: RasterState = new RasterState();\n\n  /** @internal */\n  _apply(engine: Engine): void {\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    this.blendState._apply(hardwareRenderer, lastRenderState);\n    this.depthState._apply(hardwareRenderer, lastRenderState);\n    this.stencilState._apply(hardwareRenderer, lastRenderState);\n    this.rasterState._apply(hardwareRenderer, lastRenderState);\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\n\n/**\n * Material.\n */\nexport class Material extends RefObject implements IClone {\n  /** Name. */\n  name: string;\n  /** Shader used by the material. */\n  shader: Shader;\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n  /** Render state. */\n  readonly renderState: RenderState = new RenderState(); // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    target.renderQueueType = this.renderQueueType;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderState, target.renderState);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    this.shaderData._addRefCount(value);\n  }\n\n  /**\n   * @internal\n   * @todo:temporary solution\n   */\n  _preRender(renderElement: RenderElement) {}\n\n  /**\n   * @override\n   */\n  protected _onDestroy(): void {}\n}\n","/**\n * Class pool utils.\n */\nexport class ClassPool<T> {\n  private _elementPoolIndex: number = 0;\n  private _elementPool: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T) {\n    this._type = type;\n  }\n\n  /**\n   * Get element from pool.\n   */\n  getFromPool(): T {\n    const { _elementPoolIndex: index, _elementPool: pool } = this;\n    this._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new this._type();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * Reset pool.\n   */\n  resetPool(): void {\n    this._elementPoolIndex = 0;\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\n\n/**\n * Rendering context.\n */\nexport class RenderContext {\n  /** @internal */\n  _camera: Camera;\n  /** @internal */\n  _viewProjectMatrix: Matrix = new Matrix();\n\n  /**\n   * @internal\n   */\n  _setContext(camera: Camera): void {\n    this._camera = camera;\n    Matrix.multiply(camera.projectionMatrix, camera.viewMatrix, this._viewProjectMatrix);\n  }\n}\n","import { Mesh } from \"../graphic/Mesh\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\n/**\n * Render element.\n */\nexport class RenderElement {\n  /** Render component. */\n  component: Renderer;\n  /** Mesh. */\n  mesh: Mesh;\n  /** Sub mesh. */\n  subMesh: SubMesh;\n  /** Material. */\n  material: Material;\n\n  setValue(component: Renderer, mesh: Mesh, subMesh: SubMesh, material: Material): void {\n    this.component = component;\n    this.mesh = mesh;\n    this.subMesh = subMesh;\n    this.material = material;\n  }\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\nexport class SpriteElement {\n  component: Renderer;\n  positions: Vector3[];\n  uv: Vector2[];\n  triangles: number[];\n  color: Color;\n  material: Material;\n  camera: Camera;\n\n  setValue(\n    component: Renderer,\n    positions: Vector3[],\n    uv: Vector2[],\n    triangles: number[],\n    color: Color,\n    material: Material,\n    camera: Camera\n  ): void {\n    this.component = component;\n    this.positions = positions;\n    this.uv = uv;\n    this.triangles = triangles;\n    this.color = color;\n    this.material = material;\n    this.camera = camera;\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Material } from \"../material/Material\";\n\nexport class SpriteMaskElement {\n  component: Component;\n  positions: Vector3[];\n  uv: Vector2[];\n  triangles: number[];\n  material: Material;\n  isAdd: boolean = true;\n  camera: Camera;\n\n  setValue(component: Component, positions: Vector3[], uv: Vector2[], triangles: number[], material: Material): void {\n    this.component = component;\n    this.positions = positions;\n    this.uv = uv;\n    this.triangles = triangles;\n    this.material = material;\n  }\n}\n","/**\n * Sprite mask interaction.\n */\nexport enum SpriteMaskInteraction {\n  /** The sprite will not interact with the masking system. */\n  None,\n  /** The sprite will be visible only in areas where a mask is present. */\n  VisibleInsideMask,\n  /** The sprite will be visible only in areas where no mask is present. */\n  VisibleOutsideMask\n}\n","import { BoundingBox, Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"./Camera\";\nimport { deepClone, ignoreClone, shallowClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { Material } from \"./material/Material\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Shader } from \"./shader\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Renderable component.\n */\nexport abstract class Renderer extends Component {\n  private static _localMatrixProperty = Shader.getPropertyByName(\"u_localMat\");\n  private static _worldMatrixProperty = Shader.getPropertyByName(\"u_modelMat\");\n  private static _mvMatrixProperty = Shader.getPropertyByName(\"u_MVMat\");\n  private static _mvpMatrixProperty = Shader.getPropertyByName(\"u_MVPMat\");\n  private static _mvInvMatrixProperty = Shader.getPropertyByName(\"u_MVInvMat\");\n  private static _normalMatrixProperty = Shader.getPropertyByName(\"u_normalMat\");\n\n  /** ShaderData related to renderer. */\n  @deepClone\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  /** Whether it is clipped by the frustum, needs to be turned on camera.enableFrustumCulling. */\n  @ignoreClone\n  isCulled: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _distanceForSort: number;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n\n  /** @internal temp solution. */\n  @ignoreClone\n  _renderSortId: number = 0;\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n  @shallowClone\n  protected _materials: Material[] = [];\n\n  @ignoreClone\n  private _transformChangeFlag: UpdateFlag;\n  @deepClone\n  private _bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _materialsInstanced: boolean[] = [];\n\n  /**\n   * Material count.\n   */\n  get materialCount(): number {\n    return this._materials.length;\n  }\n\n  set materialCount(value: number) {\n    const materials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    materials.length !== value && (materials.length = value);\n    materialsInstanced.length > value && (materialsInstanced.length = value);\n  }\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Get the first instance material.\n   * @returns The first instance material\n   */\n  getInstanceMaterial(): Material | null;\n\n  /**\n   * Get the first instance material by index.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @param index - Material index\n   * @returns Instance material\n   */\n  getInstanceMaterial(index: number): Material | null;\n\n  getInstanceMaterial(index: number = 0): Material | null {\n    const materials = this._materials;\n    if (materials.length > index) {\n      const material = materials[index];\n      if (material) {\n        if (this._materialsInstanced[index]) {\n          return material;\n        } else {\n          return this._createInstanceMaterial(material, index);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first material.\n   * @returns The first material\n   */\n  getMaterial(): Material | null;\n\n  /**\n   * Get the first material by index.\n   * @param index - Material index\n   * @returns Material\n   */\n  getMaterial(index: number): Material | null;\n\n  getMaterial(index: number = 0): Material | null {\n    return this._materials[index] || null;\n  }\n\n  /**\n   * Set the first material.\n   * @param material - The first material\n   */\n  setMaterial(material: Material): void;\n\n  /**\n   * Set material by index.\n   * @param index - Material index\n   * @param material - The material\n   */\n  setMaterial(index: number, material: Material): void;\n\n  setMaterial(indexOrMaterial: number | Material, material: Material = null): void {\n    let index;\n    if (typeof indexOrMaterial === \"number\") {\n      index = indexOrMaterial;\n    } else {\n      index = 0;\n      material = indexOrMaterial;\n    }\n\n    const materials = this._materials;\n    if (index >= materials.length) {\n      materials.length = index + 1;\n    }\n\n    const materialsInstance = this._materialsInstanced;\n    const internalMaterial = materials[index];\n    if (internalMaterial !== material) {\n      materials[index] = material;\n      index < materialsInstance.length && (materialsInstance[index] = false);\n      internalMaterial && internalMaterial._addRefCount(-1);\n      material && material._addRefCount(1);\n    }\n  }\n\n  /**\n   * Get all instance materials.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @returns All instance materials\n   */\n  getInstanceMaterials(): Readonly<Material[]> {\n    const materials = this._materials;\n    const materialsInstance = this._materialsInstanced;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      if (!materialsInstance[i]) {\n        this._createInstanceMaterial(this._materials[i], i);\n      }\n    }\n    return materials;\n  }\n\n  /**\n   * Get all materials.\n   * @returns All materials\n   */\n  getMaterials(): Readonly<Material[]> {\n    return this._materials;\n  }\n\n  /**\n   * Set all materials.\n   * @param materials - All materials\n   */\n  setMaterials(materials: Material[]): void {\n    const count = materials.length;\n    const internalMaterials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    for (let i = count, n = internalMaterials.length; i < n; i++) {\n      const internalMaterial = internalMaterials[i];\n      internalMaterial && internalMaterial._addRefCount(-1);\n    }\n\n    internalMaterials.length !== count && (internalMaterials.length = count);\n    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);\n\n    for (let i = 0; i < count; i++) {\n      const internalMaterial = internalMaterials[i];\n      const material = materials[i];\n      if (internalMaterial !== material) {\n        internalMaterials[i] = material;\n        internalMaterial && internalMaterial._addRefCount(-1);\n        material && material._addRefCount(1);\n      }\n    }\n  }\n\n  update(deltaTime: number): void {}\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext): void {\n    const shaderData = this.shaderData;\n    const worldMatrix = this.entity.transform.worldMatrix;\n    const mvMatrix = this._mvMatrix;\n    const mvpMatrix = this._mvpMatrix;\n    const mvInvMatrix = this._mvInvMatrix;\n    const normalMatrix = this._normalMatrix;\n\n    Matrix.multiply(context._camera.viewMatrix, worldMatrix, mvMatrix);\n    Matrix.multiply(context._viewProjectMatrix, worldMatrix, mvpMatrix);\n    Matrix.invert(mvMatrix, mvInvMatrix);\n    Matrix.invert(worldMatrix, normalMatrix);\n    normalMatrix.transpose();\n\n    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);\n    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n  }\n\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  abstract _render(camera: Camera): void;\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n\n    this.shaderData._addRefCount(-1);\n\n    for (let i = 0, n = this._materials.length; i < n; i++) {\n      this._materials[i]._addRefCount(-1);\n    }\n  }\n\n  protected _updateBounds(worldBounds: BoundingBox): void {}\n\n  private _createInstanceMaterial(material: Material, index: number): Material {\n    const insMaterial: Material = material.clone();\n    insMaterial.name = insMaterial.name + \"(Instance)\";\n    material._addRefCount(-1);\n    insMaterial._addRefCount(1);\n    this._materialsInstanced[index] = true;\n    this._materials[index] = insMaterial;\n    return insMaterial;\n  }\n}\n","/**\n * Sprite mask layer.\n */\nexport enum SpriteMaskLayer {\n  /** Mask layer 0. */\n  Layer0 = 0x1,\n  /** Mask layer 1. */\n  Layer1 = 0x2,\n  /** Mask layer 2. */\n  Layer2 = 0x4,\n  /** Mask layer 3. */\n  Layer3 = 0x8,\n  /** Mask layer 4. */\n  Layer4 = 0x10,\n  /** Mask layer 5. */\n  Layer5 = 0x20,\n  /** Mask layer 6. */\n  Layer6 = 0x40,\n  /** Mask layer 7. */\n  Layer7 = 0x80,\n  /** Mask layer 8. */\n  Layer8 = 0x100,\n  /** Mask layer 9. */\n  Layer9 = 0x200,\n  /** Mask layer 10. */\n  Layer10 = 0x400,\n  /** Mask layer 11. */\n  Layer11 = 0x800,\n  /** Mask layer 12. */\n  Layer12 = 0x1000,\n  /** Mask layer 13. */\n  Layer13 = 0x2000,\n  /** Mask layer 14. */\n  Layer14 = 0x4000,\n  /** Mask layer 15. */\n  Layer15 = 0x8000,\n  /** Mask layer 16. */\n  Layer16 = 0x10000,\n  /** Mask layer 17. */\n  Layer17 = 0x20000,\n  /** Mask layer 18. */\n  Layer18 = 0x40000,\n  /** Mask layer 19. */\n  Layer19 = 0x80000,\n  /** Mask layer 20. */\n  Layer20 = 0x100000,\n  /** Mask layer 21. */\n  Layer21 = 0x200000,\n  /** Mask layer 22. */\n  Layer22 = 0x400000,\n  /** Mask layer 23. */\n  Layer23 = 0x800000,\n  /** Mask layer 24. */\n  Layer24 = 0x1000000,\n  /** Mask layer 25. */\n  Layer25 = 0x2000000,\n  /** Mask layer 26. */\n  Layer26 = 0x4000000,\n  /** Mask layer 27. */\n  Layer27 = 0x8000000,\n  /** Mask layer 28. */\n  Layer28 = 0x10000000,\n  /** Mask layer 29. */\n  Layer29 = 0x20000000,\n  /** Mask layer 30. */\n  Layer30 = 0x40000000,\n  /** Mask layer 31. */\n  Layer31 = 0x80000000,\n  /** All mask layers. */\n  Everything = 0xffffffff\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { SpriteMaskElement } from \"../../RenderPipeline/SpriteMaskElement\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * A component for masking Sprites.\n */\nexport class SpriteMask extends Renderer {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskTexture\");\n  /** @internal */\n  static _alphaCutoffProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskAlphaCutoff\");\n\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** @internal */\n  _maskElement: SpriteMaskElement;\n\n  @deepClone\n  private _positions: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  @ignoreClone\n  private _isSpriteDirty: boolean = true;\n  @ignoreClone\n  private _worldMatrixDirtyFlag: UpdateFlag;\n  @assignmentClone\n  private _sprite: Sprite = null;\n  @assignmentClone\n  private _alphaCutoff: number = 0.5;\n\n  /** The mask layers the sprite mask influence to. */\n  @assignmentClone\n  influenceLayers: number = SpriteMaskLayer.Everything;\n\n  /**\n   * The Sprite used to define the mask.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite) {\n    if (this._sprite !== value) {\n      this._sprite = value;\n      this._isSpriteDirty = true;\n    }\n  }\n\n  /**\n   * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(value: number) {\n    if (this._alphaCutoff !== value) {\n      this._alphaCutoff = value;\n      this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._worldMatrixDirtyFlag = entity.transform.registerWorldChangeFlag();\n    this.setMaterial(this._engine._spriteMaskDefaultMaterial);\n    this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, this._alphaCutoff);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._worldMatrixDirtyFlag.destroy();\n    super._onDestroy();\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _render(camera: Camera): void {\n    const sprite = this.sprite;\n    if (!sprite) {\n      return null;\n    }\n    const texture = sprite.texture;\n    if (!texture) {\n      return null;\n    }\n\n    const positions = this._positions;\n    const transform = this.entity.transform;\n\n    // Update sprite data.\n    const localDirty = sprite._updateMeshData();\n\n    if (this._worldMatrixDirtyFlag.flag || localDirty || this._isSpriteDirty) {\n      const localPositions = sprite._positions;\n      const localVertexPos = SpriteMask._tempVec3;\n      const worldMatrix = transform.worldMatrix;\n\n      for (let i = 0, n = positions.length; i < n; i++) {\n        const curVertexPos = localPositions[i];\n        localVertexPos.setValue(curVertexPos.x, curVertexPos.y, 0);\n        Vector3.transformToVec3(localVertexPos, worldMatrix, positions[i]);\n      }\n\n      this._isSpriteDirty = false;\n      this._worldMatrixDirtyFlag.flag = false;\n    }\n\n    this.shaderData.setTexture(SpriteMask._textureProperty, texture);\n    const spriteMaskElementPool = this._engine._spriteMaskElementPool;\n    const maskElement = spriteMaskElementPool.getFromPool();\n    maskElement.setValue(this, positions, sprite._uv, sprite._triangles, this.getMaterial());\n    maskElement.camera = camera;\n\n    camera._renderPipeline._allSpriteMasks.add(this);\n    this._maskElement = maskElement;\n  }\n}\n","/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n","/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n","/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n","import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n  normalized: boolean;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  static _getGLIndexByteCount(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return 1;\n      case IndexFormat.UInt16:\n        return 2;\n      case IndexFormat.UInt32:\n        return 4;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    let normalized: boolean = false;\n\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.BYTE;\n        break;\n      case VertexElementFormat.UByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.NormalizedByte4:\n        size = 4;\n        type = DataType.BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort2:\n        size = 2;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort4:\n        size = 4;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      default:\n        break;\n    }\n    return { size, type, normalized };\n  }\n}\n","import { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { ElementInfo, BufferUtil } from \"./BufferUtil\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex semantic.\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param semantic - Input vertex semantic\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n}\n","/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n","/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: IHardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param data - Byte\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n","/**\n * Mesh topology.\n */\nexport enum MeshTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { MeshTopology } from \"./enums/MeshTopology\";\n\n/**\n * Sub-mesh, mainly contains drawing information.\n */\nexport class SubMesh {\n  /** Start drawing offset. */\n  start: number;\n  /** Drawing count. */\n  count: number;\n  /** Drawing topology. */\n  topology: MeshTopology;\n\n  /**\n   * Create a sub-mesh.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: MeshTopology = MeshTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n","import { IPlatformPrimitive } from \"@oasis-engine/design/types/renderingHardwareInterface/IPlatformPrimitive\";\nimport { BoundingBox } from \"@oasis-engine/math\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { BufferUtil } from \"../graphic/BufferUtil\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * Mesh.\n */\nexport abstract class Mesh extends RefObject {\n  /** Name. */\n  name: string;\n  /** The bounding volume of the mesh. */\n  readonly bounds: BoundingBox = new BoundingBox();\n\n  _vertexElementMap: Record<string, VertexElement> = {};\n  _glIndexType: number;\n  _glIndexByteCount: number;\n  _platformPrimitive: IPlatformPrimitive;\n\n  /** @internal */\n  _instanceCount: number = 0;\n  /** @internal */\n  _vertexBufferBindings: VertexBufferBinding[] = [];\n  /** @internal */\n  _indexBufferBinding: IndexBufferBinding = null;\n  /** @internal */\n  _vertexElements: VertexElement[] = [];\n\n  private _subMeshes: SubMesh[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * First sub-mesh. Rendered using the first material.\n   */\n  get subMesh(): SubMesh | null {\n    return this._subMeshes[0] || null;\n  }\n\n  /**\n   * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.\n   */\n  get subMeshes(): Readonly<SubMesh[]> {\n    return this._subMeshes;\n  }\n\n  /**\n   * Create mesh.\n   * @param engine - Engine\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @returns Sub-mesh\n   */\n  addSubMesh(subMesh: SubMesh): SubMesh;\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is MeshTopology.Triangles\n   * @returns Sub-mesh\n   */\n  addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;\n\n  addSubMesh(\n    startOrSubMesh: number | SubMesh,\n    count?: number,\n    topology: MeshTopology = MeshTopology.Triangles\n  ): SubMesh {\n    if (typeof startOrSubMesh === \"number\") {\n      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);\n    }\n    this._subMeshes.push(startOrSubMesh);\n    return startOrSubMesh;\n  }\n\n  /**\n   * Remove sub-mesh.\n   * @param subMesh - Sub-mesh needs to be removed\n   */\n  removeSubMesh(subMesh: SubMesh): void {\n    const subMeshes = this._subMeshes;\n    const index = subMeshes.indexOf(subMesh);\n    if (index !== -1) {\n      subMeshes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub-mesh.\n   */\n  clearSubMesh(): void {\n    this._subMeshes.length = 0;\n  }\n\n  /**\n   * Register update flag, update flag will be true if the vertex element changes.\n   * @returns Update flag\n   */\n  registerUpdateFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @internal\n   */\n  _draw(shaderProgram: ShaderProgram, subMesh: SubMesh): void {\n    this._platformPrimitive.draw(shaderProgram, subMesh);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    const vertexBufferBindings = this._vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]._buffer._addRefCount(value);\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy(): void {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  protected _setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  protected _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    if (this._getRefCount() > 0) {\n      const lastBinding = this._vertexBufferBindings[index];\n      lastBinding && lastBinding._buffer._addRefCount(-1);\n      binding._buffer._addRefCount(1);\n    }\n    this._vertexBufferBindings[index] = binding;\n  }\n\n  protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    if (binding) {\n      this._indexBufferBinding = binding;\n      this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n      this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);\n    } else {\n      this._indexBufferBinding = null;\n      this._glIndexType = undefined;\n    }\n  }\n\n  private _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (const k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n  }\n\n  private _addVertexElement(element: VertexElement): void {\n    const { semantic } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n    this._updateFlagManager.distribute();\n  }\n}\n","import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear filtering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n","/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */\n  R5G6B5,\n  /** Transparent format,8 bits. */\n  Alpha8,\n  /** Luminance/alpha in RGB channel, alpha in A channel. */\n  LuminanceAlpha,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32,\n  /** RGB compressed format。*/\n  DXT1,\n  /** RGBA compressed format。*/\n  DXT5,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC1_RGB,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC2_RGB,\n  /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5,\n  /** RGB compressed format,8 bits per pixel. */\n  ETC2_RGBA8,\n  /** RGB compressed format,2 bits per pixel. */\n  PVRTC_RGB2,\n  /** RGBA compressed format,2 bits per pixel. */\n  PVRTC_RGBA2,\n  /** RGB compressed format,4 bits per pixel. */\n  PVRTC_RGB4,\n  /** RGBA compressed format,4 bits per pixel. */\n  PVRTC_RGBA4,\n  /** RGB(A) compressed format,128 bits per 4x4 pixel block. */\n  ASTC_4x4,\n  /** RGB(A) compressed format,128 bits per 5x5 pixel block. */\n  ASTC_5x5,\n  /** RGB(A) compressed format,128 bits per 6x6 pixel block. */\n  ASTC_6x6,\n  /** RGB(A) compressed format,128 bits per 8x8 pixel block. */\n  ASTC_8x8,\n  /** RGB(A) compressed format,128 bits per 10x10 pixel block. */\n  ASTC_10x10,\n  /** RGB(A) compressed format,128 bits per 12x12 pixel block. */\n  ASTC_12x12\n}\n","/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clamping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2D } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  private _format: TextureFormat;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void;\n\n  getPixelBuffer(\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width,\n        this._height,\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","/**\n * The rendering buffer color format enumeration.\n */\nexport enum RenderBufferColorFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel, 5 bits in G channel, 5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel, 6 bits in G channel, 5 bits in B channel. */\n  R5G6B5,\n  /** transparent format, 8 bits. */\n  Alpha8,\n  /** RGBA format,16 bits per channel. */\n  R16G16B16A16,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32\n}\n","/**\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth = 0,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil = 1,\n  /** Render to stencil buffer. */\n  Stencil = 2,\n\n  /** Force 16-bit depth buffer. */\n  Depth16 = 3,\n  /** Force 24-bit depth buffer. */\n  Depth24 = 4,\n  /** Force 32-bit depth buffer. */\n  Depth32 = 5,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8 = 6,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8 = 7\n}\n","/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTextureCubeMap } from \"../renderingHardwareInterface\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCubeMap extends Texture {\n  private _format: TextureFormat;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTextureCubeMap(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).setImageSource(\n      face,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    face: TextureCubeFace,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 2) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 3) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width,\n        this._height,\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 7) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of depth information in off-screen rendering.\n */\nexport class RenderDepthTexture extends Texture {\n  private _autoMipmap: boolean = false;\n  private _format: RenderBufferDepthFormat;\n  private _isCube: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): RenderBufferDepthFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to render to a cube texture.\n   */\n  get isCube(): boolean {\n    return this._isCube;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderDepthTexture.\n   * @param engine - Define the engine to use to render this depth texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferDepthFormat = RenderBufferDepthFormat.Depth,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n\n    this._isCube = isCube;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformRenderDepthTexture(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n}\n","import { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformRenderTarget } from \"../renderingHardwareInterface\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { RenderColorTexture } from \"./RenderColorTexture\";\nimport { RenderDepthTexture } from \"./RenderDepthTexture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends EngineObject {\n  /** @internal */\n  _platformRenderTarget: IPlatformRenderTarget;\n  /** @internal */\n  _colorTextures: RenderColorTexture[];\n  /** @internal */\n  _depth: RenderDepthTexture | RenderBufferDepthFormat | null;\n  /** @internal */\n  _antiAliasing: number;\n\n  private _width: number;\n  private _height: number;\n  private _depthTexture: RenderDepthTexture | null;\n\n  /**\n   * Render target width.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   */\n  get depthTexture(): RenderDepthTexture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture | null,\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: RenderColorTexture | Array<RenderColorTexture> | null,\n    depth: RenderDepthTexture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n\n    this._width = width;\n    this._height = height;\n    this._antiAliasing = antiAliasing;\n    this._depth = depth;\n\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (depth instanceof RenderDepthTexture) {\n      this._depthTexture = depth;\n    }\n\n    this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n\n  /**\n   *\n   * Get the render color texture by index.\n   * @param index\n   */\n  getColorTexture(index: number = 0): RenderColorTexture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * Generate the mipmap of each attachment texture of the renderTarget according to the configuration.\n   */\n  generateMipmaps(): void {\n    const colorTextureCount = this.colorTextureCount;\n\n    if (this._depthTexture?.autoGenerateMipmaps) {\n      this._depthTexture.generateMipmaps();\n    }\n\n    for (let i = 0; i < colorTextureCount; i++) {\n      const colorTexture = this._colorTextures[i];\n      if (colorTexture.autoGenerateMipmaps) {\n        colorTexture.generateMipmaps();\n      }\n    }\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy() {\n    this._platformRenderTarget.destroy();\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depth = null;\n  }\n\n  /**\n   * @internal\n   */\n  _setRenderTargetInfo(faceIndex: TextureCubeFace, mipLevel: number): void {\n    this._platformRenderTarget.setRenderTargetInfo(faceIndex, mipLevel);\n  }\n\n  /**\n   * @internal\n   */\n  _blitRenderTarget(): void {\n    this._platformRenderTarget.blitRenderTarget();\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformRenderColorTexture } from \"../renderingHardwareInterface\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of color information in off-screen rendering.\n */\nexport class RenderColorTexture extends Texture {\n  private _autoMipmap: boolean = false;\n  private _format: RenderBufferColorFormat;\n  private _isCube: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): RenderBufferColorFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to render to a cube texture.\n   */\n  get isCube(): boolean {\n    return this._isCube;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderColorTexture.\n   * @param engine - Define the engine to use to render this color texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferColorFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferColorFormat = RenderBufferColorFormat.R8G8B8A8,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n\n    this._isCube = isCube;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformRenderColorTexture(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read if it's cube texture\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Set mip level the data want to get from\n   * @param out - Color buffer\n   */\n  public getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number = 0,\n    out: ArrayBufferView\n  ): void {\n    (this._platformTexture as IPlatformRenderColorTexture).getPixelBuffer(face, x, y, width, height, mipLevel, out);\n  }\n}\n","import { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { Engine } from \"../Engine\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { IndexBufferBinding } from \"../graphic\";\nimport { BlendShape } from \"./BlendShape\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureFilterMode, TextureFormat } from \"../texture\";\n\n/**\n * Mesh containing common vertex elements of the model.\n */\nexport class ModelMesh extends Mesh {\n  /** @internal */\n  _hasBlendShape: boolean = false;\n  /** @internal */\n  _useBlendShapeNormal: boolean = false;\n  /** @internal */\n  _useBlendShapeTangent: boolean = false;\n  /** @internal */\n  _blendShapeTexture: Texture2D;\n\n  private _vertexCount: number = 0;\n  private _accessible: boolean = true;\n  private _verticesFloat32: Float32Array | null = null;\n  private _verticesUint8: Uint8Array | null = null;\n  private _indices: Uint8Array | Uint16Array | Uint32Array | null = null;\n  private _indicesFormat: IndexFormat = null;\n  private _vertexSlotChanged: boolean = true;\n  private _vertexChangeFlag: number = 0;\n  private _indicesChangeFlag: boolean = false;\n  private _elementCount: number = 0;\n  private _vertexElementsCache: VertexElement[] = [];\n\n  private _positions: Vector3[] = [];\n  private _normals: Vector3[] | null = null;\n  private _colors: Color[] | null = null;\n  private _tangents: Vector4[] | null = null;\n  private _uv: Vector2[] | null = null;\n  private _uv1: Vector2[] | null = null;\n  private _uv2: Vector2[] | null = null;\n  private _uv3: Vector2[] | null = null;\n  private _uv4: Vector2[] | null = null;\n  private _uv5: Vector2[] | null = null;\n  private _uv6: Vector2[] | null = null;\n  private _uv7: Vector2[] | null = null;\n  private _boneWeights: Vector4[] | null = null;\n  private _boneIndices: Vector4[] | null = null;\n  private _blendShapes: BlendShape[] = [];\n  private _blendShapeUpdateFlags: UpdateFlag[] = [];\n\n  /**\n   * Whether to access data of the mesh.\n   */\n  get accessible(): boolean {\n    return this._accessible;\n  }\n\n  /**\n   * Vertex count of current mesh.\n   */\n  get vertexCount(): number {\n    return this._vertexCount;\n  }\n\n  /**\n   * BlendShape count of this ModelMesh.\n   */\n  get blendShapes(): Readonly<BlendShape[]> {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._blendShapes;\n  }\n\n  /**\n   * Create a model mesh.\n   * @param engine - Engine to which the mesh belongs\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n  }\n\n  /**\n   * Set positions for the mesh.\n   * @param positions - The positions for the mesh.\n   */\n  setPositions(positions: Vector3[]): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const count = positions.length;\n    this._positions = positions;\n    this._vertexChangeFlag |= ValueChanged.Position;\n\n    if (this._vertexCount !== count) {\n      this._vertexCount = count;\n    }\n  }\n\n  /**\n   * Get positions for the mesh.\n   * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.\n   */\n  getPositions(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    return this._positions;\n  }\n\n  /**\n   * Set per-vertex normals for the mesh.\n   * @param normals - The normals for the mesh.\n   */\n  setNormals(normals: Vector3[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (normals.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._normals !== !!normals;\n    this._vertexChangeFlag |= ValueChanged.Normal;\n    this._normals = normals;\n  }\n\n  /**\n   * Get normals for the mesh.\n   * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.\n   */\n  getNormals(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._normals;\n  }\n\n  /**\n   * Set per-vertex colors for the mesh.\n   * @param colors - The colors for the mesh.\n   */\n  setColors(colors: Color[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (colors.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._colors !== !!colors;\n    this._vertexChangeFlag |= ValueChanged.Color;\n    this._colors = colors;\n  }\n\n  /**\n   * Get colors for the mesh.\n   * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.\n   */\n  getColors(): Color[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._colors;\n  }\n\n  /**\n   * Set per-vertex bone weights for the mesh.\n   * @param boneWeights - The bone weights for the mesh.\n   */\n  setBoneWeights(boneWeights: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneWeights.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = boneWeights != null;\n    this._vertexChangeFlag |= ValueChanged.BoneWeight;\n    this._boneWeights = boneWeights;\n  }\n\n  /**\n   * Get weights for the mesh.\n   * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.\n   */\n  getBoneWeights(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneWeights;\n  }\n\n  /**\n   * Set per-vertex bone indices for the mesh.\n   * @param boneIndices - The bone indices for the mesh.\n   */\n  setBoneIndices(boneIndices: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneIndices.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._boneIndices !== !!boneIndices;\n    this._vertexChangeFlag |= ValueChanged.BoneIndex;\n    this._boneIndices = boneIndices;\n  }\n\n  /**\n   * Get joints for the mesh.\n   * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.\n   */\n  getBoneIndices(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneIndices;\n  }\n\n  /**\n   * Set per-vertex tangents for the mesh.\n   * @param tangents - The tangents for the mesh.\n   */\n  setTangents(tangents: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (tangents.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._tangents !== !!tangents;\n    this._vertexChangeFlag |= ValueChanged.Tangent;\n    this._tangents = tangents;\n  }\n\n  /**\n   * Get tangents for the mesh.\n   * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.\n   */\n  getTangents(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._tangents;\n  }\n\n  /**\n   * Set per-vertex uv for the mesh.\n   * @param uv - The uv for the mesh.\n   */\n  setUVs(uv: Vector2[] | null): void;\n  /**\n   * Set per-vertex uv for the mesh by channelIndex.\n   * @param uv - The uv for the mesh.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   */\n  setUVs(uv: Vector2[] | null, channelIndex: number): void;\n  setUVs(uv: Vector2[] | null, channelIndex?: number): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (uv.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        this._vertexSlotChanged = !!this._uv !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV;\n        this._uv = uv;\n        break;\n      case 1:\n        this._vertexSlotChanged = !!this._uv1 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV1;\n        this._uv1 = uv;\n        break;\n      case 2:\n        this._vertexSlotChanged = !!this._uv2 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV2;\n        this._uv2 = uv;\n        break;\n      case 3:\n        this._vertexSlotChanged = !!this._uv3 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV3;\n        this._uv3 = uv;\n        break;\n      case 4:\n        this._vertexSlotChanged = !!this._uv4 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV4;\n        this._uv4 = uv;\n        break;\n      case 5:\n        this._vertexSlotChanged = !!this._uv5 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV5;\n        this._uv5 = uv;\n        break;\n      case 6:\n        this._vertexSlotChanged = !!this._uv6 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV6;\n        this._uv6 = uv;\n        break;\n      case 7:\n        this._vertexSlotChanged = !!this._uv7 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV7;\n        this._uv7 = uv;\n        break;\n      default:\n        throw \"The index of channel needs to be in range [0 - 7].\";\n    }\n  }\n\n  /**\n   * Get uv for the mesh.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(): Vector2[] | null;\n  /**\n   * Get uv for the mesh by channelIndex.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(channelIndex: number): Vector2[] | null;\n  getUVs(channelIndex?: number): Vector2[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        return this._uv;\n      case 1:\n        return this._uv1;\n      case 2:\n        return this._uv2;\n      case 3:\n        return this._uv3;\n      case 4:\n        return this._uv4;\n      case 5:\n        return this._uv5;\n      case 6:\n        return this._uv6;\n      case 7:\n        return this._uv7;\n    }\n    throw \"The index of channel needs to be in range [0 - 7].\";\n  }\n\n  /**\n   * Set indices for the mesh.\n   * @param indices - The indices for the mesh.\n   */\n  setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (this._indices !== indices) {\n      this._indices = indices;\n      if (indices instanceof Uint8Array) {\n        this._indicesFormat = IndexFormat.UInt8;\n      } else if (indices instanceof Uint16Array) {\n        this._indicesFormat = IndexFormat.UInt16;\n      } else if (indices instanceof Uint32Array) {\n        this._indicesFormat = IndexFormat.UInt32;\n      }\n    }\n\n    this._indicesChangeFlag = true;\n  }\n\n  /**\n   * Get indices for the mesh.\n   */\n  getIndices(): Uint8Array | Uint16Array | Uint32Array {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._indices;\n  }\n\n  /**\n   * Add a BlendShape for this ModelMesh.\n   * @param blendShape - The BlendShape\n   */\n  addBlendShape(blendShape: BlendShape): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    this._vertexChangeFlag |= ValueChanged.BlendShape;\n    this._useBlendShapeNormal = this._useBlendShapeNormal || blendShape._useBlendShapeNormal;\n    this._useBlendShapeTangent = this._useBlendShapeTangent || blendShape._useBlendShapeTangent;\n    this._blendShapes.push(blendShape);\n    this._blendShapeUpdateFlags.push(blendShape._registerChangeFlag());\n    this._hasBlendShape = true;\n  }\n\n  /**\n   * Clear all BlendShapes.\n   */\n  clearBlendShapes(): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    this._vertexChangeFlag |= ValueChanged.BlendShape;\n    this._useBlendShapeNormal = false;\n    this._useBlendShapeTangent = false;\n    this._blendShapes.length = 0;\n    const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n    for (let i = 0, n = blendShapeUpdateFlags.length; i < n; i++) {\n      blendShapeUpdateFlags[i].destroy();\n    }\n    blendShapeUpdateFlags.length = 0;\n    this._hasBlendShape = false;\n  }\n\n  /**\n   * Upload Mesh Data to the graphics API.\n   * @param noLongerAccessible - Whether to access data later. If true, you'll never access data anymore (free memory cache)\n   */\n  uploadData(noLongerAccessible: boolean): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const { _indices } = this;\n\n    // Vertex element change.\n    if (this._vertexSlotChanged) {\n      const vertexElements = this._updateVertexElements();\n      this._setVertexElements(vertexElements);\n      this._vertexChangeFlag = ValueChanged.All;\n      this._vertexSlotChanged = false;\n    }\n\n    // Vertex value change.\n    const vertexBufferBindings = this._vertexBufferBindings;\n    const elementCount = this._elementCount;\n    const vertexBuffer = vertexBufferBindings[0]?._buffer;\n    const vertexFloatCount = elementCount * this._vertexCount;\n    if (!vertexBuffer || this._verticesFloat32.length !== vertexFloatCount) {\n      vertexBuffer?.destroy();\n      const vertices = new Float32Array(vertexFloatCount);\n      this._verticesFloat32 = vertices;\n      this._verticesUint8 = new Uint8Array(vertices.buffer);\n\n      this._vertexChangeFlag = ValueChanged.All;\n      this._updateVertices(vertices);\n\n      const newVertexBuffer = new Buffer(\n        this._engine,\n        BufferBindFlag.VertexBuffer,\n        vertices,\n        noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic\n      );\n\n      this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));\n    } else if (this._vertexChangeFlag & ValueChanged.All) {\n      const vertices = this._verticesFloat32;\n      this._updateVertices(vertices);\n      vertexBuffer.setData(vertices);\n    }\n\n    const indexBuffer = this._indexBufferBinding?._buffer;\n    if (_indices) {\n      if (!indexBuffer || _indices.byteLength != indexBuffer.byteLength) {\n        indexBuffer?.destroy();\n        const newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, _indices);\n        this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));\n      } else if (this._indicesChangeFlag) {\n        this._indicesChangeFlag = false;\n        indexBuffer.setData(_indices);\n        if (this._indexBufferBinding._format !== this._indicesFormat) {\n          this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));\n        }\n      }\n    } else if (indexBuffer) {\n      indexBuffer.destroy();\n      this._setIndexBufferBinding(null);\n    }\n\n    if (noLongerAccessible) {\n      this._accessible = false;\n      this._releaseCache();\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    super._onDestroy();\n    this._accessible && this._releaseCache();\n  }\n\n  private _updateVertexElements(): VertexElement[] {\n    const vertexElements = this._vertexElementsCache;\n    vertexElements.length = 1;\n    vertexElements[0] = POSITION_VERTEX_ELEMENT;\n\n    let offset = 12;\n    let elementCount = 3;\n    if (this._normals) {\n      vertexElements.push(new VertexElement(\"NORMAL\", offset, VertexElementFormat.Vector3, 0));\n      offset += 12;\n      elementCount += 3;\n    }\n    if (this._colors) {\n      vertexElements.push(new VertexElement(\"COLOR_0\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._boneWeights) {\n      vertexElements.push(new VertexElement(\"WEIGHTS_0\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._boneIndices) {\n      vertexElements.push(new VertexElement(\"JOINTS_0\", offset, VertexElementFormat.UByte4, 0));\n      offset += 4;\n      elementCount += 1;\n    }\n    if (this._tangents) {\n      vertexElements.push(new VertexElement(\"TANGENT\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._uv) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_0\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv1) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_1\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv2) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_2\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv3) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_3\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv4) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_4\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv5) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_5\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv6) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_6\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv7) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_7\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n\n    const blendShapeCount = Math.min(this._blendShapes.length, 4);\n    for (let i = 0, n = blendShapeCount; i < n; i++) {\n      vertexElements.push(new VertexElement(`POSITION_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n      offset += 12;\n      elementCount += 3;\n      if (this._useBlendShapeNormal) {\n        vertexElements.push(new VertexElement(`NORMAL_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n      if (this._useBlendShapeTangent) {\n        vertexElements.push(new VertexElement(`TANGENT_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n    }\n\n    this._elementCount = elementCount;\n    return vertexElements;\n  }\n\n  private _updateVertices(vertices: Float32Array): void {\n    // prettier-ignore\n    const { _elementCount,_vertexCount, _positions, _normals, _colors, _vertexChangeFlag, _boneWeights, _boneIndices, _tangents, _uv, _uv1, _uv2, _uv3, _uv4, _uv5, _uv6, _uv7 } = this;\n\n    if (_vertexChangeFlag & ValueChanged.Position) {\n      for (let i = 0; i < _vertexCount; i++) {\n        const start = _elementCount * i;\n        const position = _positions[i];\n        vertices[start] = position.x;\n        vertices[start + 1] = position.y;\n        vertices[start + 2] = position.z;\n      }\n    }\n\n    let offset = 3;\n\n    if (_normals) {\n      if (_vertexChangeFlag & ValueChanged.Normal) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const normal = _normals[i];\n          if (normal) {\n            vertices[start] = normal.x;\n            vertices[start + 1] = normal.y;\n            vertices[start + 2] = normal.z;\n          }\n        }\n      }\n      offset += 3;\n    }\n\n    if (_colors) {\n      if (_vertexChangeFlag & ValueChanged.Color) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const color = _colors[i];\n          if (color) {\n            vertices[start] = color.r;\n            vertices[start + 1] = color.g;\n            vertices[start + 2] = color.b;\n            vertices[start + 3] = color.a;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneWeights) {\n      if (_vertexChangeFlag & ValueChanged.BoneWeight) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const weight = _boneWeights[i];\n          if (weight) {\n            vertices[start] = weight.x;\n            vertices[start + 1] = weight.y;\n            vertices[start + 2] = weight.z;\n            vertices[start + 3] = weight.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneIndices) {\n      if (_vertexChangeFlag & ValueChanged.BoneIndex) {\n        const { _verticesUint8 } = this;\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const joint = _boneIndices[i];\n          if (joint) {\n            const internalStart = start * 4;\n            _verticesUint8[internalStart] = joint.x;\n            _verticesUint8[internalStart + 1] = joint.y;\n            _verticesUint8[internalStart + 2] = joint.z;\n            _verticesUint8[internalStart + 3] = joint.w;\n          }\n        }\n      }\n      offset += 1;\n    }\n\n    if (_tangents) {\n      if (_vertexChangeFlag & ValueChanged.Tangent) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const tangent = _tangents[i];\n          if (tangent) {\n            vertices[start] = tangent.x;\n            vertices[start + 1] = tangent.y;\n            vertices[start + 2] = tangent.z;\n          }\n        }\n      }\n      offset += 4;\n    }\n    if (_uv) {\n      if (_vertexChangeFlag & ValueChanged.UV) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv1) {\n      if (_vertexChangeFlag & ValueChanged.UV1) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv1[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv2) {\n      if (_vertexChangeFlag & ValueChanged.UV2) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv2[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv3) {\n      if (_vertexChangeFlag & ValueChanged.UV3) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv3[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv4) {\n      if (_vertexChangeFlag & ValueChanged.UV4) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv4[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv5) {\n      if (_vertexChangeFlag & ValueChanged.UV5) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv5[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv6) {\n      if (_vertexChangeFlag & ValueChanged.UV6) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv6[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv7) {\n      if (_vertexChangeFlag & ValueChanged.UV7) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv7[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n\n    // BlendShape.\n    if (_vertexChangeFlag & ValueChanged.BlendShape) {\n      const blendShapes = this._blendShapes;\n      const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n      const blendShapeCount = Math.min(blendShapes.length, 4);\n\n      const rhi = this.engine._hardwareRenderer;\n      if (/*rhi.canUseFloatTextureBlendShape*/ false) {\n        let stride = 1;\n        this._useBlendShapeNormal && stride++;\n        this._useBlendShapeTangent && stride++;\n\n        const maxTextureSize = rhi.renderStates.getParameter(rhi.gl.MAX_TEXTURE_SIZE);\n        const pixelCount = this._vertexCount * stride;\n        const height = Math.ceil(pixelCount / maxTextureSize);\n        const width = height > 1 ? maxTextureSize : pixelCount;\n\n        this._blendShapeTexture = new Texture2D(this.engine, 0, 0, TextureFormat.R32G32B32A32, false);\n        this._blendShapeTexture.filterMode = TextureFilterMode.Point;\n      } else {\n        for (let i = 0; i < blendShapeCount; i++) {\n          const blendShapeUpdateFlag = blendShapeUpdateFlags[i];\n          if (blendShapeUpdateFlag.flag) {\n            const blendShape = blendShapes[i];\n            const { frames } = blendShape;\n            const frameCount = frames.length;\n            const endFrame = frames[frameCount - 1];\n            if (frameCount > 0 && endFrame.deltaPositions.length !== this._vertexCount) {\n              throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n            }\n\n            const { deltaPositions } = endFrame;\n            for (let j = 0; j < _vertexCount; j++) {\n              const start = _elementCount * j + offset;\n              const deltaPosition = deltaPositions[j];\n              if (deltaPosition) {\n                vertices[start] = deltaPosition.x;\n                vertices[start + 1] = deltaPosition.y;\n                vertices[start + 2] = deltaPosition.z;\n              }\n            }\n            offset += 3;\n\n            if (this._useBlendShapeNormal) {\n              const { deltaNormals } = endFrame;\n              if (deltaNormals) {\n                for (let j = 0; j < _vertexCount; j++) {\n                  const start = _elementCount * j + offset;\n                  const deltaNormal = deltaNormals[j];\n                  if (deltaNormal) {\n                    vertices[start] = deltaNormal.x;\n                    vertices[start + 1] = deltaNormal.y;\n                    vertices[start + 2] = deltaNormal.z;\n                  }\n                }\n              }\n              offset += 3;\n            }\n\n            if (this._useBlendShapeTangent) {\n              const { deltaTangents } = endFrame;\n              if (deltaTangents) {\n                for (let j = 0; j < _vertexCount; j++) {\n                  const start = _elementCount * j + offset;\n                  const deltaTangent = deltaTangents[j];\n                  if (deltaTangent) {\n                    vertices[start] = deltaTangent.x;\n                    vertices[start + 1] = deltaTangent.y;\n                    vertices[start + 2] = deltaTangent.z;\n                  }\n                }\n              }\n              offset += 3;\n            }\n            blendShapeUpdateFlag.flag = false;\n          }\n        }\n      }\n    }\n\n    this._vertexChangeFlag = 0;\n  }\n\n  private _releaseCache(): void {\n    const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n    for (let i = 0, n = blendShapeUpdateFlags.length; i < n; i++) {\n      blendShapeUpdateFlags[i].destroy();\n    }\n\n    this._verticesUint8 = null;\n    this._indices = null;\n    this._verticesFloat32 = null;\n    this._positions.length = 0;\n    this._tangents = null;\n    this._normals = null;\n    this._colors = null;\n    this._uv = null;\n    this._uv1 = null;\n    this._uv2 = null;\n    this._uv3 = null;\n    this._uv4 = null;\n    this._uv5 = null;\n    this._uv6 = null;\n    this._uv7 = null;\n    this._blendShapes = null;\n    this._blendShapeUpdateFlags = null;\n  }\n}\n\nconst POSITION_VERTEX_ELEMENT = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n\nenum ValueChanged {\n  Position = 0x1,\n  Normal = 0x2,\n  Color = 0x4,\n  Tangent = 0x8,\n  BoneWeight = 0x10,\n  BoneIndex = 0x20,\n  UV = 0x40,\n  UV1 = 0x80,\n  UV2 = 0x100,\n  UV3 = 0x200,\n  UV4 = 0x400,\n  UV5 = 0x800,\n  UV6 = 0x1000,\n  UV7 = 0x2000,\n  BlendShape = 0x4000,\n  All = 0xffff\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base/EngineObject\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Mesh skin data, equal glTF skins define\n */\nexport class Skin extends EngineObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * Constructor of skin\n   * @param name - name\n   */\n  constructor(public name: string) {\n    super(null);\n    this.inverseBindMatrices = []; // inverse bind matrix array\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n","import { BoundingBox } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\nimport { Entity } from \"../Entity\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Renderer } from \"../Renderer\";\nimport { Shader } from \"../shader/Shader\";\nimport { UpdateFlag } from \"../UpdateFlag\";\n\n/**\n * MeshRenderer Component.\n */\nexport class MeshRenderer extends Renderer implements ICustomClone {\n  private static _uvMacro = Shader.getMacroByName(\"O3_HAS_UV\");\n  private static _normalMacro = Shader.getMacroByName(\"O3_HAS_NORMAL\");\n  private static _tangentMacro = Shader.getMacroByName(\"O3_HAS_TANGENT\");\n  private static _vertexColorMacro = Shader.getMacroByName(\"O3_HAS_VERTEXCOLOR\");\n\n  @ignoreClone\n  private _mesh: Mesh;\n  @ignoreClone\n  private _meshUpdateFlag: UpdateFlag;\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Mesh assigned to the renderer.\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  set mesh(mesh: Mesh) {\n    const lastMesh = this._mesh;\n    if (lastMesh !== mesh) {\n      if (lastMesh) {\n        lastMesh._addRefCount(-1);\n        this._meshUpdateFlag.destroy();\n      }\n      if (mesh) {\n        mesh._addRefCount(1);\n        this._meshUpdateFlag = mesh.registerUpdateFlag();\n      }\n      this._mesh = mesh;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      if (this._meshUpdateFlag.flag) {\n        const shaderData = this.shaderData;\n        const vertexElements = mesh._vertexElements;\n\n        shaderData.disableMacro(MeshRenderer._uvMacro);\n        shaderData.disableMacro(MeshRenderer._normalMacro);\n        shaderData.disableMacro(MeshRenderer._tangentMacro);\n        shaderData.disableMacro(MeshRenderer._vertexColorMacro);\n\n        for (let i = 0, n = vertexElements.length; i < n; i++) {\n          const { semantic } = vertexElements[i];\n          switch (semantic) {\n            case \"TEXCOORD_0\":\n              shaderData.enableMacro(MeshRenderer._uvMacro);\n              break;\n            case \"NORMAL\":\n              shaderData.enableMacro(MeshRenderer._normalMacro);\n              break;\n            case \"TANGENT\":\n              shaderData.enableMacro(MeshRenderer._tangentMacro);\n              break;\n            case \"COLOR_0\":\n              shaderData.enableMacro(MeshRenderer._vertexColorMacro);\n              break;\n          }\n        }\n        this._meshUpdateFlag.flag = false;\n      }\n\n      const subMeshes = mesh.subMeshes;\n      const renderPipeline = camera._renderPipeline;\n      const renderElementPool = this._engine._renderElementPool;\n      for (let i = 0, n = subMeshes.length; i < n; i++) {\n        const material = this._materials[i];\n        if (material) {\n          const element = renderElementPool.getFromPool();\n          element.setValue(this, mesh, subMeshes[i], material);\n          renderPipeline.pushPrimitive(element);\n        }\n      }\n    } else {\n      Logger.error(\"mesh is null.\");\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDestroy() {\n    super._onDestroy();\n    const mesh = this._mesh;\n    if (mesh && !mesh.destroyed) {\n      mesh._addRefCount(-1);\n      this._mesh = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: MeshRenderer): void {\n    target.mesh = this._mesh;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      const localBounds = mesh.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Shader } from \"../shader\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { Skin } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer.\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _blendShapeMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE\");\n  private static _blendShapeNormalMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_NORMAL\");\n  private static _blendShapeTangentMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TANGENT\");\n\n  private static _jointCountProperty = Shader.getPropertyByName(\"u_jointCount\");\n  private static _jointSamplerProperty = Shader.getPropertyByName(\"u_jointSampler\");\n  private static _jointMatrixProperty = Shader.getPropertyByName(\"u_jointMatrix\");\n  private static _blendShapeWeightsProperty = Shader.getPropertyByName(\"u_blendShapeWeights\");\n\n  private static _maxJoints: number = 0;\n\n  @ignoreClone\n  public matrixPalette: Float32Array;\n  @ignoreClone\n  public jointNodes: Entity[];\n  @ignoreClone\n  public jointTexture: Texture2D;\n\n  @ignoreClone\n  private _hasInitJoints: boolean = false;\n  @ignoreClone\n  private _mat: Matrix;\n  @ignoreClone\n  /** Whether to use joint texture. Automatically used when the device can't support the maximum number of bones. */\n  private _useJointTexture: boolean = false;\n  private _skin: Skin;\n  private _blendShapeWeights: Float32Array;\n\n  /**\n   * The weights of the BlendShapes.\n   * @remarks Array index is BlendShape index.\n   */\n  get blendShapeWeights(): Float32Array {\n    return this._blendShapeWeights;\n  }\n\n  set blendShapeWeights(value: Float32Array) {\n    this._blendShapeWeights = value;\n  }\n\n  /**\n   * Constructor of SkinnedMeshRenderer\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._mat = new Matrix();\n    this._skin = null;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext) {\n    super._updateShaderData(context);\n\n    const shaderData = this.shaderData;\n    if (!this._useJointTexture && this.matrixPalette) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, this.matrixPalette);\n    }\n\n    const mesh = <ModelMesh>this.mesh;\n    if (mesh._hasBlendShape) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._blendShapeWeightsProperty, this._blendShapeWeights);\n      shaderData.enableMacro(SkinnedMeshRenderer._blendShapeMacro);\n\n      if (mesh._useBlendShapeNormal) {\n        shaderData.enableMacro(SkinnedMeshRenderer._blendShapeNormalMacro);\n      } else {\n        shaderData.disableMacro(SkinnedMeshRenderer._blendShapeNormalMacro);\n      }\n      if (mesh._useBlendShapeTangent) {\n        shaderData.enableMacro(SkinnedMeshRenderer._blendShapeTangentMacro);\n      } else {\n        shaderData.disableMacro(SkinnedMeshRenderer._blendShapeTangentMacro);\n      }\n    } else {\n      shaderData.disableMacro(SkinnedMeshRenderer._blendShapeMacro);\n    }\n  }\n\n  /**\n   * Skin Object.\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  set skin(skin) {\n    this._skin = skin;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** Whether to use a skeleton texture */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n    const shaderData = this.shaderData;\n    const jointCount = this.jointNodes?.length;\n    if (jointCount) {\n      shaderData.enableMacro(\"O3_HAS_SKIN\");\n      shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, jointCount);\n      if (joints.length > maxJoints) {\n        if (rhi.canIUseMoreJoints) {\n          this._useJointTexture = true;\n        } else {\n          Logger.error(\n            `component's joints count(${joints}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, and don't support jointTexture in this device. suggest joint count less than ${maxJoints}.`,\n            this\n          );\n        }\n      } else {\n        const maxJoints = Math.max(SkinnedMeshRenderer._maxJoints, joints.length);\n        SkinnedMeshRenderer._maxJoints = maxJoints;\n        shaderData.disableMacro(\"O3_USE_JOINT_TEXTURE\");\n        shaderData.enableMacro(\"O3_JOINTS_NUM\", maxJoints.toString());\n      }\n    } else {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  /**\n   * @internal\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          ibms[i].cloneTo(mat);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      }\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * Generate joint texture.\n   * Format: (4 * RGBA) * jointCont\n   */\n  createJointTexture() {\n    if (!this.jointTexture) {\n      const engine = this.engine;\n      const rhi = engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(engine, 4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n      this.shaderData.enableMacro(\"O3_USE_JOINT_TEXTURE\");\n      this.shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this.jointTexture);\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ModelMesh } from \"./ModelMesh\";\n\n/**\n * Used to generate common primitive meshes.\n */\nexport class PrimitiveMesh {\n  /**\n   * Create a sphere mesh.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param segments - Number of segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    segments: number = 18,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    segments = Math.max(2, Math.floor(segments));\n\n    const count = segments + 1;\n    const vertexCount = count * count;\n    const rectangleCount = segments * segments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const thetaRange = Math.PI;\n    const alphaRange = thetaRange * 2;\n    const countReciprocal = 1.0 / count;\n    const segmentsReciprocal = 1.0 / segments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % count;\n      const y = (i * countReciprocal) | 0;\n      const u = x * segmentsReciprocal;\n      const v = y * segmentsReciprocal;\n      const alphaDelta = u * alphaRange;\n      const thetaDelta = v * thetaRange;\n      const sinTheta = Math.sin(thetaDelta);\n\n      let posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      let posY = radius * Math.cos(thetaDelta);\n      let posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(posX, posY, posZ);\n      // Texcoord\n      uvs[i] = new Vector2(u, v);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % segments;\n      const y = (i * segmentsReciprocal) | 0;\n\n      const a = y * count + x;\n      const b = a + 1;\n      const c = a + count;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = a;\n      indices[offset++] = d;\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = d;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -radius, -radius);\n    bounds.max.setValue(radius, radius, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cuboid mesh.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cuboid model mesh\n   */\n  static createCuboid(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    depth: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    const positions: Vector3[] = new Array(24);\n    const normals: Vector3[] = new Array(24);\n    const uvs: Vector2[] = new Array(24);\n\n    // Up\n    positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    normals[0] = new Vector3(0, 1, 0);\n    normals[1] = new Vector3(0, 1, 0);\n    normals[2] = new Vector3(0, 1, 0);\n    normals[3] = new Vector3(0, 1, 0);\n    uvs[0] = new Vector2(0, 0);\n    uvs[1] = new Vector2(1, 0);\n    uvs[2] = new Vector2(1, 1);\n    uvs[3] = new Vector2(0, 1);\n    // Down\n    positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[4] = new Vector3(0, -1, 0);\n    normals[5] = new Vector3(0, -1, 0);\n    normals[6] = new Vector3(0, -1, 0);\n    normals[7] = new Vector3(0, -1, 0);\n    uvs[4] = new Vector2(0, 1);\n    uvs[5] = new Vector2(1, 1);\n    uvs[6] = new Vector2(1, 0);\n    uvs[7] = new Vector2(0, 0);\n    // Left\n    positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[8] = new Vector3(-1, 0, 0);\n    normals[9] = new Vector3(-1, 0, 0);\n    normals[10] = new Vector3(-1, 0, 0);\n    normals[11] = new Vector3(-1, 0, 0);\n    uvs[8] = new Vector2(0, 0);\n    uvs[9] = new Vector2(1, 0);\n    uvs[10] = new Vector2(1, 1);\n    uvs[11] = new Vector2(0, 1);\n    // Right\n    positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    normals[12] = new Vector3(1, 0, 0);\n    normals[13] = new Vector3(1, 0, 0);\n    normals[14] = new Vector3(1, 0, 0);\n    normals[15] = new Vector3(1, 0, 0);\n    uvs[12] = new Vector2(1, 0);\n    uvs[13] = new Vector2(0, 0);\n    uvs[14] = new Vector2(0, 1);\n    uvs[15] = new Vector2(1, 1);\n    // Front\n    positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[16] = new Vector3(0, 0, 1);\n    normals[17] = new Vector3(0, 0, 1);\n    normals[18] = new Vector3(0, 0, 1);\n    normals[19] = new Vector3(0, 0, 1);\n    uvs[16] = new Vector2(0, 0);\n    uvs[17] = new Vector2(1, 0);\n    uvs[18] = new Vector2(1, 1);\n    uvs[19] = new Vector2(0, 1);\n    // Back\n    positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[20] = new Vector3(0, 0, -1);\n    normals[21] = new Vector3(0, 0, -1);\n    normals[22] = new Vector3(0, 0, -1);\n    normals[23] = new Vector3(0, 0, -1);\n    uvs[20] = new Vector2(1, 0);\n    uvs[21] = new Vector2(0, 0);\n    uvs[22] = new Vector2(0, 1);\n    uvs[23] = new Vector2(1, 1);\n\n    const indices = new Uint16Array(36);\n\n    // prettier-ignore\n    // Up\n    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,\n    // Down\n    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,\n    // Left\n    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,\n    // Right\n    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,\n    // Front\n    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,\n    // Back\n    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-halfWidth, -halfHeight, -halfDepth);\n    bounds.max.setValue(halfWidth, halfHeight, halfDepth);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a plane mesh.\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane vertical segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Plane model mesh\n   */\n  static createPlane(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));\n    verticalSegments = Math.max(1, Math.floor(verticalSegments));\n\n    const horizontalCount = horizontalSegments + 1;\n    const verticalCount = verticalSegments + 1;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const gridWidth = width / horizontalSegments;\n    const gridHeight = height / verticalSegments;\n    const vertexCount = horizontalCount * verticalCount;\n    const rectangleCount = verticalSegments * horizontalSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const horizontalCountReciprocal = 1.0 / horizontalCount;\n    const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;\n    const verticalSegmentsReciprocal = 1.0 / verticalSegments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % horizontalCount;\n      const z = (i * horizontalCountReciprocal) | 0;\n\n      // Position\n      positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);\n      // Normal\n      normals[i] = new Vector3(0, 1, 0);\n      // Texcoord\n      uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % horizontalSegments;\n      const y = (i * horizontalSegmentsReciprocal) | 0;\n\n      const a = y * horizontalCount + x;\n      const b = a + 1;\n      const c = a + horizontalCount;\n      const d = c + 1;\n\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = b;\n      indices[offset++] = c;\n      indices[offset++] = d;\n      indices[offset++] = b;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-halfWidth, 0, -halfHeight);\n    bounds.max.setValue(halfWidth, 0, halfHeight);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cylinder mesh.\n   * @param engine - Engine\n   * @param radiusTop - The radius of top cap\n   * @param radiusBottom - The radius of bottom cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cylinder model mesh\n   */\n  static createCylinder(\n    engine: Engine,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const capTriangleCount = radialSegments * 2;\n    const totalVertexCount = torsoVertexCount + 2 + capTriangleCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + capTriangleCount * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const radiusDiff = radiusBottom - radiusTop;\n    const slope = radiusDiff / height;\n    const radiusSlope = radiusDiff / heightSegments;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const radius = radiusBottom - y * radiusSlope;\n\n      let posX = radius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = radius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Top position\n    positions[torsoVertexCount + 1] = new Vector3(0, halfHeight, 0);\n    // Top normal\n    normals[torsoVertexCount + 1] = new Vector3(0, 1, 0);\n    // Top texcoord\n    uvs[torsoVertexCount + 1] = new Vector2(0.5, 0.5);\n\n    // Add cap vertices\n    let offset = torsoVertexCount + 2;\n\n    const diameterTopReciprocal = 1.0 / (radiusTop * 2);\n    const diameterBottomReciprocal = 1.0 / (radiusBottom * 2);\n    const positionStride = radialCount * heightSegments;\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPosBottom = positions[i];\n      let curPosX = curPosBottom.x;\n      let curPosZ = curPosBottom.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n\n      const curPosTop = positions[i + positionStride];\n      curPosX = curPosTop.x;\n      curPosZ = curPosTop.z;\n\n      // Top position\n      positions[offset] = new Vector3(curPosX, halfHeight, curPosZ);\n      // Top normal\n      normals[offset] = new Vector3(0, 1, 0);\n      // Top texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterTopReciprocal + 0.5, curPosZ * diameterTopReciprocal + 0.5);\n    }\n\n    // Add cap indices\n    const topCapIndex = torsoVertexCount + 1;\n    const bottomIndiceIndex = torsoVertexCount + 2;\n    const topIndiceIndex = bottomIndiceIndex + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i * 2;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 2;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n\n      // Top\n      indices[indicesOffset++] = topCapIndex;\n      indices[indicesOffset++] = topIndiceIndex + firstStride;\n      indices[indicesOffset++] = topIndiceIndex + secondStride;\n    }\n\n    const { bounds } = mesh;\n    const radiusMax = Math.max(radiusTop, radiusBottom);\n    bounds.min.setValue(-radiusMax, -halfHeight, -radiusMax);\n    bounds.max.setValue(radiusMax, halfHeight, radiusMax);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a torus mesh.\n   * @param engine - Engine\n   * @param radius - Torus radius\n   * @param tubeRadius - Torus tube\n   * @param radialSegments - Torus radial segments\n   * @param tubularSegments - Torus tubular segments\n   * @param arc - Central angle\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Torus model mesh\n   */\n  static createTorus(\n    engine: Engine,\n    radius: number = 0.5,\n    tubeRadius: number = 0.1,\n    radialSegments: number = 30,\n    tubularSegments: number = 30,\n    arc: number = 360,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    arc = (arc / 180) * Math.PI;\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        positions[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.setValue(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.setValue(outerRadius, outerRadius, tubeRadius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cone mesh.\n   * @param engine - Engine\n   * @param radius - The radius of cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cone model mesh\n   */\n  static createCone(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const totalVertexCount = torsoVertexCount + 1 + radialSegments;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + radialSegments * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const slope = radius / height;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const curRadius = radius - y * radius;\n\n      let posX = curRadius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = curRadius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Add bottom cap vertices\n    let offset = torsoVertexCount + 1;\n    const diameterBottomReciprocal = 1.0 / (radius * 2);\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPos = positions[i];\n      let curPosX = curPos.x;\n      let curPosZ = curPos.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n    }\n\n    const bottomIndiceIndex = torsoVertexCount + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 1;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -halfHeight, -radius);\n    bounds.max.setValue(radius, halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a capsule mesh.\n   * @param engine - Engine\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param radialSegments - Hemispherical end radial segments\n   * @param heightSegments - Cylindrical part height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Capsule model mesh\n   */\n  static createCapsule(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 6,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    radialSegments = Math.max(2, Math.floor(radialSegments));\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n\n    const totalVertexCount = torsoVertexCount + 2 * capVertexCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      (torsoRectangleCount + 2 * capRectangleCount) * 6\n    );\n\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const halfPI = Math.PI / 2;\n    const doublePI = Math.PI * 2;\n\n    const positions = new Array<Vector3>(totalVertexCount);\n    const normals = new Array<Vector3>(totalVertexCount);\n    const uvs = new Array<Vector2>(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // create torso\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = -halfPI + u * doublePI;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      positions[i] = new Vector3(radius * sinTheta, y * unitHeight - halfHeight, radius * cosTheta);\n      normals[i] = new Vector3(sinTheta, 0, cosTheta);\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      doublePI,\n      torsoVertexCount,\n      1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset\n    );\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      -doublePI,\n      torsoVertexCount + capVertexCount,\n      -1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset + 6 * capRectangleCount\n    );\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -radius - halfHeight, -radius);\n    bounds.max.setValue(radius, radius + halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    noLongerAccessible: boolean\n  ) {\n    mesh.setPositions(positions);\n    mesh.setNormals(normals);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(noLongerAccessible);\n    mesh.addSubMesh(0, indices.length);\n  }\n\n  private static _generateIndices(engine: Engine, vertexCount: number, indexCount: number): Uint16Array | Uint32Array {\n    let indices: Uint16Array | Uint32Array = null;\n    if (vertexCount > 65535) {\n      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        indices = new Uint32Array(indexCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(indexCount);\n    }\n    return indices;\n  }\n\n  private static _createCapsuleCap(\n    radius: number,\n    height: number,\n    radialSegments: number,\n    capAlphaRange: number,\n    offset: number,\n    posIndex: number,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ) {\n    const radialCount = radialSegments + 1;\n    const halfHeight = height * 0.5;\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n\n    for (let i = 0; i < capVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * radialSegmentsReciprocal;\n      const alphaDelta = u * capAlphaRange;\n      const thetaDelta = (v * Math.PI) / 2;\n      const sinTheta = Math.sin(thetaDelta);\n\n      const posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      const posY = (radius * Math.cos(thetaDelta) + halfHeight) * posIndex;\n      const posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      const index = i + offset;\n      positions[index] = new Vector3(posX, posY, posZ);\n      normals[index] = new Vector3(posX, posY, posZ);\n      uvs[index] = new Vector2(u, v);\n    }\n\n    for (let i = 0; i < capRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x + offset;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = d;\n    }\n  }\n}\n","import { IndexBufferBinding, IndexFormat, Mesh, Buffer, VertexBufferBinding, VertexElement } from \"../graphic\";\n\n/**\n * BufferMesh.\n */\nexport class BufferMesh extends Mesh {\n  /**\n   * Instanced count, disable instanced drawing when set zero.\n   */\n  get instanceCount(): number {\n    return this._instanceCount;\n  }\n\n  set instanceCount(value: number) {\n    this._instanceCount = value;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._setVertexElements(elements);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   * @remarks When bufferBinding is null, it will clear IndexBufferBinding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding | null): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding | null, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    if (binding) {\n      const isBinding = binding.buffer !== undefined;\n      isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    }\n    this._setIndexBufferBinding(binding);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * BlendShapeFrame.\n */\nexport class BlendShapeFrame {\n  /** Weight of BlendShapeFrame. */\n  readonly weight: number;\n  /** Delta positions for the frame being added. */\n  readonly deltaPositions: Readonly<Readonly<Vector3>[]>;\n  /** Delta normals for the frame being added. */\n  readonly deltaNormals: Readonly<Readonly<Vector3[]> | null>;\n  /** Delta tangents for the frame being added. */\n  readonly deltaTangents: Readonly<Readonly<Vector3[]> | null>;\n\n  /**\n   * Create a BlendShapeFrame.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  constructor(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals: Vector3[] = null,\n    deltaTangents: Vector3[] = null\n  ) {\n    if (deltaNormals && deltaNormals.length !== deltaPositions.length) {\n      throw \"deltaNormals length must same with deltaPositions length.\";\n    }\n\n    if (deltaTangents && deltaTangents.length !== deltaPositions.length) {\n      throw \"deltaTangents length must same with deltaPositions length.\";\n    }\n\n    this.weight = weight;\n    this.deltaPositions = deltaPositions;\n    this.deltaNormals = deltaNormals;\n    this.deltaTangents = deltaTangents;\n  }\n}\n","import { BlendShapeFrame } from \"./BlendShapeFrame\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * BlendShape.\n */\nexport class BlendShape {\n  /** Name of BlendShape. */\n  name: string;\n\n  /** @internal */\n  _useBlendShapeNormal: boolean = false;\n  /** @internal */\n  _useBlendShapeTangent: boolean = false;\n\n  private _frames: BlendShapeFrame[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * Frames of BlendShape.\n   */\n  get frames(): Readonly<BlendShapeFrame[]> {\n    return this._frames;\n  }\n\n  /**\n   * Create a BlendShape.\n   * @param name - BlendShape name.\n   */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Add a BlendShapeFrame by weight, deltaPositions, deltaNormals and deltaTangents.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  addFrame(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): BlendShapeFrame;\n\n  /**\n   * Add a BlendShapeFrame.\n   * @param frame - The BlendShapeFrame.\n   */\n  addFrame(frame: BlendShapeFrame): void;\n\n  addFrame(\n    frameOrWeight: BlendShapeFrame | number,\n    deltaPositions?: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): void | BlendShapeFrame {\n    if (typeof frameOrWeight === \"number\") {\n      const frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);\n      this._addFrame(frame);\n      return frame;\n    } else {\n      this._addFrame(frameOrWeight);\n    }\n    this._updateFlagManager.distribute();\n  }\n\n  /**\n   * Clear all frames.\n   */\n  clearFrames(): void {\n    this._frames.length = 0;\n    this._updateFlagManager.distribute();\n    this._useBlendShapeNormal = false;\n    this._useBlendShapeTangent = false;\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  private _addFrame(frame: BlendShapeFrame): void {\n    const frames = this._frames;\n    const frameCount = frames.length;\n    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {\n      throw \"Frame's deltaPositions length must same with before frame deltaPositions length.\";\n    }\n\n    this._useBlendShapeNormal = this._useBlendShapeNormal || frame.deltaNormals !== null;\n    this._useBlendShapeTangent = this._useBlendShapeTangent || frame.deltaTangents !== null;\n    this._frames.push(frame);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Buffer, BufferBindFlag, BufferUsage, IndexFormat, MeshTopology, SubMesh, VertexElement } from \"../graphic\";\nimport { BufferMesh } from \"../mesh\";\nimport { SystemInfo } from \"../SystemInfo\";\nimport { ClassPool } from \"./ClassPool\";\nimport { SpriteElement } from \"./SpriteElement\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\ntype Element = SpriteElement | SpriteMaskElement;\n\nexport abstract class Basic2DBatcher {\n  /** The maximum number of vertex. */\n  static MAX_VERTEX_COUNT: number = 4096;\n  static _canUploadSameBuffer: boolean = true;\n\n  /** @internal */\n  _subMeshPool: ClassPool<SubMesh> = new ClassPool(SubMesh);\n  /** @internal */\n  _batchedQueue: Element[] = [];\n  /** @internal */\n  _meshes: BufferMesh[] = [];\n  /** @internal */\n  _meshCount: number = 1;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _indiceBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _indices: Uint16Array;\n  /** @internal */\n  _flushId: number = 0;\n  /** @internal */\n  _vertexCount: number = 0;\n  /** @internal */\n  _elementCount: number = 0;\n\n  constructor(engine: Engine) {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    this._vertices = new Float32Array(MAX_VERTEX_COUNT * 9);\n    this._indices = new Uint16Array(MAX_VERTEX_COUNT * 3);\n\n    const { _meshes, _meshCount } = this;\n    for (let i = 0; i < _meshCount; i++) {\n      _meshes[i] = this._createMesh(engine, i);\n    }\n  }\n\n  drawElement(element: Element): void {\n    const len = element.positions.length;\n    if (this._vertexCount + len > Basic2DBatcher.MAX_VERTEX_COUNT) {\n      this.flush(element.camera.engine);\n    }\n\n    this._vertexCount += len;\n    this._batchedQueue[this._elementCount++] = element;\n  }\n\n  flush(engine: Engine): void {\n    const batchedQueue = this._batchedQueue;\n\n    if (batchedQueue.length === 0) {\n      return;\n    }\n\n    this._updateData(engine);\n    this.drawBatches(engine);\n\n    if (!Basic2DBatcher._canUploadSameBuffer) {\n      this._flushId++;\n    }\n\n    batchedQueue.length = 0;\n    this._subMeshPool.resetPool();\n    this._vertexCount = 0;\n    this._elementCount = 0;\n  }\n\n  clear(): void {\n    this._flushId = 0;\n    this._vertexCount = 0;\n    this._elementCount = 0;\n    this._batchedQueue.length = 0;\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n\n  private _createMesh(engine: Engine, index: number): BufferMesh {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    const mesh = new BufferMesh(engine, `BufferMesh${index}`);\n\n    const vertexElements: VertexElement[] = [];\n    const vertexStride = this.createVertexElements(vertexElements);\n\n    // vertices\n    this._vertexBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      MAX_VERTEX_COUNT * 4 * vertexStride,\n      BufferUsage.Dynamic\n    );\n    // indices\n    this._indiceBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.IndexBuffer,\n      MAX_VERTEX_COUNT * 3,\n      BufferUsage.Dynamic\n    );\n    mesh.setVertexBufferBinding(this._vertexBuffers[index], vertexStride);\n    mesh.setIndexBufferBinding(this._indiceBuffers[index], IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n\n    return mesh;\n  }\n\n  private _updateData(engine: Engine): void {\n    const { _meshes, _flushId } = this;\n\n    if (!Basic2DBatcher._canUploadSameBuffer && this._meshCount <= _flushId) {\n      this._meshCount++;\n      _meshes[_flushId] = this._createMesh(engine, _flushId);\n    }\n\n    const { _batchedQueue: batchedQueue, _vertices: vertices, _indices: indices } = this;\n    const mesh = _meshes[_flushId];\n    mesh.clearSubMesh();\n\n    let vertexIndex = 0;\n    let indiceIndex = 0;\n    let vertexStartIndex = 0;\n    let vertexCount = 0;\n    let curIndiceStartIndex = 0;\n    let curMeshIndex = 0;\n    let preElement: Element = null;\n    for (let i = 0, len = batchedQueue.length; i < len; i++) {\n      const curElement = batchedQueue[i];\n\n      // Batch vertex\n      vertexIndex = this.updateVertices(curElement, vertices, vertexIndex);\n\n      // Batch indice\n      const { triangles } = curElement;\n      const triangleNum = triangles.length;\n      for (let j = 0; j < triangleNum; j++) {\n        indices[indiceIndex++] = triangles[j] + curIndiceStartIndex;\n      }\n\n      curIndiceStartIndex += curElement.positions.length;\n\n      if (preElement === null) {\n        vertexCount += triangleNum;\n      } else {\n        if (this.canBatch(preElement, curElement)) {\n          vertexCount += triangleNum;\n        } else {\n          mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n          vertexStartIndex += vertexCount;\n          vertexCount = triangleNum;\n          batchedQueue[curMeshIndex++] = preElement;\n        }\n      }\n\n      preElement = curElement;\n    }\n\n    mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n    batchedQueue[curMeshIndex] = preElement;\n\n    this._vertexBuffers[_flushId].setData(vertices, 0, 0, vertexIndex);\n    this._indiceBuffers[_flushId].setData(indices, 0, 0, indiceIndex);\n  }\n\n  private _getSubMeshFromPool(start: number, count: number): SubMesh {\n    const subMesh = this._subMeshPool.getFromPool();\n    subMesh.start = start;\n    subMesh.count = count;\n    subMesh.topology = MeshTopology.Triangles;\n    return subMesh;\n  }\n\n  /**\n   * @internal\n   */\n  abstract createVertexElements(vertexElements: VertexElement[]): number;\n\n  /**\n   * @internal\n   */\n  abstract canBatch(preElement: Element, curElement: Element): boolean;\n\n  /**\n   * @internal\n   */\n  abstract updateVertices(element: Element, vertices: Float32Array, vertexIndex: number): number;\n\n  /**\n   * @internal\n   */\n  abstract drawBatches(engine: Engine): void;\n}\n","import { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { StencilOperation } from \"../shader/enums/StencilOperation\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\nexport class SpriteMaskBatcher extends Basic2DBatcher {\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    return 20;\n  }\n\n  canBatch(preElement: SpriteMaskElement, curElement: SpriteMaskElement): boolean {\n    if (preElement.isAdd !== curElement.isAdd) {\n      return false;\n    }\n\n    // Compare renderer property\n    const preShaderData = (<SpriteMask>preElement.component).shaderData;\n    const curShaderData = (<SpriteMask>curElement.component).shaderData;\n    const textureProperty = SpriteMask._textureProperty;\n    const alphaCutoffProperty = SpriteMask._alphaCutoffProperty;\n\n    return (\n      preShaderData.getTexture(textureProperty) === curShaderData.getTexture(textureProperty) &&\n      preShaderData.getTexture(alphaCutoffProperty) === curShaderData.getTexture(alphaCutoffProperty)\n    );\n  }\n\n  updateVertices(element: SpriteMaskElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uv } = element;\n    const verticesNum = positions.length;\n    for (let i = 0; i < verticesNum; i++) {\n      const curPos = positions[i];\n      const curUV = uv[i];\n\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(engine: Engine): void {\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const batchedQueue = this._batchedQueue;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteMaskElement = <SpriteMaskElement>batchedQueue[i];\n\n      if (!subMesh || !spriteMaskElement) {\n        return;\n      }\n\n      const renderer = <SpriteMask>spriteMaskElement.component;\n      const material = spriteMaskElement.material;\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // Update stencil state\n      const stencilState = material.renderState.stencilState;\n      const op = spriteMaskElement.isAdd ? StencilOperation.IncrementSaturate : StencilOperation.DecrementSaturate;\n      stencilState.passOperationFront = op;\n      stencilState.passOperationBack = op;\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      const camera = spriteMaskElement.camera;\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, camera.scene.shaderData);\n      program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n    }\n  }\n}\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { SpriteMaskBatcher } from \"./SpriteMaskBatcher\";\n\n/**\n * @internal\n */\nexport class SpriteMaskManager {\n  _batcher: SpriteMaskBatcher;\n\n  private _preMaskLayer: number = 0;\n\n  constructor(engine: Engine) {\n    this._batcher = new SpriteMaskBatcher(engine);\n  }\n\n  clear(): void {\n    this._preMaskLayer = 0;\n    this._batcher.clear();\n  }\n\n  preRender(camera: Camera, renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._batcher.clear();\n    this._processMasksDiff(camera, renderer);\n    this._batcher.flush(camera.engine);\n  }\n\n  postRender(renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._preMaskLayer = renderer.maskLayer;\n  }\n\n  destroy(): void {\n    this._batcher.destroy();\n    this._batcher = null;\n  }\n\n  private _processMasksDiff(camera: Camera, renderer: SpriteRenderer): void {\n    const preMaskLayer = this._preMaskLayer;\n    const curMaskLayer = renderer.maskLayer;\n    if (preMaskLayer !== curMaskLayer) {\n      const allMasks = camera._renderPipeline._allSpriteMasks;\n      const commonLayer = preMaskLayer & curMaskLayer;\n      const addLayer = curMaskLayer & ~preMaskLayer;\n      const reduceLayer = preMaskLayer & ~curMaskLayer;\n\n      const allMaskElements = allMasks._elements;\n      for (let i = 0, n = allMasks.length; i < n; i++) {\n        const mask = allMaskElements[i];\n        const influenceLayers = mask.influenceLayers;\n\n        if (influenceLayers & commonLayer) {\n          continue;\n        }\n\n        if (influenceLayers & addLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = true;\n          this._batcher.drawElement(maskRenderElement);\n          continue;\n        }\n\n        if (influenceLayers & reduceLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = false;\n          this._batcher.drawElement(maskRenderElement);\n        }\n      }\n    }\n  }\n}\n","/**\n * The Background mode enumeration.\n */\nexport enum BackgroundMode {\n  /* Solid color. */\n  SolidColor,\n  /* Sky. */\n  Sky,\n  /** Texture */\n  Texture\n}\n","/**\n * Filling mode of background texture.\n */\nexport enum BackgroundTextureFillMode {\n  /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */\n  AspectFitWidth,\n  /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */\n  AspectFitHeight,\n  /* Scale the texture fully fills the canvas. */\n  Fill\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic\";\nimport { Material } from \"../material\";\n\n/**\n * Sky.\n */\nexport class Sky {\n  /** Material of the sky. */\n  material: Material;\n  /** Mesh of the sky. */\n  mesh: Mesh;\n  /** @internal */\n  _matrix: Matrix = new Matrix();\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { ModelMesh } from \".\";\nimport { Engine } from \"./Engine\";\nimport { BackgroundMode } from \"./enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nimport { Sky } from \"./sky/Sky\";\nimport { Texture2D } from \"./texture\";\n\n/**\n * Background of scene.\n */\nexport class Background {\n  /**\n   * Background mode.\n   * @defaultValue `BackgroundMode.SolidColor`\n   * @remarks If using `BackgroundMode.Sky` mode and material or mesh of the `sky` is not defined, it will downgrade to `BackgroundMode.SolidColor`.\n   */\n  mode: BackgroundMode = BackgroundMode.SolidColor;\n\n  /**\n   * Background solid color.\n   * @defaultValue `new Color(0.25, 0.25, 0.25, 1.0)`\n   * @remarks When `mode` is `BackgroundMode.SolidColor`, the property will take effects.\n   */\n  solidColor: Color = new Color(0.25, 0.25, 0.25, 1.0);\n\n  /**\n   * Background sky.\n   * @remarks When `mode` is `BackgroundMode.Sky`, the property will take effects.\n   */\n  readonly sky: Sky = new Sky();\n\n  /** @internal */\n  _textureFillMode: BackgroundTextureFillMode = BackgroundTextureFillMode.AspectFitHeight;\n\n  /** @internal */\n  _mesh: ModelMesh;\n\n  private _texture: Texture2D = null;\n\n  /**\n   * Background texture.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._engine._backgroundTextureMaterial.shaderData.setTexture(\"u_baseTexture\", value);\n    }\n  }\n\n  /**\n   * @internal\n   * Background texture fill mode.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   * @defaultValue `BackgroundTextureFillMode.FitHeight`\n   */\n  get textureFillMode(): BackgroundTextureFillMode {\n    return this._textureFillMode;\n  }\n\n  set textureFillMode(value: BackgroundTextureFillMode) {\n    if (value !== this._textureFillMode) {\n      this._textureFillMode = value;\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * Constructor of Background.\n   * @param _engine Engine Which the background belongs to.\n   */\n  constructor(private _engine: Engine) {\n    this._mesh = this._createPlane(_engine);\n  }\n\n  /**\n   * @internal\n   */\n  _resizeBackgroundTexture(): void {\n    if (!this._texture) {\n      return;\n    }\n    const { canvas } = this._engine;\n    const { width, height } = canvas;\n    const { _mesh:_backgroundTextureMesh } = this;\n    const positions = _backgroundTextureMesh.getPositions();\n\n    switch (this._textureFillMode) {\n      case BackgroundTextureFillMode.Fill:\n        positions[0].setValue(-1, -1, 1);\n        positions[1].setValue(1, -1, 1);\n        positions[2].setValue(-1, 1, 1);\n        positions[3].setValue(1, 1, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitWidth:\n        const fitWidthScale = (this._texture.height * width) / this.texture.width / height;\n        positions[0].setValue(-1, -fitWidthScale, 1);\n        positions[1].setValue(1, -fitWidthScale, 1);\n        positions[2].setValue(-1, fitWidthScale, 1);\n        positions[3].setValue(1, fitWidthScale, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitHeight:\n        const fitHeightScale = (this._texture.width * height) / this.texture.height / width;\n        positions[0].setValue(-fitHeightScale, -1, 1);\n        positions[1].setValue(fitHeightScale, -1, 1);\n        positions[2].setValue(-fitHeightScale, 1, 1);\n        positions[3].setValue(fitHeightScale, 1, 1);\n        break;\n    }\n    _backgroundTextureMesh.setPositions(positions);\n    _backgroundTextureMesh.uploadData(false);\n  }\n\n  private _createPlane(\n    engine: Engine,\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    mesh.isGCIgnored = true;\n    const indices = new Uint8Array([1, 2, 0, 1, 3, 2]);\n\n    const positions: Vector3[] = new Array(4);\n    const uvs: Vector2[] = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      positions[i] = new Vector3();\n      uvs[i] = new Vector2(i % 2, 1 - ((i * 0.5) | 0));\n    }\n\n    mesh.setPositions(positions);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length);\n    return mesh;\n  }\n}\n","/**\n * Diffuse mode.\n */\nexport enum DiffuseMode {\n  /** Solid color mode. */\n  SolidColor,\n\n  /**\n   * SH mode\n   * @remarks\n   * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n   */\n  SphericalHarmonics\n}\n","import { Color, SphericalHarmonics3 } from \"@oasis-engine/math\";\nimport { Scene } from \"../Scene\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCubeMap } from \"../texture\";\nimport { DiffuseMode } from \"./enums/DiffuseMode\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight {\n  private static _shMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SH\");\n  private static _specularMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SPECULAR_ENV\");\n  private static _decodeRGBMMacro: ShaderMacro = Shader.getMacroByName(\"O3_DECODE_ENV_RGBM\");\n\n  private static _diffuseColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuse\");\n  private static _diffuseSHProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_sh\");\n  private static _diffuseIntensityProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuseIntensity\");\n  private static _specularTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_specularSampler\");\n  private static _specularIntensityProperty: ShaderProperty = Shader.getPropertyByName(\n    \"u_envMapLight.specularIntensity\"\n  );\n  private static _mipLevelProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.mipMapLevel\");\n\n  private _diffuseSphericalHarmonics: SphericalHarmonics3;\n  private _diffuseSolidColor: Color = new Color(0.212, 0.227, 0.259);\n  private _diffuseIntensity: number = 1.0;\n  private _specularReflection: TextureCubeMap;\n  private _specularIntensity: number = 1.0;\n  private _diffuseMode: DiffuseMode = DiffuseMode.SolidColor;\n  private _shArray: Float32Array = new Float32Array(27);\n  private _scene: Scene;\n  private _specularTextureDecodeRGBM: boolean = false;\n\n  /**\n   * Whether to decode from specularTexture with RGBM format.\n   */\n  get specularTextureDecodeRGBM(): boolean {\n    return this._specularTextureDecodeRGBM;\n  }\n\n  set specularTextureDecodeRGBM(value: boolean) {\n    this._specularTextureDecodeRGBM = value;\n    if (!this._scene) return;\n\n    if (value) {\n      this._scene.shaderData.enableMacro(AmbientLight._decodeRGBMMacro);\n    } else {\n      this._scene.shaderData.disableMacro(AmbientLight._decodeRGBMMacro);\n    }\n  }\n\n  /**\n   * Diffuse mode of ambient light.\n   */\n  get diffuseMode(): DiffuseMode {\n    return this._diffuseMode;\n  }\n\n  set diffuseMode(value: DiffuseMode) {\n    this._diffuseMode = value;\n    if (!this._scene) return;\n\n    if (value === DiffuseMode.SphericalHarmonics) {\n      this._scene.shaderData.enableMacro(AmbientLight._shMacro);\n    } else {\n      this._scene.shaderData.disableMacro(AmbientLight._shMacro);\n    }\n  }\n\n  /**\n   * Diffuse reflection solid color.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.\n   */\n  get diffuseSolidColor(): Color {\n    return this._diffuseSolidColor;\n  }\n\n  set diffuseSolidColor(value: Color) {\n    if (value !== this._diffuseSolidColor) {\n      value.cloneTo(this._diffuseSolidColor);\n    }\n  }\n\n  /**\n   * Diffuse reflection spherical harmonics 3.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.\n   */\n  get diffuseSphericalHarmonics(): SphericalHarmonics3 {\n    return this._diffuseSphericalHarmonics;\n  }\n\n  set diffuseSphericalHarmonics(value: SphericalHarmonics3) {\n    this._diffuseSphericalHarmonics = value;\n    if (!this._scene) return;\n\n    if (value) {\n      this._scene.shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._preComputeSH(value, this._shArray));\n    }\n  }\n\n  /**\n   * Diffuse reflection intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n    if (!this._scene) return;\n\n    this._scene.shaderData.setFloat(AmbientLight._diffuseIntensityProperty, value);\n  }\n\n  /**\n   * Specular reflection texture.\n   * @remarks This texture must be baked from @oasis-engine/baker\n   */\n  get specularTexture(): TextureCubeMap {\n    return this._specularReflection;\n  }\n\n  set specularTexture(value: TextureCubeMap) {\n    this._specularReflection = value;\n    if (!this._scene) return;\n\n    const shaderData = this._scene.shaderData;\n\n    if (value) {\n      shaderData.setTexture(AmbientLight._specularTextureProperty, value);\n      shaderData.setFloat(AmbientLight._mipLevelProperty, this._specularReflection.mipmapCount - 1);\n      shaderData.enableMacro(AmbientLight._specularMacro);\n    } else {\n      shaderData.disableMacro(AmbientLight._specularMacro);\n    }\n  }\n\n  /**\n   * Specular reflection intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n    if (!this._scene) return;\n\n    this._scene.shaderData.setFloat(AmbientLight._specularIntensityProperty, value);\n  }\n\n  /**\n   * @internal\n   */\n  _setScene(value: Scene) {\n    this._scene = value;\n    if (!value) return;\n\n    const { shaderData } = value;\n    shaderData.setColor(AmbientLight._diffuseColorProperty, this._diffuseSolidColor);\n\n    this.diffuseMode = this._diffuseMode;\n    this.diffuseSphericalHarmonics = this._diffuseSphericalHarmonics;\n    this.diffuseIntensity = this._diffuseIntensity;\n    this.specularTexture = this._specularReflection;\n    this.specularIntensity = this._specularIntensity;\n    this.specularTextureDecodeRGBM = this._specularTextureDecodeRGBM;\n  }\n\n  private _preComputeSH(sh: SphericalHarmonics3, out: Float32Array): Float32Array {\n    /**\n     * Basis constants\n     *\n     * 0: 1/2 * Math.sqrt(1 / Math.PI)\n     *\n     * 1: -1/2 * Math.sqrt(3 / Math.PI)\n     * 2: 1/2 * Math.sqrt(3 / Math.PI)\n     * 3: -1/2 * Math.sqrt(3 / Math.PI)\n     *\n     * 4: 1/2 * Math.sqrt(15 / Math.PI)\n     * 5: -1/2 * Math.sqrt(15 / Math.PI)\n     * 6: 1/4 * Math.sqrt(5 / Math.PI)\n     * 7: -1/2 * Math.sqrt(15 / Math.PI)\n     * 8: 1/4 * Math.sqrt(15 / Math.PI)\n     */\n\n    /**\n     * Convolution kernel\n     *\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const src = sh.coefficients;\n\n    // l0\n    out[0] = src[0] * 0.886227; // kernel0 * basis0 = 0.886227\n    out[1] = src[1] * 0.886227;\n    out[2] = src[2] * 0.886227;\n\n    // l1\n    out[3] = src[3] * -1.023327; // kernel1 * basis1 = -1.023327;\n    out[4] = src[4] * -1.023327;\n    out[5] = src[5] * -1.023327;\n    out[6] = src[6] * 1.023327; // kernel1 * basis2 = 1.023327\n    out[7] = src[7] * 1.023327;\n    out[8] = src[8] * 1.023327;\n    out[9] = src[9] * -1.023327; // kernel1 * basis3 = -1.023327\n    out[10] = src[10] * -1.023327;\n    out[11] = src[11] * -1.023327;\n\n    // l2\n    out[12] = src[12] * 0.858086; // kernel2 * basis4 = 0.858086\n    out[13] = src[13] * 0.858086;\n    out[14] = src[14] * 0.858086;\n    out[15] = src[15] * -0.858086; // kernel2 * basis5 = -0.858086\n    out[16] = src[16] * -0.858086;\n    out[17] = src[17] * -0.858086;\n    out[18] = src[18] * 0.247708; // kernel2 * basis6 = 0.247708\n    out[19] = src[19] * 0.247708;\n    out[20] = src[20] * 0.247708;\n    out[21] = src[21] * -0.858086; // kernel2 * basis7 = -0.858086\n    out[22] = src[22] * -0.858086;\n    out[23] = src[23] * -0.858086;\n    out[24] = src[24] * 0.429042; // kernel2 * basis8 = 0.429042\n    out[25] = src[25] * 0.429042;\n    out[26] = src[26] * 0.429042;\n\n    return out;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene feature plug-in.\n * @deprecated\n */\nexport abstract class SceneFeature {\n  /**\n   * Callback before every scene update.\n   * @param scene - Scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * Callback after every scene update.\n   * @param scene - Scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * Callback before scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after the scene is destroyed.\n   * @param scene - Scene\n   */\n  public destroy(scene: Scene): void {}\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { LightFeature } from \"./LightFeature\";\n\n/**\n * Light base class.\n */\nexport class Light extends Component {\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  protected static _maxLight: number = 10;\n\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   */\n  get inverseViewMatrix() {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightColor\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightDirection\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = DirectLight._combinedData;\n\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  intensity: number = 1;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this.lightColor;\n    const direction = this.direction;\n\n    const data = DirectLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightPosition\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDistance\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = PointLight._combinedData;\n\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n  }\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n\n    const lightColor = this.lightColor;\n    const lightPosition = this.position;\n\n    const data = PointLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPosition\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDirection\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDistance\");\n  private static _angleCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightAngleCos\");\n  private static _penumbraCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbraCos\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight),\n    angleCos: new Float32Array(Light._maxLight),\n    penumbraCos: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = SpotLight._combinedData;\n\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._angleCosProperty, data.angleCos);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n  }\n\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n  /** Angle, in radians, from centre of spotlight where falloff begins. */\n  angle: number = Math.PI / 6;\n  /** Angle, in radians, from falloff begins to ends. */\n  penumbra: number = Math.PI / 12;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _inverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const angleCosStart = lightIndex;\n\n    const color = this.lightColor;\n    const position = this.position;\n    const direction = this.direction;\n\n    const data = SpotLight._combinedData;\n\n    data.color[colorStart] = color.r;\n    data.color[colorStart + 1] = color.g;\n    data.color[colorStart + 2] = color.b;\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.angleCos[angleCosStart] = Math.cos(this.angle);\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { DirectLight } from \"./DirectLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * Determine whether there are lights in the scene.\n * @returns Has light\n */\nexport function hasLight(): boolean {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Light plug-in.\n */\nexport class LightFeature extends SceneFeature {\n  visibleLights: Light[];\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * Register a light object to the current scene.\n   * @param light\n   */\n  attachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * Remove a light object from the current scene.\n   * @param light\n   */\n  detachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData) {\n    /**\n     * ambientLight and envMapLight only use the last one in the scene\n     * */\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof DirectLight) {\n        light._appendData(directLightCount++);\n      } else if (light instanceof PointLight) {\n        light._appendData(pointLightCount++);\n      } else if (light instanceof SpotLight) {\n        light._appendData(spotLightCount++);\n      }\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SPOT_LIGHT_COUNT\");\n    }\n  }\n}\n","import { Background } from \"./Background\";\nimport { EngineObject, Logger } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { AmbientLight } from \"./lighting/AmbientLight\";\nimport { LightFeature } from \"./lighting/LightFeature\";\nimport { SceneFeature } from \"./SceneFeature\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** Scene name. */\n  name: string;\n\n  /** The background of the scene. */\n  readonly background: Background = new Background(this._engine);\n\n  /** Scene-related shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n\n  /** @internal */\n  _activeCameras: Camera[] = [];\n  /** @internal */\n  _isActiveInEngine: boolean = false;\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private _destroyed: boolean = false;\n  private _rootEntities: Entity[] = [];\n  private _ambientLight: AmbientLight;\n\n  /**\n   * Ambient light.\n   */\n  get ambientLight(): AmbientLight {\n    return this._ambientLight;\n  }\n\n  set ambientLight(value: AmbientLight) {\n    if (!value) {\n      Logger.warn(\"The scene must have one ambient light\");\n      return;\n    }\n\n    const lastAmbientLight = this._ambientLight;\n    if (lastAmbientLight !== value) {\n      lastAmbientLight && lastAmbientLight._setScene(null);\n      value._setScene(this);\n      this._ambientLight = value;\n    }\n  }\n\n  /**\n   * Count of root entities.\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Whether it's destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    Scene.sceneFeatureManager.addObject(this);\n    shaderData._addRefCount(1);\n    this.ambientLight = new AmbientLight();\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void {\n    const isRoot = entity._isRoot;\n\n    // let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    // add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeEntity(entity);\n      }\n      this._rootEntities.push(entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._rootEntities.push(entity);\n    }\n\n    // process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeEntity(entity);\n      this._isActiveInEngine && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const children = this._rootEntities;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const entity = child.findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use ‘/’ symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * Destroy this scene.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this.shaderData._addRefCount(-1);\n    this._destroyed = true;\n  }\n\n  /**\n   * @internal\n   */\n  _attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(): void {\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.engine._macroCollection,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    const lightMgr = this.findFeature(LightFeature);\n\n    lightMgr._updateShaderData(this.shaderData);\n  }\n\n  private _removeEntity(entity: Entity): void {\n    const oldRootEntities = this._rootEntities;\n    oldRootEntities.splice(oldRootEntities.indexOf(entity), 1);\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n}\n","import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  _activeScene: Scene;\n\n  /**\n   * Get the activated scene.\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene information\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n}\n","import blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrSpecularFs from \"../shaderlib/extra/pbr-specular.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport shadowFs from \"../shaderlib/extra/shadow.fs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport spriteMaskFs from \"../shaderlib/extra/sprite-mask.fs.glsl\";\nimport spriteMaskVs from \"../shaderlib/extra/sprite-mask.vs.glsl\";\nimport spriteFs from \"../shaderlib/extra/sprite.fs.glsl\";\nimport spriteVs from \"../shaderlib/extra/sprite.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport backgroundTextureVs from \"../shaderlib/extra/background-texture.vs.glsl\";\nimport backgroundTextureFs from \"../shaderlib/extra/background-texture.fs.glsl\";\nimport { Shader } from \"./Shader\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    Shader.create(\"blinn-phong\", blinnPhongVs, blinnPhongFs);\n    Shader.create(\"pbr\", pbrVs, pbrFs);\n    Shader.create(\"pbr-specular\", pbrVs, pbrSpecularFs);\n    Shader.create(\"unlit\", unlitVs, unlitFs);\n    Shader.create(\"shadow-map\", shadowMapVs, shadowMapFs);\n    Shader.create(\"shadow\", shadowMapVs, shadowFs);\n    Shader.create(\"skybox\", skyboxVs, skyboxFs);\n    Shader.create(\"particle-shader\", particleVs, particleFs);\n    Shader.create(\"SpriteMask\", spriteMaskVs, spriteMaskFs);\n    Shader.create(\"Sprite\", spriteVs, spriteFs);\n    Shader.create(\"background-texture\", backgroundTextureVs, backgroundTextureFs);\n  }\n}\n","import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchy: number = 1;\n  private _cacheMap: object = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    if (maskLength > this._cacheHierarchy) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchy - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders: object = cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  private _resizeCacheMapHierarchy(cacheMap: object, hierarchy: number, resizeLength: number): void {\n    // only expand but not shrink.\n    const end = this._cacheHierarchy - 1;\n    if (hierarchy == end) {\n      for (let k in cacheMap) {\n        const shader: ShaderProgram = cacheMap[k];\n        for (let i = 0, n = resizeLength - end; i < n; i++) {\n          if (i == n - 1) {\n            cacheMap[0] = shader;\n          } else {\n            cacheMap = cacheMap[i == 0 ? k : 0] = Object.create(null);\n          }\n        }\n      }\n      this._cacheHierarchy = resizeLength;\n    } else {\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(cacheMap[k], ++hierarchy, resizeLength);\n      }\n    }\n  }\n}\n","import { IPhysics } from \"@oasis-engine/design\";\nimport { ColorSpace } from \".\";\nimport { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { EngineSettings } from \"./EngineSettings\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { InputManager } from \"./input/InputManager\";\nimport { RenderQueueType } from \"./material/enums/RenderQueueType\";\nimport { Material } from \"./material/Material\";\nimport { ModelMesh, PrimitiveMesh } from \"./mesh\";\nimport { PhysicsManager } from \"./physics\";\nimport { IHardwareRenderer } from \"./renderingHardwareInterface/IHardwareRenderer\";\nimport { ClassPool } from \"./RenderPipeline/ClassPool\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { RenderElement } from \"./RenderPipeline/RenderElement\";\nimport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nimport { SpriteMaskElement } from \"./RenderPipeline/SpriteMaskElement\";\nimport { SpriteMaskManager } from \"./RenderPipeline/SpriteMaskManager\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { CompareFunction } from \"./shader\";\nimport { BlendFactor } from \"./shader/enums/BlendFactor\";\nimport { BlendOperation } from \"./shader/enums/BlendOperation\";\nimport { ColorWriteMask } from \"./shader/enums/ColorWriteMask\";\nimport { CullMode } from \"./shader/enums/CullMode\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderMacro } from \"./shader/ShaderMacro\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\nimport { Texture2D, TextureCubeFace, TextureCubeMap, TextureFormat } from \"./texture\";\n\n/** TODO: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  /** @internal */\n  static _gammaMacro: ShaderMacro = Shader.getMacroByName(\"OASIS_COLORSPACE_GAMMA\");\n\n  /** Physics manager of Engine. */\n  readonly physicsManager: PhysicsManager;\n  readonly inputManager: InputManager;\n\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: IHardwareRenderer;\n  _lastRenderState: RenderState = new RenderState();\n  _renderElementPool: ClassPool<RenderElement> = new ClassPool(RenderElement);\n  _spriteElementPool: ClassPool<SpriteElement> = new ClassPool(SpriteElement);\n  _spriteMaskElementPool: ClassPool<SpriteMaskElement> = new ClassPool(SpriteMaskElement);\n  _spriteDefaultMaterial: Material;\n  _spriteMaskDefaultMaterial: Material;\n  _renderContext: RenderContext = new RenderContext();\n\n  /* @internal */\n  _whiteTexture2D: Texture2D;\n  /* @internal */\n  _whiteTextureCube: TextureCubeMap;\n  /* @internal */\n  _backgroundTextureMaterial: Material;\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n  /** @internal */\n  _spriteMaskManager: SpriteMaskManager;\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  protected _canvas: Canvas;\n\n  private _settings: EngineSettings = {};\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * Settings of Engine.\n   */\n  get settings(): Readonly<EngineSettings> {\n    return this._settings;\n  }\n\n  /**\n   * The canvas to use for rendering.\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * Get the resource manager.\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * Get the scene manager.\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * Get the Time class.\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Create engine.\n   * @param canvas - The canvas to use for rendering\n   * @param hardwareRenderer - Graphics API renderer\n   * @param physics - native physics Engine\n   */\n  constructor(canvas: Canvas, hardwareRenderer: IHardwareRenderer, physics?: IPhysics, settings?: EngineSettings) {\n    super(null);\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n    if (physics) {\n      PhysicsManager._nativePhysics = physics;\n      this.physicsManager = new PhysicsManager();\n    }\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n\n    this._spriteMaskManager = new SpriteMaskManager(this);\n    this._spriteDefaultMaterial = this._createSpriteMaterial();\n    this._spriteMaskDefaultMaterial = this._createSpriteMaskMaterial();\n\n    this.inputManager = new InputManager(this);\n\n    const whitePixel = new Uint8Array([255, 255, 255, 255]);\n\n    const whiteTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);\n    whiteTexture2D.setPixelBuffer(whitePixel);\n    whiteTexture2D.isGCIgnored = true;\n\n    const whiteTextureCube = new TextureCubeMap(this, 1, TextureFormat.R8G8B8A8, false);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, whitePixel);\n    whiteTextureCube.isGCIgnored = true;\n\n    this._whiteTexture2D = whiteTexture2D;\n    this._whiteTextureCube = whiteTextureCube;\n\n    this._backgroundTextureMaterial = new Material(this, Shader.find(\"background-texture\"));\n    this._backgroundTextureMaterial.isGCIgnored = true;\n    this._backgroundTextureMaterial.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    const colorSpace = settings?.colorSpace || ColorSpace.Linear;\n    colorSpace === ColorSpace.Gamma && this._macroCollection.enable(Engine._gammaMacro);\n    this._settings.colorSpace = colorSpace;\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    const deltaTime = time.deltaTime;\n\n    time.tick();\n    this._renderElementPool.resetPool();\n    this._spriteElementPool.resetPool();\n    this._spriteMaskElementPool.resetPool();\n\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      scene._activeCameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n\n      componentsManager.callScriptOnStart();\n      if (this.physicsManager) {\n        componentsManager.callColliderOnUpdate();\n        this.physicsManager._update(deltaTime / 1000.0);\n        componentsManager.callColliderOnLateUpdate();\n      }\n      this.inputManager._update();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n\n      this._render(scene);\n    }\n\n    this._componentsManager.callComponentDestroy();\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * Destroy engine.\n   */\n  destroy(): void {\n    if (this._sceneManager) {\n      this._whiteTexture2D.destroy(true);\n      this._whiteTextureCube.destroy(true);\n      this.inputManager._destroy();\n      this.trigger(new Event(\"shutdown\", this));\n      engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n      // -- cancel animation\n      this.pause();\n\n      this._animate = null;\n\n      this._sceneManager._activeScene.destroy();\n      this._resourceManager.gc();\n      // If engine destroy, callComponentDestroy() maybe will not call anymore.\n      this._componentsManager.callComponentDestroy();\n      this._sceneManager = null;\n      this._resourceManager = null;\n\n      this._canvas = null;\n\n      this.features = [];\n      this._time = null;\n\n      // delete mask manager\n      this._spriteMaskManager.destroy();\n\n      // todo: delete\n      (engineFeatureManager as any)._objects = [];\n      this.removeAllEventListeners();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shader: Shader): ShaderProgramPool {\n    const index = shader._shaderId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length < shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool();\n    }\n    return pool;\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n\n    scene._updateShaderData();\n\n    if (cameras.length > 0) {\n      for (let i = 0, l = cameras.length; i < l; i++) {\n        const camera = cameras[i];\n        const cameraEntity = camera.entity;\n        if (camera.enabled && cameraEntity.isActiveInHierarchy) {\n          componentsManager.callCameraOnBeginRender(camera);\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [scene, camera]); //TODO: will be removed\n          camera.render();\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [scene, camera]); //TODO: will be removed\n          componentsManager.callCameraOnEndRender(camera);\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  private _createSpriteMaterial(): Material {\n    const material = new Material(this, Shader.find(\"Sprite\"));\n    const renderState = material.renderState;\n    const target = renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    renderState.depthState.writeEnabled = false;\n    renderState.rasterState.cullMode = CullMode.Off;\n    material.renderQueueType = RenderQueueType.Transparent;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  private _createSpriteMaskMaterial(): Material {\n    const material = new Material(this, Shader.find(\"SpriteMask\"));\n    const renderState = material.renderState;\n    renderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.None;\n    renderState.rasterState.cullMode = CullMode.Off;\n    renderState.stencilState.enabled = true;\n    renderState.depthState.enabled = false;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n","/**\n * System info.\n */\nexport class SystemInfo {\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n\n  /**\n   * @internal\n   */\n  static _isIos(): boolean {\n    if (!window) {\n      return false;\n    }\n\n    const ua = window.navigator.userAgent.toLocaleLowerCase();\n    return /iphone|ipad|ipod/.test(ua);\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Engine feature plug-in.\n * @deprecated\n */\nexport class EngineFeature {\n  /**\n   * Callback before the engine main loop runs,used to load resource.\n   * @param engine - Engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * Callback before every engine tick.\n   * @param engine - Engine\n   * @param currentScene - Scene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after every engine tick.\n   * @param  engine - Engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after the engine is destroyed.\n   * @param engine - Engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n","import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { ColliderShape } from \"./physics\";\n\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n  @ignoreClone\n  _entityCacheIndex: number = -1;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other ColliderShape\n   */\n  onTriggerEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other ColliderShape\n   */\n  onTriggerExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other ColliderShape\n   */\n  onTriggerStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape.\n   */\n  onPointerDown(): void {}\n\n  /**\n   * Called when the pointer is up while over the ColliderShape.\n   */\n  onPointerUp(): void {}\n\n  /**\n   * Called when the pointer is down and up with the same collider.\n   */\n  onPointerClick(): void {}\n\n  /**\n   * Called when the pointer is enters the ColliderShape.\n   */\n  onPointerEnter(): void {}\n\n  /**\n   * Called when the pointer is no longer over the ColliderShape.\n   */\n  onPointerExit(): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape and is still holding down.\n   * @remarks onPointerDrag is called every frame while the pointer is down.\n   */\n  onPointerDrag(): void {}\n\n  /**\n   * Called when be disabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    this._entity._addScript(this);\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    // Use \"xxIndex\" is more safe.\n    // When call onDisable it maybe it still not in script queue,for example write \"entity.isActive = false\" in onWake().\n    if (this._onStartIndex !== -1) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this._onUpdateIndex !== -1) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this._onLateUpdateIndex !== -1) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    if (this._entityCacheIndex !== -1) {\n      this._entity._removeScript(this);\n    }\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this.engine._componentsManager.addDestroyComponent(this);\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderQueue } from \"./RenderQueue\";\n\nlet passNum = 0;\n\n/**\n * RenderPass.\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial: Material;\n  public mask: Layer;\n  public renderOverride: boolean;\n  public clearFlags: CameraClearFlags | undefined;\n  public clearColor: Color | undefined;\n\n  /**\n   * Create a RenderPass.\n   * @param name - Pass name\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || Layer.Everything;\n    this.renderOverride = false; // If renderOverride is set to true, you need to implement the render method\n  }\n\n  /**\n   * Rendering callback, will be executed if renderOverride is set to true.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  render(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  preRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  postRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n}\n\nexport { RenderPass };\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * @internal\n */\nexport class SpriteBatcher extends Basic2DBatcher {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    vertexElements[2] = new VertexElement(\"COLOR_0\", 20, VertexElementFormat.Vector4, 0);\n    return 36;\n  }\n\n  canBatch(preElement: SpriteElement, curElement: SpriteElement): boolean {\n    const preRenderer = <SpriteRenderer>preElement.component;\n    const curRenderer = <SpriteRenderer>curElement.component;\n\n    // Compare mask\n    if (!this.checkBatchWithMask(preRenderer, curRenderer)) {\n      return false;\n    }\n\n    // Compare renderer property\n    const textureProperty = SpriteBatcher._textureProperty;\n    if (preRenderer.shaderData.getTexture(textureProperty) !== curRenderer.shaderData.getTexture(textureProperty)) {\n      return false;\n    }\n\n    // Compare material\n    return preElement.material === curElement.material;\n  }\n\n  checkBatchWithMask(left: SpriteRenderer, right: SpriteRenderer): boolean {\n    const leftMaskInteraction = left.maskInteraction;\n\n    if (leftMaskInteraction !== right.maskInteraction) {\n      return false;\n    }\n    if (leftMaskInteraction === SpriteMaskInteraction.None) {\n      return true;\n    }\n    return left.maskLayer === right.maskLayer;\n  }\n\n  updateVertices(element: SpriteElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uv, color } = element;\n    const verticesNum = positions.length;\n    for (let i = 0; i < verticesNum; i++) {\n      const curPos = positions[i];\n      const curUV = uv[i];\n\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n      vertices[vertexIndex++] = color.r;\n      vertices[vertexIndex++] = color.g;\n      vertices[vertexIndex++] = color.b;\n      vertices[vertexIndex++] = color.a;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(engine: Engine): void {\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const batchedQueue = this._batchedQueue;\n    const maskManager = engine._spriteMaskManager;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteElement = <SpriteElement>batchedQueue[i];\n\n      if (!subMesh || !spriteElement) {\n        return;\n      }\n\n      const renderer = <SpriteRenderer>spriteElement.component;\n      const camera = spriteElement.camera;\n      const material = spriteElement.material;\n      maskManager.preRender(camera, renderer);\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, camera.scene.shaderData);\n      program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n\n      maskManager.postRender(renderer);\n    }\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SpriteBatcher } from \"./SpriteBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\ntype Item = RenderElement | SpriteElement;\n\n/**\n * Render queue.\n */\nexport class RenderQueue {\n  /**\n   * @internal\n   */\n  static _compareFromNearToFar(a: Item, b: Item): number {\n    return (\n      a.material.renderQueueType - b.material.renderQueueType ||\n      a.component._distanceForSort - b.component._distanceForSort ||\n      b.component._renderSortId - a.component._renderSortId\n    );\n  }\n\n  /**\n   * @internal\n   */\n  static _compareFromFarToNear(a: Item, b: Item): number {\n    return (\n      a.material.renderQueueType - b.material.renderQueueType ||\n      b.component._distanceForSort - a.component._distanceForSort ||\n      b.component._renderSortId - a.component._renderSortId\n    );\n  }\n\n  readonly items: Item[] = [];\n  private _spriteBatcher: SpriteBatcher;\n\n  constructor(engine: Engine) {\n    this._spriteBatcher = new SpriteBatcher(engine);\n  }\n\n  /**\n   * Push a render element.\n   */\n  pushPrimitive(element: RenderElement | SpriteElement): void {\n    this.items.push(element);\n  }\n\n  render(camera: Camera, replaceMaterial: Material, mask: Layer) {\n    const items = this.items;\n    if (items.length === 0) {\n      return;\n    }\n\n    const { engine, scene } = camera;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const sceneData = scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, n = items.length; i < n; i++) {\n      const item = items[i];\n      const renderPassFlag = item.component.entity.layer;\n\n      if (!(renderPassFlag & mask)) {\n        continue;\n      }\n\n      if (!!(item as RenderElement).mesh) {\n        this._spriteBatcher.flush(engine);\n\n        const compileMacros = Shader._compileMacros;\n        const element = <RenderElement>item;\n        const renderer = element.component;\n        const material = replaceMaterial ? replaceMaterial : element.material;\n        const rendererData = renderer.shaderData;\n        const materialData = material.shaderData;\n\n        // @todo: temporary solution\n        material._preRender(element);\n\n        // union render global macro and material self macro.\n        ShaderMacroCollection.unionCollection(\n          renderer._globalShaderMacro,\n          materialData._macroCollection,\n          compileMacros\n        );\n\n        const program = material.shader._getShaderProgram(engine, compileMacros);\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          // Ungroup textures should upload default value, texture uint maybe change by logic of texture bind.\n          program.uploadUngroupTextures();\n          program._uploadCamera = camera;\n          program._uploadRenderer = renderer;\n          program._uploadMaterial = material;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadCamera !== camera) {\n            program.uploadAll(program.cameraUniformBlock, cameraData);\n            program._uploadCamera = camera;\n          } else if (switchProgram) {\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n          }\n\n          if (program._uploadRenderer !== renderer) {\n            program.uploadAll(program.rendererUniformBlock, rendererData);\n            program._uploadRenderer = renderer;\n          } else if (switchProgram) {\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n          }\n\n          if (program._uploadMaterial !== material) {\n            program.uploadAll(program.materialUniformBlock, materialData);\n            program._uploadMaterial = material;\n          } else if (switchProgram) {\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n\n          // We only consider switchProgram case, because ungroup texture's value is always default.\n          if (switchProgram) {\n            program.uploadUngroupTextures();\n          }\n        }\n        material.renderState._apply(camera.engine);\n        rhi.drawPrimitive(element.mesh, element.subMesh, program);\n      } else {\n        const spriteElement = <SpriteElement>item;\n        this._spriteBatcher.drawElement(spriteElement);\n      }\n    }\n\n    this._spriteBatcher.flush(engine);\n  }\n\n  /**\n   * Clear collection.\n   */\n  clear(): void {\n    this.items.length = 0;\n    this._spriteBatcher.clear();\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._spriteBatcher.destroy();\n    this._spriteBatcher = null;\n  }\n\n  /**\n   * Sort the elements.\n   */\n  sort(compareFunc: Function): void {\n    this._quickSort(this.items, 0, this.items.length, compareFunc);\n  }\n\n  /**\n   * @remarks\n   * Modified based on v8.\n   * https://github.com/v8/v8/blob/7.2-lkgr/src/js/array.js\n   */\n  private _quickSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    while (true) {\n      // Insertion sort is faster for short arrays.\n      if (to - from <= 10) {\n        this._insertionSort(a, from, to, compareFunc);\n        return;\n      }\n      const third_index = (from + to) >> 1;\n      // Find a pivot as the median of first, last and middle element.\n      let v0 = a[from];\n      let v1 = a[to - 1];\n      let v2 = a[third_index];\n      const c01 = compareFunc(v0, v1);\n      if (c01 > 0) {\n        // v1 < v0, so swap them.\n        const tmp = v0;\n        v0 = v1;\n        v1 = tmp;\n      } // v0 <= v1.\n      const c02 = compareFunc(v0, v2);\n      if (c02 >= 0) {\n        // v2 <= v0 <= v1.\n        const tmp = v0;\n        v0 = v2;\n        v2 = v1;\n        v1 = tmp;\n      } else {\n        // v0 <= v1 && v0 < v2\n        const c12 = compareFunc(v1, v2);\n        if (c12 > 0) {\n          // v0 <= v2 < v1\n          const tmp = v1;\n          v1 = v2;\n          v2 = tmp;\n        }\n      }\n      // v0 <= v1 <= v2\n      a[from] = v0;\n      a[to - 1] = v2;\n      const pivot = v1;\n      let low_end = from + 1; // Upper bound of elements lower than pivot.\n      let high_start = to - 1; // Lower bound of elements greater than pivot.\n      a[third_index] = a[low_end];\n      a[low_end] = pivot;\n\n      // From low_end to i are elements equal to pivot.\n      // From i to high_start are elements that haven't been compared yet.\n      partition: for (let i = low_end + 1; i < high_start; i++) {\n        let element = a[i];\n        let order = compareFunc(element, pivot);\n        if (order < 0) {\n          a[i] = a[low_end];\n          a[low_end] = element;\n          low_end++;\n        } else if (order > 0) {\n          do {\n            high_start--;\n            if (high_start == i) break partition;\n            const top_elem = a[high_start];\n            order = compareFunc(top_elem, pivot);\n          } while (order > 0);\n          a[i] = a[high_start];\n          a[high_start] = element;\n          if (order < 0) {\n            element = a[i];\n            a[i] = a[low_end];\n            a[low_end] = element;\n            low_end++;\n          }\n        }\n      }\n      if (to - high_start < low_end - from) {\n        this._quickSort(a, high_start, to, compareFunc);\n        to = low_end;\n      } else {\n        this._quickSort(a, from, low_end, compareFunc);\n        from = high_start;\n      }\n    }\n  }\n\n  private _insertionSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    for (let i = from + 1; i < to; i++) {\n      let j;\n      const element = a[i];\n      for (j = i - 1; j >= from; j--) {\n        const tmp = a[j];\n        const order = compareFunc(tmp, element);\n        if (order > 0) {\n          a[j + 1] = tmp;\n        } else {\n          break;\n        }\n      }\n      a[j + 1] = element;\n    }\n  }\n}\n","import { Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { Background } from \"..\";\nimport { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { BackgroundMode } from \"../enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"../enums/BackgroundTextureFillMode\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Sky } from \"../sky/Sky\";\nimport { TextureCubeFace } from \"../texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  /** @internal */\n  _opaqueQueue: RenderQueue;\n  /** @internal */\n  _transparentQueue: RenderQueue;\n  /** @internal */\n  _alphaTestQueue: RenderQueue;\n  /** @internal */\n  _allSpriteMasks: DisorderedArray<SpriteMask> = new DisorderedArray();\n\n  private _camera: Camera;\n  private _defaultPass: RenderPass;\n  private _renderPassArray: Array<RenderPass>;\n  private _lastCanvasSize = new Vector2();\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    const { engine } = camera;\n    this._opaqueQueue = new RenderQueue(engine);\n    this._alphaTestQueue = new RenderQueue(engine);\n    this._transparentQueue = new RenderQueue(engine);\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * Default render pass.\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * Add render pass.\n   * @param nameOrPass - The name of this Pass or RenderPass object. When it is a name, the following parameters need to be provided\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: Layer = null\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * Remove render pass by name or render pass object.\n   * @param nameOrPass - Render pass name or render pass object\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Get render pass by name.\n   * @param  name - Render pass name\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._opaqueQueue.destroy();\n    this._alphaTestQueue.destroy();\n    this._transparentQueue.destroy();\n    this._allSpriteMasks = null;\n    this._renderPassArray = null;\n    this._defaultPass = null;\n    this._camera = null;\n  }\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   * @param mipLevel - Set mip level the data want to write\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    const camera = this._camera;\n    const opaqueQueue = this._opaqueQueue;\n    const alphaTestQueue = this._alphaTestQueue;\n    const transparentQueue = this._transparentQueue;\n\n    camera.engine._spriteMaskManager.clear();\n\n    opaqueQueue.clear();\n    alphaTestQueue.clear();\n    transparentQueue.clear();\n    this._allSpriteMasks.length = 0;\n\n    camera.engine._componentsManager.callRender(context);\n    opaqueQueue.sort(RenderQueue._compareFromNearToFar);\n    alphaTestQueue.sort(RenderQueue._compareFromNearToFar);\n    transparentQueue.sort(RenderQueue._compareFromFarToNear);\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera, cubeFace, mipLevel);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    pass.preRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n\n    if (pass.enabled) {\n      const { engine, scene } = camera;\n      const { background } = scene;\n      const rhi = engine._hardwareRenderer;\n      const renderTarget = camera.renderTarget || pass.renderTarget;\n      rhi.activeRenderTarget(renderTarget, camera, mipLevel); // change viewport with mip level\n      renderTarget?._setRenderTargetInfo(cubeFace, mipLevel);\n      const clearFlags = pass.clearFlags ?? camera.clearFlags;\n      const color = pass.clearColor ?? background.solidColor;\n      if (clearFlags !== CameraClearFlags.None) {\n        rhi.clearRenderTarget(camera.engine, clearFlags, color);\n      }\n\n      if (pass.renderOverride) {\n        pass.render(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n      } else {\n        this._opaqueQueue.render(camera, pass.replaceMaterial, pass.mask);\n        this._alphaTestQueue.render(camera, pass.replaceMaterial, pass.mask);\n        if (background.mode === BackgroundMode.Sky) {\n          this._drawSky(engine, camera, background.sky);\n        } else if (background.mode === BackgroundMode.Texture && background.texture) {\n          this._drawBackgroundTexture(engine, background);\n        }\n        this._transparentQueue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n\n      renderTarget?._blitRenderTarget();\n      renderTarget?.generateMipmaps();\n    }\n\n    pass.postRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n  }\n\n  /**\n   * Push a render element to the render queue.\n   * @param element - Render element\n   */\n  pushPrimitive(element: RenderElement | SpriteElement) {\n    const renderQueueType = element.material.renderQueueType;\n\n    if (renderQueueType > (RenderQueueType.Transparent + RenderQueueType.AlphaTest) >> 1) {\n      this._transparentQueue.pushPrimitive(element);\n    } else if (renderQueueType > (RenderQueueType.AlphaTest + RenderQueueType.Opaque) >> 1) {\n      this._alphaTestQueue.pushPrimitive(element);\n    } else {\n      this._opaqueQueue.pushPrimitive(element);\n    }\n  }\n\n  private _drawBackgroundTexture(engine: Engine, background: Background) {\n    const rhi = engine._hardwareRenderer;\n    const { _backgroundTextureMaterial, canvas } = engine;\n    const mesh = background._mesh;\n\n    if (\n      (this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) &&\n      background._textureFillMode !== BackgroundTextureFillMode.Fill\n    ) {\n      this._lastCanvasSize.setValue(canvas.width, canvas.height);\n      background._resizeBackgroundTexture();\n    }\n\n    const program = _backgroundTextureMaterial.shader._getShaderProgram(engine, Shader._compileMacros);\n    program.bind();\n    program.uploadAll(program.materialUniformBlock, _backgroundTextureMaterial.shaderData);\n    program.uploadUngroupTextures();\n\n    _backgroundTextureMaterial.renderState._apply(engine);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n\n  private _drawSky(engine: Engine, camera: Camera, sky: Sky): void {\n    const { material, mesh, _matrix } = sky;\n    if (!material) {\n      Logger.warn(\"The material of sky is not defined.\");\n      return;\n    }\n    if (!mesh) {\n      Logger.warn(\"The mesh of sky is not defined.\");\n      return;\n    }\n\n    const rhi = engine._hardwareRenderer;\n    const { shaderData, shader, renderState } = material;\n\n    const compileMacros = Shader._compileMacros;\n    ShaderMacroCollection.unionCollection(camera._globalShaderMacro, shaderData._macroCollection, compileMacros);\n\n    const { viewMatrix, projectionMatrix } = camera;\n    viewMatrix.cloneTo(_matrix);\n    const e = _matrix.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(projectionMatrix, _matrix, _matrix);\n    shaderData.setMatrix(\"u_mvpNoscale\", _matrix);\n\n    const program = shader._getShaderProgram(engine, compileMacros);\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.materialUniformBlock, shaderData);\n    program.uploadUngroupTextures();\n\n    renderState._apply(engine);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n}\n","import { BoundingFrustum, MathUtil, Matrix, Ray, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"./base\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependencies } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\nclass MathTemp {\n  static tempMat4 = new Matrix();\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n  static tempVec2 = new Vector2();\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n */\n@dependencies(Transform)\nexport class Camera extends Component {\n  private static _viewMatrixProperty = Shader.getPropertyByName(\"u_viewMat\");\n  private static _projectionMatrixProperty = Shader.getPropertyByName(\"u_projMat\");\n  private static _vpMatrixProperty = Shader.getPropertyByName(\"u_VPMat\");\n  private static _inverseViewMatrixProperty = Shader.getPropertyByName(\"u_viewInvMat\");\n  private static _inverseProjectionMatrixProperty = Shader.getPropertyByName(\"u_projInvMat\");\n  private static _cameraPositionProperty = Shader.getPropertyByName(\"u_cameraPos\");\n\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n\n  /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */\n  priority: number = 0;\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Determining what to clear when rendering by a Camera.\n   * @defaultValue `CameraClearFlags.DepthColor`\n   */\n  clearFlags: CameraClearFlags = CameraClearFlags.DepthColor;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, corresponding to Entity's layer.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n\n  private _isOrthographic: boolean = false;\n  private _isProjMatSetting = false;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _isFrustumProjectDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  private _frustumViewChangeFlag: UpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: UpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: UpdateFlag;\n  @deepClone\n  private _projectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * The camera's view angle. activating when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,\n   * the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      value.cloneTo(this._viewport);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    // Remove scale\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      Matrix.invert(this._transform.worldMatrix, this._viewMatrix);\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * The projection matrix is ​​calculated by the relevant parameters of the camera by default.\n   * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @todo When render pipeline modification\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implementation\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implementation\");\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * Create the Camera component.\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumViewChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - A point in the viewport space, X and Y are the viewport space coordinates, Z is the viewport depth, the near clipping plane is 0, the far clipping plane is 1, and W is the world unit distance from the camera\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector4): Vector4 {\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, MathTemp.tempMat4);\n    MathTemp.tempVec4.setValue(point.x, point.y, point.z, 1.0);\n    Vector4.transform(MathTemp.tempVec4, MathTemp.tempMat4, MathTemp.tempVec4);\n\n    const w = MathTemp.tempVec4.w;\n    const nx = MathTemp.tempVec4.x / w;\n    const ny = MathTemp.tempVec4.y / w;\n    const nz = MathTemp.tempVec4.z / w;\n\n    // Transform of coordinate axis.\n    out.x = (nx + 1.0) * 0.5;\n    out.y = (1.0 - ny) * 0.5;\n    out.z = nz;\n    out.w = w;\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport space, X and Y are the viewport space coordinates, Z is the viewport depth. The near clipping plane is 0, and the far clipping plane is 1\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const invViewProjMat = this.invViewProjMat;\n    return this._innerViewportToWorldPoint(point, invViewProjMat, out);\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point - Point in viewport space, which is represented by normalization\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const clipPoint = MathTemp.tempVec3;\n    // Use the intersection of the near clipping plane as the origin point.\n    clipPoint.setValue(point.x, point.y, 0);\n    const origin = this.viewportToWorldPoint(clipPoint, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    clipPoint.z = 1.0;\n    const farPoint: Vector3 = this._innerViewportToWorldPoint(clipPoint, this._invViewProjMat, clipPoint);\n    Vector3.subtract(farPoint, origin, out.direction);\n    out.direction.normalize();\n\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   * @param point - Point in world space\n   * @param out - Point of screen space\n   * @returns Point of screen space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector4): Vector4 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   * @param point - Screen space point\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Generate a ray by a point in screen.\n   * @param point - Point in screen space, the unit is pixel\n   * @param out - Ray\n   * @returns Ray\n   */\n  screenPointToRay(point: Vector2, out: Ray): Ray {\n    const viewportPoint = MathTemp.tempVec2;\n    this.screenToViewportPoint(point, viewportPoint);\n    return this.viewportPointToRay(viewportPoint, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   * @param mipLevel - Set mip level the data want to write, only take effect in webgl2.0\n   */\n  render(cubeFace?: TextureCubeFace, mipLevel: number = 0): void {\n    // compute cull frustum.\n    const context = this.engine._renderContext;\n    context._setContext(this);\n    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {\n      this._frustum.calculateFromMatrix(context._viewProjectMatrix);\n      this._frustumViewChangeFlag.flag = false;\n      this._isFrustumProjectDirty = false;\n    }\n\n    this._updateShaderData(context);\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    if (mipLevel > 0 && !this.engine._hardwareRenderer.isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n    this._renderPipeline.render(context, cubeFace, mipLevel);\n    this._engine._renderCount++;\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onActive() {\n    this.entity.scene._attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onInActive() {\n    this.entity.scene._detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy() {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _projMatChange() {\n    this._isFrustumProjectDirty = true;\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(point: Vector3, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    const depth = point.z * 2 - 1;\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec4;\n    clipPoint.setValue(point.x * 2 - 1, 1 - point.y * 2, depth, 1);\n    Vector4.transform(clipPoint, invViewProjMat, clipPoint);\n    const invW = 1.0 / clipPoint.w;\n    out.x = clipPoint.x * invW;\n    out.y = clipPoint.y * invW;\n    out.z = clipPoint.z * invW;\n    return out;\n  }\n\n  private _updateShaderData(context: RenderContext) {\n    const shaderData = this.shaderData;\n    shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);\n    shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);\n    shaderData.setMatrix(Camera._vpMatrixProperty, context._viewProjectMatrix);\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this._transform.worldMatrix);\n    shaderData.setMatrix(Camera._inverseProjectionMatrixProperty, this.inverseProjectionMatrix);\n    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);\n  }\n\n  /**\n   * @private\n   * The inverse matrix of view projection matrix.\n   */\n  get invViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this._transform.worldMatrix, this.inverseProjectionMatrix, this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * @private\n   * The inverse of the projection matrix.\n   */\n  get inverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 4;\nconst defaultTimeout = 15000;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`request ${url} timeout`));\n    }, timeout);\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    xhr.send(config.body as XMLHttpRequestBodyInit);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n","import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n","/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = \"text\",\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = \"json\",\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = \"buffer\",\n  /** 2D Texture. */\n  Texture2D = \"texture2d\",\n  /** Cube Texture. */\n  TextureCube = \"texture-cube\",\n  /** Material. */\n  Material = \"material\",\n  /** Mesh. */\n  Mesh = \"mesh\",\n  /** Animation Clip. */\n  AnimationClip = \"animation-clip\",\n  /** Prefab.*/\n  Prefab = \"prefab\",\n  /** Compress Texture. */\n  KTX = \"ktx\",\n  /** Cube Compress Texture. */\n  KTXCube = \"ktx-cube\",\n  /** Sprite Atlas. */\n  SpriteAtlas = \"sprite-atlas\",\n  /** ambient light */\n  Env = \"environment\"\n}\n","/**\n * Set which face for render.\n */\nexport enum RenderFace {\n  /** Render front face. */\n  Front,\n  /** Render back face. */\n  Back,\n  /** Render double face. */\n  Double\n}\n","/**\n * Alpha blend mode.\n */\nexport enum BlendMode {\n  /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n  Normal,\n  /** SRC ALPHA * SRC + ONE * DEST */\n  Additive\n}\n","import { Engine } from \"../Engine\";\nimport { BlendFactor, BlendOperation, CullMode, Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { BlendMode } from \"./enums/BlendMode\";\nimport { RenderFace } from \"./enums/RenderFace\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\nexport class BaseMaterial extends Material {\n  private static _alphaCutoffMacro: ShaderMacro = Shader.getMacroByName(\"ALPHA_CUTOFF\");\n  private static _alphaCutoffProp = Shader.getPropertyByName(\"u_alphaCutoff\");\n\n  private _renderFace: RenderFace = RenderFace.Front;\n  private _isTransparent: boolean = false;\n  private _blendMode: BlendMode;\n\n  /**\n   * Is this material transparent.\n   * @remarks\n   * If material is transparent, transparent blend mode will be affected by `blendMode`, default is `BlendMode.Normal`.\n   */\n  get isTransparent(): boolean {\n    return this._isTransparent;\n  }\n\n  set isTransparent(value: boolean) {\n    if (value === this._isTransparent) return;\n    this._isTransparent = value;\n\n    const {\n      depthState,\n      blendState: { targetBlendState }\n    } = this.renderState;\n\n    if (value) {\n      targetBlendState.enabled = true;\n      depthState.writeEnabled = false;\n      this.renderQueueType = RenderQueueType.Transparent;\n    } else {\n      targetBlendState.enabled = false;\n      depthState.writeEnabled = true;\n      this.renderQueueType = this.shaderData.getFloat(BaseMaterial._alphaCutoffProp)\n        ? RenderQueueType.AlphaTest\n        : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks\n   * Fragments with alpha channel lower than cutoff value will be discarded.\n   * `0` means no fragment will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this.shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n  }\n\n  set alphaCutoff(value: number) {\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, value);\n\n    if (value > 0) {\n      this.shaderData.enableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.AlphaTest;\n    } else {\n      this.shaderData.disableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Set which face for render.\n   */\n  get renderFace(): RenderFace {\n    return this._renderFace;\n  }\n\n  set renderFace(value: RenderFace) {\n    if (value === this._renderFace) return;\n    this._renderFace = value;\n\n    switch (value) {\n      case RenderFace.Front:\n        this.renderState.rasterState.cullMode = CullMode.Back;\n        break;\n      case RenderFace.Back:\n        this.renderState.rasterState.cullMode = CullMode.Front;\n        break;\n      case RenderFace.Double:\n        this.renderState.rasterState.cullMode = CullMode.Off;\n        break;\n    }\n  }\n\n  /**\n   * Alpha blend mode.\n   * @remarks\n   * Only take effect when `isTransparent` is `true`.\n   */\n  get blendMode(): BlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: BlendMode) {\n    if (value === this._blendMode) return;\n    this._blendMode = value;\n\n    const {\n      blendState: { targetBlendState: target }\n    } = this.renderState;\n\n    switch (value) {\n      case BlendMode.Normal:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n      case BlendMode.Additive:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.One;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n    }\n  }\n\n  /**\n   * Create a BaseMaterial instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n    this.blendMode = BlendMode.Normal;\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, 0);\n  }\n\n  /**\n   * @override\n   * Clone and return the instance.\n   */\n  clone(): BaseMaterial {\n    const dest = new BaseMaterial(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * @override\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: BaseMaterial): void {\n    super.cloneTo(target);\n    target._renderFace = this._renderFace;\n    target._isTransparent = this._isTransparent;\n    target._blendMode = this._blendMode;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends BaseMaterial {\n  private static _diffuseColorProp = Shader.getPropertyByName(\"u_diffuseColor\");\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  private static _shininessProp = Shader.getPropertyByName(\"u_shininess\");\n  private static _normalIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_diffuseTexture\");\n  private static _specularTextureProp = Shader.getPropertyByName(\"u_specularTexture\");\n  private static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveTexture\");\n  private static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._diffuseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BlinnPhongMaterial._diffuseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_DIFFUSE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_DIFFUSE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n    if (value !== specularColor) {\n      value.cloneTo(specularColor);\n    }\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._specularTextureProp);\n  }\n\n  set specularTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._specularTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_SPECULAR_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      value.cloneTo(emissiveColor);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_EMISSIVE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_EMISSIVE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalIntensity(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._normalIntensityProp);\n  }\n\n  set normalIntensity(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._shininessProp);\n  }\n\n  set shininess(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._shininessProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(BlinnPhongMaterial._diffuseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(BlinnPhongMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n    shaderData.setFloat(BlinnPhongMaterial._shininessProp, 16);\n    shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, 1);\n  }\n\n  /**\n   * @override\n   */\n  clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends BaseMaterial {\n  private static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  private static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_baseColorSampler\");\n  private static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n  private static _normalTextureIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n  private static _occlusionTextureIntensityProp = Shader.getPropertyByName(\"u_occlusionStrength\");\n\n  private static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveSampler\");\n  private static _occlusionTextureProp = Shader.getPropertyByName(\"u_occlusionSampler\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_BASECOLORMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_BASECOLORMAP\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._normalTextureIntensityProp);\n  }\n\n  set normalTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._normalTextureIntensityProp, value);\n    this.shaderData.setFloat(\"u_normalIntensity\", value);\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      value.cloneTo(emissiveColor);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_EMISSIVEMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_EMISSIVEMAP\");\n    }\n  }\n\n  /**\n   * Occlusion texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._occlusionTextureProp);\n  }\n\n  set occlusionTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._occlusionTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_OCCLUSIONMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_OCCLUSIONMAP\");\n    }\n  }\n\n  /**\n   * Occlusion texture intensity.\n   */\n  get occlusionTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureIntensityProp);\n  }\n\n  set occlusionTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  protected constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(PBRBaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(PBRBaseMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(PBRBaseMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n\n    shaderData.setFloat(PBRBaseMaterial._normalTextureIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, 1);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private static _metallicProp = Shader.getPropertyByName(\"u_metal\");\n  private static _roughnessProp = Shader.getPropertyByName(\"u_roughness\");\n  private static _metallicRoughnessTextureProp = Shader.getPropertyByName(\"u_metallicRoughnessSampler\");\n\n  /**\n   * Metallic.\n   */\n  get metallic(): number {\n    return this.shaderData.getFloat(PBRMaterial._metallicProp);\n  }\n\n  set metallic(value: number) {\n    this.shaderData.setFloat(PBRMaterial._metallicProp, value);\n  }\n\n  /**\n   * Roughness.\n   */\n  get roughness(): number {\n    return this.shaderData.getFloat(PBRMaterial._roughnessProp);\n  }\n\n  set roughness(value: number) {\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, value);\n  }\n\n  /**\n   * Roughness metallic texture.\n   * @remarks G channel is roughness, B channel is metallic\n   */\n  get roughnessMetallicTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._metallicRoughnessTextureProp);\n  }\n\n  set roughnessMetallicTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._metallicRoughnessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_METALROUGHNESSMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_METALROUGHNESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n    this.shaderData.setFloat(PBRMaterial._metallicProp, 1.0);\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _glossinessProp = Shader.getPropertyByName(\"u_glossiness\");\n  private static _specularGlossinessTextureProp = Shader.getPropertyByName(\"u_specularGlossinessSampler\");\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n    if (value !== specularColor) {\n      value.cloneTo(specularColor);\n    }\n  }\n\n  /**\n   * Glossiness.\n   */\n  get glossiness(): number {\n    return this.shaderData.getFloat(PBRSpecularMaterial._glossinessProp);\n  }\n\n  set glossiness(value: number) {\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, value);\n  }\n\n  /**\n   * Specular glossiness texture.\n   * @remarks RGB is specular, A is glossiness\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRSpecularMaterial._specularGlossinessTextureProp);\n  }\n\n  set specularGlossinessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRSpecularMaterial._specularGlossinessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr-specular\"));\n\n    this.shaderData.setColor(PBRSpecularMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends BaseMaterial {\n  private static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_baseTexture\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(UnlitMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(UnlitMaterial._baseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(UnlitMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(UnlitMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_BASE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_BASE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"OMIT_NORMAL\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(UnlitMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setVector4(UnlitMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n  }\n\n  /**\n   * @override\n   */\n  clone(): UnlitMaterial {\n    const dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Sprite } from \"../sprite/Sprite\";\n\n/**\n * Sprite Atlas.\n */\nexport class SpriteAtlas extends RefObject {\n  private _sprites: Sprite[] = new Array<Sprite>();\n  private _spriteNamesToIndex: Record<string, number> = {};\n\n  /**\n   * All the sprites in the atlas.\n   */\n  get sprites(): Readonly<Sprite[]> {\n    return this._sprites;\n  }\n\n  /**\n   * Get the last sprite named 'name' from the atlas.\n   * @param name - The name of the sprite you want to find\n   * @returns The sprite you want to find\n   */\n  getSprite(name: string): Sprite {\n    const sprite = this._sprites[this._spriteNamesToIndex[name]];\n    if (!sprite) {\n      console.warn(\"There is no sprite named \" + name + \" in the atlas.\");\n    }\n    return sprite;\n  }\n\n  /**\n   * Get all the sprite named 'name' from the atlas.\n   * @param name - The name of the sprites you want to find\n   * @param outSprites - This array holds the sprites found\n   * @returns The sprites you want to find\n   */\n  getSprites(name: string, outSprites: Sprite[]): Sprite[] {\n    outSprites.length = 0;\n    let i = this._spriteNamesToIndex[name];\n    if (i !== undefined) {\n      const { _sprites } = this;\n      for (; i >= 0; i--) {\n        const sprite = _sprites[i];\n        sprite.name === name && outSprites.push(sprite);\n      }\n    } else {\n      console.warn(\"The name of the sprite you want to find is not exit in SpriteAtlas.\");\n    }\n    return outSprites;\n  }\n\n  /**\n   * Constructor a SpriteAtlas.\n   * @param engine - Engine to which the SpriteAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @internal\n   */\n  _addSprite(sprite: Sprite): void {\n    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._sprites = null;\n    this._spriteNamesToIndex = null;\n  }\n}\n","import { BoundingBox, MathUtil, Rect, Vector2, Vector4 } from \"@oasis-engine/math\";\nimport { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture/Texture2D\";\n\n/**\n * 2D sprite.\n */\nexport class Sprite extends RefObject {\n  private static _rectangleTriangles: number[] = [0, 2, 1, 2, 0, 3];\n\n  /** The name of sprite. */\n  name: string;\n\n  /** @internal */\n  _uv: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  /** @internal */\n  _positions: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  /** @internal */\n  _bounds: BoundingBox = new BoundingBox();\n  /** @internal */\n  _triangles: number[];\n  /** @internal temp solution. */\n  _assetID: number;\n\n  private _pixelsPerUnit: number;\n  private _texture: Texture2D = null;\n  private _atlasRotated: boolean = false;\n  private _region: Rect = new Rect(0, 0, 1, 1);\n  private _pivot: Vector2 = new Vector2(0.5, 0.5);\n  private _atlasRegion: Rect = new Rect(0, 0, 1, 1);\n  private _atlasRegionOffset: Vector4 = new Vector4(0, 0, 0, 0);\n  private _dirtyFlag: DirtyFlag = DirtyFlag.all;\n\n  /**\n   * The reference to the used texture.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   *  Bounding volume of the sprite.\n   *  @remarks The returned bounds should be considered deep-read-only.\n   */\n  get bounds(): Readonly<BoundingBox> {\n    if (this._isContainDirtyFlag(DirtyFlag.positions) && this._texture) {\n      this._updatePositionsAndBounds();\n      this._setDirtyFlagFalse(DirtyFlag.positions);\n    }\n    return this._bounds;\n  }\n\n  /**\n   * Is it rotated 90 degrees clockwise when packing.\n   */\n  get atlasRotated(): boolean {\n    return this._atlasRotated;\n  }\n\n  set atlasRotated(value: boolean) {\n    if (this._atlasRotated != value) {\n      this._atlasRotated = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n    }\n  }\n\n  /**\n   * The rectangle region of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegion(): Rect {\n    return this._atlasRegion;\n  }\n\n  set atlasRegion(value: Rect) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegion.setValue(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * The rectangle region offset of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegionOffset(): Vector4 {\n    return this._atlasRegionOffset;\n  }\n\n  set atlasRegionOffset(value: Vector4) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegionOffset.setValue(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * Location of the sprite's center point in the rectangle region, specified in normalized.\n   */\n  get pivot(): Vector2 {\n    return this._pivot;\n  }\n\n  set pivot(value: Vector2) {\n    const pivot = this._pivot;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    if (pivot === value || pivot.x !== x || pivot.y !== y) {\n      pivot.setValue(x, y);\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   * The rectangle region of the sprite, specified in normalized.\n   */\n  get region(): Rect {\n    return this._region;\n  }\n\n  set region(value: Rect) {\n    const region = this._region;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    region.setValue(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * The number of pixels in the sprite that correspond to one unit in world space.\n   */\n  get pixelsPerUnit(): number {\n    return this._pixelsPerUnit;\n  }\n\n  set pixelsPerUnit(value: number) {\n    if (this._pixelsPerUnit !== value) {\n      this._pixelsPerUnit = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned sprite\n   */\n  clone(): Sprite {\n    const cloneSprite = new Sprite(\n      this._engine,\n      this._texture,\n      this._region,\n      this._pivot,\n      this._pixelsPerUnit,\n      this.name\n    );\n    cloneSprite._assetID = this._assetID;\n    cloneSprite._atlasRotated = this._atlasRotated;\n    this._atlasRegion.cloneTo(cloneSprite._atlasRegion);\n    this._atlasRegionOffset.cloneTo(cloneSprite._atlasRegionOffset);\n    return cloneSprite;\n  }\n\n  /**\n   * Constructor a Sprite.\n   * @param engine - Engine to which the sprite belongs\n   * @param texture - Texture from which to obtain the Sprite\n   * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized\n   * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized\n   * @param pixelsPerUnit - The number of pixels in the Sprite that correspond to one unit in world space\n   * @param name - The name of Sprite\n   */\n  constructor(\n    engine: Engine,\n    texture: Texture2D = null,\n    region: Rect = null,\n    pivot: Vector2 = null,\n    pixelsPerUnit: number = 128,\n    name: string = null\n  ) {\n    super(engine);\n\n    this.name = name;\n    this._texture = texture;\n    this._pixelsPerUnit = pixelsPerUnit;\n\n    region && region.cloneTo(this._region);\n    pivot && pivot.cloneTo(this._pivot);\n\n    this._triangles = Sprite._rectangleTriangles;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    if (this._texture) {\n      this._texture = null;\n    }\n  }\n\n  /**\n   * Update positions and bounds.\n   */\n  private _updatePositionsAndBounds(): void {\n    const { _texture: texture, _bounds: bounds } = this;\n    if (texture) {\n      const { _atlasRegion: atlasRegion, _pivot: pivot, _atlasRegionOffset: atlasRegionOffset } = this;\n      const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n      const pPUReciprocal = 1.0 / this._pixelsPerUnit;\n      // Coordinates of the four boundaries.\n      let lx: number, ty: number, rx: number, by: number;\n      // TextureSize\n      let textureW: number, textureH: number;\n      if (this._atlasRotated) {\n        textureW = texture.height * atlasRegion.height * pPUReciprocal;\n        textureH = texture.width * atlasRegion.width * pPUReciprocal;\n      } else {\n        textureW = texture.width * atlasRegion.width * pPUReciprocal;\n        textureH = texture.height * atlasRegion.height * pPUReciprocal;\n      }\n      // Determine whether it has been trimmed.\n      if (\n        atlasRegionOffset.x == 0 &&\n        atlasRegionOffset.y == 0 &&\n        atlasRegionOffset.z == 0 &&\n        atlasRegionOffset.w == 0\n      ) {\n        // Real rendering size.\n        const realRenderW = textureW * regionW;\n        const realRenderH = textureH * regionH;\n        lx = -pivot.x * realRenderW;\n        by = -pivot.y * realRenderH;\n        rx = realRenderW + lx;\n        ty = realRenderH + by;\n      } else {\n        const { x: blankLeft, y: blankTop, z: blankRight, w: blankBottom } = atlasRegionOffset;\n        const oriWidth = textureW / (1 - blankRight - blankLeft);\n        const oriHeight = textureH / (1 - blankBottom - blankTop);\n        // The size of the real rendering.\n        lx = (-pivot.x * regionW + Math.max(blankLeft, regionX) - regionX) * oriWidth;\n        ty = (pivot.y * regionH - Math.max(blankTop, regionY) + regionY) * oriHeight;\n        rx = (-pivot.x * regionW + Math.min(1 - blankRight, regionX + regionW) - regionX) * oriWidth;\n        by = (pivot.y * regionH - Math.min(1 - blankBottom, regionY + regionH) + regionY) * oriHeight;\n      }\n\n      // Assign values ​​to _positions\n      const positions = this._positions;\n      // Top-left.\n      positions[0].setValue(lx, ty);\n      // Top-right.\n      positions[1].setValue(rx, ty);\n      // Bottom-right.\n      positions[2].setValue(rx, by);\n      // Bottom-left.\n      positions[3].setValue(lx, by);\n\n      // Update bounds.\n      bounds.min.setValue(lx, by, 0);\n      bounds.max.setValue(rx, ty, 0);\n    } else {\n      // Update bounds.\n      bounds.min.setValue(0, 0, 0);\n      bounds.max.setValue(0, 0, 0);\n    }\n  }\n\n  /**\n   * Update mesh.\n   */\n  private _updateMesh(): void {\n    if (this._isContainDirtyFlag(DirtyFlag.positions)) {\n      this._updatePositionsAndBounds();\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.uv)) {\n      const { _atlasRegion, _uv: uv, _region: region, _atlasRotated, _atlasRegionOffset: atlasRegionOffset } = this;\n      let left: number, top: number, right: number, bottom: number;\n      // Determine whether it has been trimmed.\n      if (\n        atlasRegionOffset.x == 0 &&\n        atlasRegionOffset.y == 0 &&\n        atlasRegionOffset.z == 0 &&\n        atlasRegionOffset.w == 0\n      ) {\n        const { width: atlasRegionW, height: atlasRegionH } = _atlasRegion;\n        if (_atlasRotated) {\n          left = atlasRegionW * (1 - region.y - region.height) + _atlasRegion.x;\n          top = atlasRegionH * region.x + _atlasRegion.y;\n          right = atlasRegionW * region.height + left;\n          bottom = atlasRegionH * region.width + top;\n        } else {\n          left = atlasRegionW * region.x + _atlasRegion.x;\n          top = atlasRegionH * region.y + _atlasRegion.y;\n          right = atlasRegionW * region.width + left;\n          bottom = atlasRegionH * region.height + top;\n        }\n      } else {\n        const { x: regionX, y: regionY } = region;\n        const { x: atlasRegionX, y: atlasRegionY } = _atlasRegion;\n        const { x: blankLeft, y: blankTop, z: blankRight, w: blankBottom } = atlasRegionOffset;\n        // Proportion of the original sprite size in the atlas.\n        if (_atlasRotated) {\n          const textureW = _atlasRegion.width / (1 - blankBottom - blankTop);\n          const textureH = _atlasRegion.height / (1 - blankRight - blankLeft);\n          left = (Math.max(blankBottom, 1 - regionY - region.height) - blankBottom) * textureW + atlasRegionX;\n          top = (Math.max(blankLeft, regionX) - blankLeft) * textureH + atlasRegionY;\n          right = (Math.min(1 - blankTop, 1 - regionY) - blankBottom) * textureW + atlasRegionX;\n          bottom = (Math.min(1 - blankRight, regionX + region.width) - blankLeft) * textureH + atlasRegionY;\n        } else {\n          const textureW = _atlasRegion.width / (1 - blankRight - blankLeft);\n          const textureH = _atlasRegion.height / (1 - blankBottom - blankTop);\n          left = (Math.max(blankLeft, regionX) - blankLeft) * textureW + atlasRegionX;\n          top = (Math.max(blankTop, regionY) - blankTop) * textureH + atlasRegionY;\n          right = (Math.min(1 - blankRight, regionX + region.width) - blankLeft) * textureW + atlasRegionX;\n          bottom = (Math.min(1 - blankBottom, regionY + region.height) - blankTop) * textureH + atlasRegionY;\n        }\n      }\n\n      if (_atlasRotated) {\n        // If it is rotated, we need to rotate the UV 90 degrees counterclockwise to correct it.\n        // Top-right.\n        uv[0].setValue(right, top);\n        // Bottom-right.\n        uv[1].setValue(right, bottom);\n        // Bottom-left.\n        uv[2].setValue(left, bottom);\n        // Top-left.\n        uv[3].setValue(left, top);\n      } else {\n        // Top-left.\n        uv[0].setValue(left, top);\n        // Top-right.\n        uv[1].setValue(right, top);\n        // Bottom-right.\n        uv[2].setValue(right, bottom);\n        // Bottom-left.\n        uv[3].setValue(left, bottom);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * Update mesh data of the sprite.\n   * @returns True if the data is refreshed, false otherwise.\n   */\n  _updateMeshData(): boolean {\n    if (this._isContainDirtyFlag(DirtyFlag.all)) {\n      this._updateMesh();\n      this._setDirtyFlagFalse(DirtyFlag.all);\n      return true;\n    }\n    return false;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n}\n\nenum DirtyFlag {\n  positions = 0x1,\n  uv = 0x2,\n  all = 0x3\n}\n","import { BoundingBox, Color, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * Renders a Sprite for 2D graphics.\n */\nexport class SpriteRenderer extends Renderer {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** @internal temp solution. */\n  @ignoreClone\n  _customLocalBounds: BoundingBox = null;\n  /** @internal temp solution. */\n  @ignoreClone\n  _customRootEntity: Entity = null;\n\n  @deepClone\n  private _positions: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  @assignmentClone\n  private _sprite: Sprite = null;\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n  @assignmentClone\n  private _cacheFlipX: boolean = false;\n  @assignmentClone\n  private _cacheFlipY: boolean = false;\n  @ignoreClone\n  private _dirtyFlag: number = DirtyFlag.All;\n  @ignoreClone\n  private _isWorldMatrixDirty: UpdateFlag;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    if (this._sprite !== value) {\n      this._sprite = value;\n      this._setDirtyFlagTrue(DirtyFlag.Sprite);\n    }\n  }\n\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      value.cloneTo(this._color);\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._setDirtyFlagTrue(DirtyFlag.Flip);\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._setDirtyFlagTrue(DirtyFlag.Flip);\n    }\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._setDirtyFlagTrue(DirtyFlag.MaskInteraction);\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._isWorldMatrixDirty = entity.transform.registerWorldChangeFlag();\n    this.setMaterial(this._engine._spriteDefaultMaterial);\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const { sprite } = this;\n    if (!sprite) {\n      return;\n    }\n    const { texture } = sprite;\n    if (!texture) {\n      return;\n    }\n\n    const { _positions } = this;\n    const { transform } = this.entity;\n\n    // Update sprite data.\n    const localDirty = sprite._updateMeshData();\n\n    if (this._isWorldMatrixDirty.flag || localDirty || this._isContainDirtyFlag(DirtyFlag.Sprite)) {\n      const localPositions = sprite._positions;\n      const localVertexPos = SpriteRenderer._tempVec3;\n      const worldMatrix = transform.worldMatrix;\n      const { flipX, flipY } = this;\n\n      for (let i = 0, n = _positions.length; i < n; i++) {\n        const curVertexPos = localPositions[i];\n        localVertexPos.setValue(flipX ? -curVertexPos.x : curVertexPos.x, flipY ? -curVertexPos.y : curVertexPos.y, 0);\n        Vector3.transformToVec3(localVertexPos, worldMatrix, _positions[i]);\n      }\n\n      this._setDirtyFlagFalse(DirtyFlag.Flip);\n      this._setDirtyFlagFalse(DirtyFlag.Sprite);\n      this._isWorldMatrixDirty.flag = false;\n      this._cacheFlipX = flipX;\n      this._cacheFlipY = flipY;\n    } else if (this._isContainDirtyFlag(DirtyFlag.Flip)) {\n      const { flipX, flipY } = this;\n      const flipXChange = this._cacheFlipX !== flipX;\n      const flipYChange = this._cacheFlipY !== flipY;\n\n      if (flipXChange || flipYChange) {\n        const { x, y } = transform.worldPosition;\n\n        for (let i = 0, n = _positions.length; i < n; i++) {\n          const curPos = _positions[i];\n\n          if (flipXChange) {\n            curPos.x = x * 2 - curPos.x;\n          }\n          if (flipYChange) {\n            curPos.y = y * 2 - curPos.y;\n          }\n        }\n      }\n\n      this._setDirtyFlagFalse(DirtyFlag.Flip);\n      this._cacheFlipX = flipX;\n      this._cacheFlipY = flipY;\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.MaskInteraction)) {\n      this._updateStencilState();\n      this._setDirtyFlagFalse(DirtyFlag.MaskInteraction);\n    }\n\n    this.shaderData.setTexture(SpriteRenderer._textureProperty, texture);\n    const material = this.getMaterial();\n\n    const spriteElementPool = this._engine._spriteElementPool;\n    const spriteElement = spriteElementPool.getFromPool();\n    spriteElement.setValue(this, _positions, sprite._uv, sprite._triangles, this.color, material, camera);\n    camera._renderPipeline.pushPrimitive(spriteElement);\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    this._isWorldMatrixDirty.destroy();\n    super._onDestroy();\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      if (this._customLocalBounds && this._customRootEntity) {\n        const worldMatrix = this._customRootEntity.transform.worldMatrix;\n        BoundingBox.transform(this._customLocalBounds, worldMatrix, worldBounds);\n      } else {\n        const localBounds = sprite.bounds;\n        const worldMatrix = this._entity.transform.worldMatrix;\n        BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n      }\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n\n  private _updateStencilState(): void {\n    // Update stencil.\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n}\n\nenum DirtyFlag {\n  Flip = 0x1,\n  Sprite = 0x2,\n  All = 0x3,\n  MaskInteraction = 0x4\n}\n","import { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Entity } from \"../Entity\";\nimport { Component } from \"../Component\";\nimport { AnimationCurve } from \"./AnimationCurve\";\n\n/**\n * Associate AnimationCurve and the Entity\n */\nexport class AnimationClipCurveBinding {\n  /** Path to the entity this curve applies to. The relativePath is formatted similar to a pathname,\n   * e.g. \"root/spine/leftArm\". If relativePath is empty it refers to the entity the animation clip is attached to. */\n  relativePath: string;\n  /** The class type of the component that is animated. */\n  type: new (entity: Entity) => Component;\n  /** The name or path to the property being animated. */\n  property: AnimationProperty;\n  /** The animation curve. */\n  curve: AnimationCurve;\n}\n","/**\n * AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.\n */\nexport class AnimationEvent {\n  /** The time when the event be triggered. */\n  time: number;\n  /** The name of the method called in the script. */\n  functionName: string;\n  /** The parameter that is stored in the event and will be sent to the function. */\n  parameter: Object;\n}\n","export enum AnimationProperty {\n  Position,\n  Rotation,\n  Scale,\n  BlendShapeWeights\n}\n","/**\n * Base class for AnimationClips and BlendTrees.\n */\nexport class Motion {}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { AnimationClipCurveBinding } from \"./AnimationClipCurveBinding\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Motion } from \"./Motion\";\n\n/**\n * Stores keyframe based animations.\n */\nexport class AnimationClip extends Motion {\n  /** @internal */\n  _curveBindings: AnimationClipCurveBinding[] = [];\n\n  private _length: number = 0;\n  private _events: AnimationEvent[] = [];\n\n  /**\n   * Animation events for this animation clip.\n   */\n  get events(): Readonly<AnimationEvent[]> {\n    return this._events;\n  }\n\n  /**\n   * Animation curve bindings for this animation clip.\n   */\n  get curveBindings(): Readonly<AnimationClipCurveBinding[]> {\n    return this._curveBindings;\n  }\n\n  /**\n   * Animation length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * @param name - The AnimationClip's name\n   */\n  constructor (public readonly name: string) {\n    super();\n  }\n\n  /**\n   * Adds an animation event to the clip.\n   * @param functionName - The name of the method called in the script\n   * @param time - The time when the event be triggered\n   * @param parameter - The parameter that is stored in the event and will be sent to the function\n   */\n  addEvent(functionName: string, time: number, parameter: Object): void;\n\n  /**\n   * Adds an animation event to the clip.\n   * @param event - The animation event\n   */\n  addEvent(event: AnimationEvent): void;\n\n\n  addEvent(param: AnimationEvent | string, time?: number, parameter?: Object): void {\n    if (typeof param === 'string') {\n      const event = new AnimationEvent();\n      event.functionName = param;\n      event.time = time;\n      event.parameter = parameter;\n      this._events.push(event);\n    } else {\n      this._events.push(param);\n    }\n    this._events.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Clears all events from the clip.\n   */\n  clearEvents(): void {\n    this._events.length = 0;\n  }\n\n  /**\n   * Add curve binding for the clip.\n   * @param relativePath - Path to the game object this curve applies to. The relativePath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param type- The class type of the component that is animated\n   * @param propertyName - The name to the property being animated\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    relativePath: string,\n    type: new (entity: Entity) => T,\n    propertyName: string,\n    curve: AnimationCurve\n  ): void {\n    let property: AnimationProperty;\n    switch (propertyName) {\n      case \"position\":\n        property = AnimationProperty.Position;\n        break;\n      case \"rotation\":\n        property = AnimationProperty.Rotation;\n        break;\n      case \"scale\":\n        property = AnimationProperty.Scale;\n        break;\n      case \"blendShapeWeights\":\n        property = AnimationProperty.BlendShapeWeights;\n        break;\n      default:\n    }\n    const curveBinding = new AnimationClipCurveBinding();\n    curveBinding.relativePath = relativePath;\n    curveBinding.type = type;\n    curveBinding.property = property;\n    curveBinding.curve = curve;\n    if (curve.length > this._length) {\n      this._length = curve.length;\n    }\n    this._curveBindings.push(curveBinding);\n  }\n\n  /**\n   * Clears all curve bindings from the clip.\n   */\n  clearCurveBindings(): void {\n    this._curveBindings.length = 0;\n    this._length = 0;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param entity - The animated entity\n   * @param time - The time to sample an animation\n   */\n  _sampleAnimation(entity: Entity, time: number): void {\n    const { length } = this._curveBindings;\n    for (let i = length - 1; i >= 0; i--) {\n      const curveData = this._curveBindings[i];\n      const { curve, property, relativePath, type } = curveData;\n      const val = curve.evaluate(time);\n      const target = entity.findByName(relativePath);\n      const transform = (<Entity>target).transform;\n      if (type === Transform) {\n        switch (property) {\n          case AnimationProperty.Position:\n            transform.position = val as Vector3;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = val as Quaternion;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = val as Vector3;\n            break;\n        }\n      }\n    }\n  }\n}\n","import { Vector3, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * @internal\n */\nexport class AnimatorUtils {\n  private static _tempVector30: Vector3 = new Vector3();\n  private static _tempVector31: Vector3 = new Vector3();\n\n  static scaleWeight(s: Vector3, w: number, out: Vector3): void {\n    const sX = s.x;\n    const sY = s.y;\n    const sZ = s.z;\n    out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\n    out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\n    out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\n  }\n\n  static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\n    const saw = AnimatorUtils._tempVector30;\n    const sbw = AnimatorUtils._tempVector31;\n    AnimatorUtils.scaleWeight(sa, 1.0 - w, saw);\n    AnimatorUtils.scaleWeight(sb, w, sbw);\n    const sng = w > 0.5 ? sb : sa;\n    out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\n    out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\n    out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\n  }\n\n  static quaternionWeight(s: Quaternion, w: number, out: Quaternion) {\n    out.x = s.x * w;\n    out.y = s.y * w;\n    out.z = s.z * w;\n    out.w = s.w;\n  }\n}\n","export enum AnimatorLayerBlendingMode {\n  Override,\n  Additive\n}\n","/**\n * @internal\n */\nexport enum AnimatorStatePlayState {\n  UnStarted,\n  Playing,\n  Finished\n}\n","/**\n * Layer state.\n */\nexport enum LayerState {\n  /** Standby state. */\n  Standby,//CM: Standby 优化\n  /** Playing state. */\n  Playing,\n  /** CrossFading state. */\n  CrossFading,\n  /** FixedCrossFading state. */\n  FixedCrossFading\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../../Component\";\nimport { Entity } from \"../../Entity\";\nimport { SkinnedMeshRenderer } from \"../../mesh/SkinnedMeshRenderer\";\nimport { AnimationProperty } from \"../enums/AnimationProperty\";\nimport { InterpolableValue } from \"../KeyFrame\";\n\n/**\n * @internal\n */\nexport class AnimationCurveOwner {\n  crossCurveMark: number = 0;\n  crossCurveIndex: number;\n\n  readonly target: Entity;\n  readonly type: new (entity: Entity) => Component;\n  readonly property: AnimationProperty;\n  readonly component: Component;\n  readonly defaultValue: InterpolableValue;\n  readonly fixedPoseValue: InterpolableValue;\n  \n  /** @internal */\n  _hasSavedDefaultValue: boolean = false;\n\n  constructor(target: Entity, type: new (entity: Entity) => Component, property: AnimationProperty) {\n    this.target = target;\n    this.type = type;\n    this.property = property;\n    switch (property) {\n      case AnimationProperty.Position:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Rotation:\n        this.defaultValue = new Quaternion();\n        this.fixedPoseValue = new Quaternion();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Scale:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        this.defaultValue = new Float32Array(4);\n        this.fixedPoseValue = new Float32Array(4);\n        this.component = target.getComponent(SkinnedMeshRenderer);\n        break;\n    }\n  }\n\n  saveDefaultValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        this.target.transform.position.cloneTo(<Vector3>this.defaultValue);\n        break;\n      case AnimationProperty.Rotation:\n        this.target.transform.rotationQuaternion.cloneTo(<Quaternion>this.defaultValue);\n        break;\n      case AnimationProperty.Scale:\n        this.target.transform.scale.cloneTo(<Vector3>this.defaultValue);\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        const { blendShapeWeights } = <SkinnedMeshRenderer>this.component;\n        for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n          this.defaultValue[i] = (<SkinnedMeshRenderer>this.component).blendShapeWeights[i];\n        }\n        break;\n    }\n    this._hasSavedDefaultValue = true;\n  }\n\n  saveFixedPoseValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        this.target.transform.position.cloneTo(<Vector3>this.fixedPoseValue);\n        break;\n      case AnimationProperty.Rotation:\n        this.target.transform.rotationQuaternion.cloneTo(<Quaternion>this.fixedPoseValue);\n        break;\n      case AnimationProperty.Scale:\n        this.target.transform.scale.cloneTo(<Vector3>this.fixedPoseValue);\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        const { blendShapeWeights } = <SkinnedMeshRenderer>this.component;\n        for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n          this.fixedPoseValue[i] = (<SkinnedMeshRenderer>this.component).blendShapeWeights[i];\n        }\n        break;\n    }\n  }\n}\n","import { AnimationEvent } from \"../AnimationEvent\";\n/**\n * @internal\n */\nexport class AnimationEventHandler {\n  event: AnimationEvent;\n  handlers: Function[] = [];\n}\n","import { AnimatorState } from \"./AnimatorState\";\n\n/**\n * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.\n */\nexport class AnimatorStateTransition {\n  /** The duration of the transition. This is represented in normalized time. */\n  duration: number = 0;\n  /** The time at which the destination state will start. This is represented in normalized time. */\n  offset: number = 0;\n  /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */\n  exitTime: number = 1;\n  /** The destination state of the transition. */\n  destinationState: AnimatorState;\n}\n","/**\n * Animation wrap mode.\n */\nexport enum WrapMode {\n  /** Play once */\n  Once = 0,\n  /** Loop play */\n  Loop = 1\n}\n","import { AnimatorState } from \"../AnimatorState\";\nimport { AnimatorStatePlayState } from \"../enums/AnimatorStatePlayState\";\nimport { WrapMode } from \"../enums/WrapMode\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\n\n/**\n * @internal\n */\nexport class AnimatorStatePlayData {\n  state: AnimatorState;\n  stateData: AnimatorStateData;\n  frameTime: number;\n  playState: AnimatorStatePlayState;\n  clipTime: number;\n  currentEventIndex: number;\n\n  reset(state: AnimatorState, stateData: AnimatorStateData, offsetFrameTime: number): void {\n    this.state = state;\n    this.frameTime = offsetFrameTime;\n    this.stateData = stateData;\n    this.playState = AnimatorStatePlayState.UnStarted;\n    this.clipTime = state.clipStartTime * state.clip.length;\n    this.currentEventIndex = 0;\n  }\n\n  update(): void {\n    const state = this.state;\n    let time = this.frameTime;\n    const duration = state._getDuration();\n    this.playState = AnimatorStatePlayState.Playing;\n    if (time > duration) {\n      if (state.wrapMode === WrapMode.Loop) {\n        time = time % duration;\n      } else {\n        time = duration;\n        this.playState = AnimatorStatePlayState.Finished;\n      }\n    }\n    this.clipTime = time + state.clipStartTime * state.clip.length;\n  }\n}\n","import { AnimatorStateTransition } from \"../AnimatorTransition\";\nimport { LayerState } from \"../enums/LayerState\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./AnimatorStatePlayData\";\n\n/**\n * @internal\n */\nexport class AnimatorLayerData {\n  animatorStateDataMap: Record<string, AnimatorStateData> = {};\n  srcPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  destPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  layerState: LayerState = LayerState.Standby;\n  crossCurveMark: number = 0;\n  manuallyTransition: AnimatorStateTransition = new AnimatorStateTransition();\n  crossFadeTransition: AnimatorStateTransition;\n\n  switchPlayData(): void {\n    const srcPlayData = this.destPlayData;\n    const switchTemp = this.srcPlayData;\n    this.srcPlayData = srcPlayData;\n    this.destPlayData = switchTemp;\n  }\n}\n","import { StateMachineScript } from '../StateMachineScript';\nimport { AnimationEventHandler } from \"./AnimationEventHandler\";\nimport { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n\n/**\n * @internal\n */\nexport class AnimatorStateData {\n  curveOwners: AnimationCurveOwner[] = [];\n  eventHandlers: AnimationEventHandler[] = [];\n}\n","import { AnimatorState } from \"../AnimatorState\";\n\n/**\n * @internal\n */\nexport class AnimatorStateInfo {\n  layerIndex: number;\n  state: AnimatorState;\n}\n","import { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n/**\n * @internal\n */\nexport class CrossCurveData {\n  curveOwner: AnimationCurveOwner;\n  srcCurveIndex: number;\n  destCurveIndex: number;\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh\";\nimport { ClassPool } from \"../RenderPipeline/ClassPool\";\nimport { Transform } from \"../Transform\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { AnimatorUtils } from \"./AnimatorUtils\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { AnimatorStatePlayState } from \"./enums/AnimatorStatePlayState\";\nimport { LayerState } from \"./enums/LayerState\";\nimport { AnimationCurveOwner } from \"./internal/AnimationCurveOwner\";\nimport { AnimationEventHandler } from \"./internal/AnimationEventHandler\";\nimport { AnimatorLayerData } from \"./internal/AnimatorLayerData\";\nimport { AnimatorStateData } from \"./internal/AnimatorStateData\";\nimport { AnimatorStateInfo } from \"./internal/AnimatorStateInfo\";\nimport { AnimatorStatePlayData } from \"./internal/AnimatorStatePlayData\";\nimport { CrossCurveData } from \"./internal/CrossCurveData\";\nimport { InterpolableValue, UnionInterpolableKeyframe } from \"./KeyFrame\";\n\n/**\n * The controller of the animation system.\n */\nexport class Animator extends Component {\n  private static _tempVector3: Vector3 = new Vector3();\n  private static _tempQuaternion: Quaternion = new Quaternion();\n  private static _animatorInfo: AnimatorStateInfo = new AnimatorStateInfo();\n\n  protected _animatorController: AnimatorController;\n  @assignmentClone\n  protected _speed: number = 1.0;\n  @ignoreClone\n  protected _controllerUpdateFlag: UpdateFlag;\n\n  @ignoreClone\n  private _animatorLayersData: AnimatorLayerData[] = [];\n  @ignoreClone\n  private _crossCurveDataCollection: CrossCurveData[] = [];\n  @ignoreClone\n  private _animationCurveOwners: AnimationCurveOwner[][] = [];\n  @ignoreClone\n  private _crossCurveDataPool: ClassPool<CrossCurveData> = new ClassPool(CrossCurveData);\n  @ignoreClone\n  private _animationEventHandlerPool: ClassPool<AnimationEventHandler> = new ClassPool(AnimationEventHandler);\n\n  /**\n   * The playback speed of the Animator, 1.0 is normal playback speed.\n   */\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(value: number) {\n    this._speed = value;\n  }\n\n  /**\n   * All layers from the AnimatorController which belongs this Animator.\n   */\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    if (animatorController !== this._animatorController) {\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Play a state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  play(stateName: string, layerIndex: number = -1, normalizedTimeOffset: number = 0): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const animatorInfo = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { state } = animatorInfo;\n\n    if (!state) {\n      return;\n    }\n    if (!state.clip) {\n      console.warn(`The state named ${stateName} has no AnimationClip data.`);\n      return;\n    }\n    const animatorLayerData = this._getAnimatorLayerData(animatorInfo.layerIndex);\n    const { srcPlayData } = animatorLayerData;\n    const { state: curState } = srcPlayData;\n    if (curState && curState !== state) {\n      this._revertDefaultValue(srcPlayData.state, srcPlayData.stateData);\n    }\n\n    //CM: Not consider same stateName, but different animation\n    const animatorStateData = this._getAnimatorStateData(stateName, state, animatorLayerData);\n\n    animatorLayerData.layerState = LayerState.Playing;\n    srcPlayData.reset(state, animatorStateData, state._getDuration() * normalizedTimeOffset);\n\n    this._saveDefaultValues(animatorStateData);\n  }\n\n  /**\n   * @internal\n   */\n  _reset(): void {\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      for (let i = 0, n = layers.length; i < n; ++i) {\n        const { states } = layers[i].stateMachine;\n        const animatorLayerData = this._getAnimatorLayerData(i);\n        for (let j = 0, m = states.length; j < m; ++j) {\n          const state = states[j];\n          const animatorStateData = this._getAnimatorStateData(state.name, state, animatorLayerData);\n          this._revertDefaultValue(state, animatorStateData);\n        }\n      }\n    }\n    this._clearPlayData();\n  }\n\n  /**\n   * Create a cross fade from the current state to another state.\n   * @param stateName - The state name\n   * @param normalizedTransitionDuration - The duration of the transition (normalized)\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  crossFade(\n    stateName: string,\n    normalizedTransitionDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const { state } = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { manuallyTransition } = this._getAnimatorLayerData(layerIndex);\n    manuallyTransition.duration = normalizedTransitionDuration;\n    manuallyTransition.offset = normalizedTimeOffset;\n    manuallyTransition.destinationState = state;\n    this._crossFadeByTransition(manuallyTransition, layerIndex);\n  }\n\n  /**\n   * Evaluates the animator component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update\n   */\n  update(deltaTime: number): void {\n    if (this.speed === 0) {\n      return;\n    }\n\n    const { _animatorController: animatorController } = this;\n    if (!animatorController) {\n      return;\n    }\n    if (this._controllerUpdateFlag?.flag) {\n      return;\n    }\n    deltaTime *= this.speed;\n    for (let i = 0, n = animatorController.layers.length; i < n; i++) {\n      const animatorLayerData = this._getAnimatorLayerData(i);\n      if (animatorLayerData.layerState === LayerState.Standby) {\n        continue;\n      }\n\n      this._updateLayer(i, i === 0, deltaTime / 1000);\n    }\n  }\n\n  /**\n   * Get the playing state from the target layerIndex.\n   * @param layerIndex - The layer index\n   */\n  getCurrentAnimatorState(layerIndex: number) {\n    return this._animatorLayersData[layerIndex]?.srcPlayData?.state;\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  private _getAnimatorStateInfo(stateName: string, layerIndex: number, out: AnimatorStateInfo): AnimatorStateInfo {\n    let state: AnimatorState = null;\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      if (layerIndex === -1) {\n        for (let i = 0, n = layers.length; i < n; i++) {\n          state = layers[i].stateMachine.findStateByName(stateName);\n          if (state) {\n            layerIndex = i;\n            break;\n          }\n        }\n      } else {\n        state = layers[layerIndex].stateMachine.findStateByName(stateName);\n      }\n    }\n    out.layerIndex = layerIndex;\n    out.state = state;\n    return out;\n  }\n\n  private _saveDefaultValues(stateData: AnimatorStateData): void {\n    const { curveOwners } = stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      curveOwners[i].saveDefaultValue();\n    }\n  }\n\n  private _getAnimatorStateData(\n    stateName: string,\n    animatorState: AnimatorState,\n    animatorLayerData: AnimatorLayerData\n  ): AnimatorStateData {\n    const { animatorStateDataMap: animatorStateDataCollection } = animatorLayerData;\n    let animatorStateData = animatorStateDataCollection[stateName];\n    if (!animatorStateData) {\n      animatorStateData = new AnimatorStateData();\n      animatorStateDataCollection[stateName] = animatorStateData;\n      this._saveAnimatorStateData(animatorState, animatorStateData);\n      this._saveAnimatorEventHandlers(animatorState, animatorStateData);\n    }\n    return animatorStateData;\n  }\n\n  private _saveAnimatorStateData(animatorState: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const { entity, _animationCurveOwners: animationCureOwners } = this;\n    const { curveOwners } = animatorStateData;\n    const { _curveBindings: curves } = animatorState.clip;\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const curve = curves[i];\n      const targetEntity = curve.relativePath === \"\" ? entity : entity.findByPath(curve.relativePath);\n      const { property } = curve;\n      const { instanceId } = targetEntity;\n      const propertyOwners = animationCureOwners[instanceId] || (animationCureOwners[instanceId] = []);\n      curveOwners[i] =\n        propertyOwners[property] ||\n        (propertyOwners[property] = new AnimationCurveOwner(targetEntity, curve.type, property));\n    }\n  }\n\n  private _saveAnimatorEventHandlers(state: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const eventHandlerPool = this._animationEventHandlerPool;\n    const scripts = this._entity._scripts;\n    const scriptCount = scripts.length;\n    const { eventHandlers } = animatorStateData;\n    const { events } = state.clip;\n\n    eventHandlerPool.resetPool();\n    eventHandlers.length = 0;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      const eventHandler = eventHandlerPool.getFromPool();\n      const funcName = event.functionName;\n      const { handlers } = eventHandler;\n\n      eventHandler.event = event;\n      handlers.length = 0;\n      for (let j = scriptCount - 1; j >= 0; j--) {\n        const handler = <Function>scripts.get(j)[funcName];\n        handler && handlers.push(handler);\n      }\n      eventHandlers.push(eventHandler);\n    }\n  }\n\n  private _clearCrossData(animatorLayerData: AnimatorLayerData): void {\n    animatorLayerData.crossCurveMark++;\n    this._crossCurveDataCollection.length = 0;\n    this._crossCurveDataPool.resetPool();\n  }\n\n  private _addCrossCurveData(\n    crossCurveData: CrossCurveData[],\n    owner: AnimationCurveOwner,\n    curCurveIndex: number,\n    nextCurveIndex: number\n  ): void {\n    const dataItem = this._crossCurveDataPool.getFromPool();\n    dataItem.curveOwner = owner;\n    dataItem.srcCurveIndex = curCurveIndex;\n    dataItem.destCurveIndex = nextCurveIndex;\n    crossCurveData.push(dataItem);\n  }\n\n  private _prepareCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { crossCurveMark } = animatorLayerData;\n\n    // Add src cross curve data.\n    this._prepareSrcCrossData(crossCurveData, animatorLayerData.srcPlayData, crossCurveMark, false);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, false);\n  }\n\n  private _prepareStandbyCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { srcPlayData, crossCurveMark } = animatorLayerData;\n\n    // Standby have two sub state, one is never play, one is finished, never play srcPlayData is null.\n    srcPlayData && this._prepareSrcCrossData(crossCurveData, srcPlayData, crossCurveMark, true);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, true);\n  }\n\n  private _prepareFixedPoseCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n\n    // Save current cross curve data owner fixed pose.\n    for (let i = crossCurveData.length - 1; i >= 0; i--) {\n      const item = crossCurveData[i];\n      item.curveOwner.saveFixedPoseValue();\n      // Reset destCurveIndex When fixed pose crossFading again.\n      item.destCurveIndex = -1;\n    }\n    // prepare dest AnimatorState cross data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, animatorLayerData.crossCurveMark, true);\n  }\n\n  private _prepareSrcCrossData(\n    crossCurveData: CrossCurveData[],\n    srcPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = srcPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      owner.crossCurveMark = crossCurveMark;\n      owner.crossCurveIndex = crossCurveData.length;\n      saveFixed && owner.saveFixedPoseValue();\n      this._addCrossCurveData(crossCurveData, owner, i, -1);\n    }\n  }\n\n  private _prepareDestCrossData(\n    crossCurveData: CrossCurveData[],\n    destPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = destPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      // Not include in previous AnimatorState.\n      if (owner.crossCurveMark === crossCurveMark) {\n        crossCurveData[owner.crossCurveIndex].destCurveIndex = i;\n      } else {\n        owner.saveDefaultValue();\n        saveFixed && owner.saveFixedPoseValue();\n        owner.crossCurveMark = crossCurveMark;\n        owner.crossCurveIndex = crossCurveData.length;\n        this._addCrossCurveData(crossCurveData, owner, -1, i);\n      }\n    }\n  }\n\n  private _evaluateCurve(\n    property: AnimationProperty,\n    curve: AnimationCurve,\n    time: number,\n    additive: boolean\n  ): InterpolableValue {\n    const value = curve.evaluate(time);\n\n    if (additive) {\n      const baseValue = (<UnionInterpolableKeyframe>curve.keys[0]).value;\n      switch (property) {\n        case AnimationProperty.Position:\n          const pos = Animator._tempVector3;\n          Vector3.subtract(<Vector3>value, <Vector3>baseValue, pos);\n          return pos;\n        case AnimationProperty.Rotation:\n          const rot = Animator._tempQuaternion;\n          Quaternion.conjugate(<Quaternion>baseValue, rot);\n          Quaternion.multiply(rot, <Quaternion>value, <Quaternion>rot);\n          return rot;\n        case AnimationProperty.Scale:\n          const scale = Animator._tempVector3;\n          Vector3.divide(<Vector3>value, <Vector3>baseValue, <Vector3>scale);\n          return scale;\n      }\n    }\n    return value;\n  }\n\n  private _getAnimatorLayerData(layerIndex: number): AnimatorLayerData {\n    let animatorLayerData = this._animatorLayersData[layerIndex];\n    animatorLayerData || (this._animatorLayersData[layerIndex] = animatorLayerData = new AnimatorLayerData());\n    return animatorLayerData;\n  }\n\n  private _updateLayer(layerIndex: number, firstLayer: boolean, deltaTime: number): void {\n    const { blendingMode, weight } = this._animatorController.layers[layerIndex];\n    const animLayerData = this._animatorLayersData[layerIndex];\n    const { srcPlayData, destPlayData, crossFadeTransition: crossFadeTransitionInfo } = animLayerData;\n    const layerAdditive = blendingMode === AnimatorLayerBlendingMode.Additive;\n    const layerWeight = firstLayer ? 1.0 : weight;\n    this._checkTransition(srcPlayData, crossFadeTransitionInfo, layerIndex);\n    switch (animLayerData.layerState) {\n      case LayerState.Playing:\n        this._updatePlayingState(srcPlayData, animLayerData, layerIndex, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.FixedCrossFading:\n        this._updateCrossFadeFromPose(destPlayData, animLayerData, layerIndex, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.CrossFading:\n        this._updateCrossFade(\n          srcPlayData,\n          destPlayData,\n          animLayerData,\n          layerIndex,\n          layerWeight,\n          deltaTime,\n          layerAdditive\n        );\n        break;\n    }\n  }\n\n  private _updatePlayingState(\n    playData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ): void {\n    const { curveOwners, eventHandlers } = playData.stateData;\n    const { state, playState: lastPlayState, clipTime: lastClipTime } = playData;\n    const { _curveBindings: curves } = state.clip;\n\n    playData.update();\n\n    const { clipTime, playState } = playData;\n\n    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      const value = this._evaluateCurve(owner.property, curves[i].curve, clipTime, additive);\n      if (additive) {\n        this._applyClipValueAdditive(owner, value, weight);\n      } else {\n        this._applyClipValue(owner, value, weight);\n      }\n    }\n    playData.frameTime += state.speed * delta;\n\n    if (playState === AnimatorStatePlayState.Finished) {\n      layerData.layerState = LayerState.Standby;\n    }\n  }\n\n  private _updateCrossFade(\n    srcPlayData: AnimatorStatePlayData,\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const { _crossCurveDataCollection: crossCurveDataCollection } = this;\n    const { _curveBindings: srcCurves } = srcPlayData.state.clip;\n    const { state: srcState, stateData: srcStateData, playState: lastSrcPlayState } = srcPlayData;\n    const { eventHandlers: srcEventHandler } = srcStateData;\n    const { state: destState, stateData: destStateData, playState: lastDstPlayState } = destPlayData;\n    const { eventHandlers: destEventHandler } = destStateData;\n    const { _curveBindings: destCurves } = destState.clip;\n    const { clipTime: lastSrcClipTime } = srcPlayData;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight = destPlayData.frameTime / (destState._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    srcPlayData.update();\n    destPlayData.update();\n\n    const { playState: srcPlayState } = srcPlayData;\n    const { playState: destPlayState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, false);\n\n    const { clipTime: srcClipTime } = srcPlayData;\n    const { clipTime: destClipTime } = destPlayData;\n\n    srcEventHandler.length && this._fireAnimationEvents(srcPlayData, srcEventHandler, lastSrcClipTime, srcClipTime);\n    destEventHandler.length &&\n      this._fireAnimationEvents(destPlayData, destEventHandler, lastDestClipTime, destClipTime);\n\n    if (lastSrcPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(srcState, layerIndex);\n    }\n    if (crossWeight === 1 || srcPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(srcState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(srcState, layerIndex);\n    }\n\n    if (lastDstPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(destState, layerIndex);\n    }\n    if (destPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(destState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(destState, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, srcCurveIndex, destCurveIndex } = crossCurveDataCollection[i];\n      const { property, defaultValue } = curveOwner;\n\n      const srcValue =\n        srcCurveIndex >= 0\n          ? this._evaluateCurve(property, srcCurves[srcCurveIndex].curve, srcClipTime, additive)\n          : defaultValue;\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(property, destCurves[destCurveIndex].curve, destClipTime, additive)\n          : defaultValue;\n\n      this._applyCrossClipValue(curveOwner, srcValue, destValue, crossWeight, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeFromPose(\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const crossCurveDataCollection = this._crossCurveDataCollection;\n    const { state, stateData, playState: lastPlayState } = destPlayData;\n    const { eventHandlers } = stateData;\n    const { _curveBindings: curves } = state.clip;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight = destPlayData.frameTime / (state._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    destPlayData.update();\n\n    const { playState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, true);\n\n    const { clipTime: destClipTime } = destPlayData;\n\n    eventHandlers.length && this._fireAnimationEvents(destPlayData, eventHandlers, lastDestClipTime, destClipTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, destCurveIndex } = crossCurveDataCollection[i];\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(curveOwner.property, curves[destCurveIndex].curve, destClipTime, additive)\n          : curveOwner.defaultValue;\n\n      this._applyCrossClipValue(curveOwner, curveOwner.fixedPoseValue, destValue, crossWeight, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeData(layerData: AnimatorLayerData, crossWeight: number, delta: number, fixed: boolean): void {\n    const { destPlayData } = layerData;\n    destPlayData.frameTime += destPlayData.state.speed * delta;\n    if (crossWeight === 1.0) {\n      if (destPlayData.playState === AnimatorStatePlayState.Finished) {\n        layerData.layerState = LayerState.Standby;\n      } else {\n        layerData.layerState = LayerState.Playing;\n      }\n      layerData.switchPlayData();\n    } else {\n      fixed || (layerData.srcPlayData.frameTime += layerData.srcPlayData.state.speed * delta);\n    }\n  }\n\n  private _applyCrossClipValue(\n    owner: AnimationCurveOwner,\n    srcValue: InterpolableValue,\n    destValue: InterpolableValue,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    let value: InterpolableValue;\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, Animator._tempVector3);\n          value = Animator._tempVector3;\n          break;\n        case AnimationProperty.Rotation:\n          Quaternion.slerp(srcValue as Quaternion, destValue as Quaternion, crossWeight, Animator._tempQuaternion);\n          value = Animator._tempQuaternion;\n          break;\n        case AnimationProperty.Scale: {\n          const scale = transform.scale;\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, Animator._tempVector3);\n          transform.scale = scale;\n          value = Animator._tempVector3;\n          break;\n        }\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          (<SkinnedMeshRenderer>owner.component).blendShapeWeights = <Float32Array>value;\n          break;\n      }\n    }\n\n    if (additive) {\n      this._applyClipValueAdditive(owner, value, layerWeight);\n    } else {\n      this._applyClipValue(owner, value, layerWeight);\n    }\n  }\n\n  private _applyClipValue(owner: AnimationCurveOwner, value: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          if (weight === 1.0) {\n            transform.position = <Vector3>value;\n          } else {\n            const position = transform.position;\n            Vector3.lerp(position, <Vector3>value, weight, position);\n            transform.position = position;\n          }\n          break;\n        case AnimationProperty.Rotation:\n          if (weight === 1.0) {\n            transform.rotationQuaternion = <Quaternion>value;\n          } else {\n            const rotationQuaternion = transform.rotationQuaternion;\n            Quaternion.slerp(rotationQuaternion, <Quaternion>value, weight, rotationQuaternion);\n            transform.rotationQuaternion = rotationQuaternion;\n          }\n          break;\n        case AnimationProperty.Scale:\n          if (weight === 1.0) {\n            transform.scale = <Vector3>value;\n          } else {\n            const scale = transform.scale;\n            Vector3.lerp(scale, <Vector3>value, weight, scale);\n            transform.scale = scale;\n          }\n          break;\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          (<SkinnedMeshRenderer>owner.component).blendShapeWeights = <Float32Array>value;\n          break;\n      }\n    }\n  }\n\n  private _applyClipValueAdditive(owner: AnimationCurveOwner, additiveValue: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = (<Entity>owner.target).transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          const position = transform.position;\n          position.x += (<Vector3>additiveValue).x * weight;\n          position.y += (<Vector3>additiveValue).y * weight;\n          position.z += (<Vector3>additiveValue).z * weight;\n          transform.position = position;\n          break;\n        case AnimationProperty.Rotation:\n          const rotationQuaternion = transform.rotationQuaternion;\n          AnimatorUtils.quaternionWeight(<Quaternion>additiveValue, weight, <Quaternion>additiveValue);\n          (<Quaternion>additiveValue).normalize();\n          rotationQuaternion.multiply(<Quaternion>additiveValue);\n          transform.rotationQuaternion = rotationQuaternion;\n          break;\n        case AnimationProperty.Scale:\n          const scale = transform.scale;\n          AnimatorUtils.scaleWeight(scale, weight, scale);\n          Vector3.multiply(scale, <Vector3>additiveValue, scale);\n          transform.scale = scale;\n          break;\n      }\n    }\n  }\n\n  private _revertDefaultValue(state: AnimatorState, stateData: AnimatorStateData) {\n    const { clip } = state;\n    if (clip) {\n      const curves = clip._curveBindings;\n      const { curveOwners } = stateData;\n      for (let i = curves.length - 1; i >= 0; i--) {\n        const owner = curveOwners[i];\n        const { transform } = owner.target;\n        if (!owner._hasSavedDefaultValue) continue;\n        switch (owner.property) {\n          case AnimationProperty.Position:\n            transform.position = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = <Quaternion>owner.defaultValue;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.BlendShapeWeights:\n            const { blendShapeWeights } = <SkinnedMeshRenderer>owner.component;\n            for (let j = 0, length = blendShapeWeights.length; j < length; ++j) {\n              (<SkinnedMeshRenderer>owner.component).blendShapeWeights[j] = owner.defaultValue[j];\n            }\n            break;\n        }\n      }\n    }\n  }\n\n  private _checkTransition(\n    stateData: AnimatorStatePlayData,\n    crossFadeTransition: AnimatorStateTransition,\n    layerIndex: number\n  ) {\n    const { state, clipTime } = stateData;\n    const duration = state._getDuration();\n    const { transitions } = state;\n    for (let i = 0, n = transitions.length; i < n; ++i) {\n      const transition = transitions[i];\n      if (duration * transition.exitTime <= clipTime) {\n        crossFadeTransition !== transition && this._crossFadeByTransition(transition, layerIndex);\n      }\n    }\n  }\n\n  private _crossFadeByTransition(transition: AnimatorStateTransition, layerIndex: number): void {\n    const { name } = transition.destinationState;\n    const animatorStateInfo = this._getAnimatorStateInfo(name, layerIndex, Animator._animatorInfo);\n    const { state: crossState } = animatorStateInfo;\n    if (!crossState) {\n      return;\n    }\n    if (!crossState.clip) {\n      console.warn(`The state named ${name} has no AnimationClip data.`);\n      return;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(animatorStateInfo.layerIndex);\n    const layerState = animatorLayerData.layerState;\n    const { destPlayData } = animatorLayerData;\n\n    const animatorStateData = this._getAnimatorStateData(name, crossState, animatorLayerData);\n    const duration = crossState._getDuration();\n    const offset = duration * transition.offset;\n    destPlayData.reset(crossState, animatorStateData, offset);\n\n    switch (layerState) {\n      // Maybe not play, maybe end.\n      case LayerState.Standby:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareStandbyCrossFading(animatorLayerData);\n        break;\n      case LayerState.Playing:\n        animatorLayerData.layerState = LayerState.CrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareCrossFading(animatorLayerData);\n        break;\n      case LayerState.CrossFading:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n      case LayerState.FixedCrossFading:\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n    }\n\n    animatorLayerData.crossFadeTransition = transition;\n  }\n\n  private _fireAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    clipTime: number\n  ): void {\n    const { state } = playState;\n    const clipDuration = state.clip.length;\n    // TODO: If play backward, not work.\n    if (clipTime < lastClipTime) {\n      this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, state.clipEndTime * clipDuration);\n      playState.currentEventIndex = 0;\n      this._fireSubAnimationEvents(playState, eventHandlers, state.clipStartTime * clipDuration, clipTime);\n    } else {\n      this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n    }\n  }\n\n  private _fireSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    for (let i = playState.currentEventIndex, n = eventHandlers.length; i < n; i++) {\n      const eventHandler = eventHandlers[i];\n      const { time, parameter } = eventHandler.event;\n\n      if (time > curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time >= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = i + 1;\n      }\n    }\n  }\n\n  private _callAnimatorScriptOnEnter(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateEnterScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateEnter(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnUpdate(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateUpdateScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateUpdate(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnExit(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateExitScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateExit(this, state, layerIndex);\n    }\n  }\n\n  private _clearPlayData(): void {\n    this._animatorLayersData.length = 0;\n    this._crossCurveDataCollection.length = 0;\n    this._animationCurveOwners.length = 0;\n    if (this._controllerUpdateFlag) {\n      this._controllerUpdateFlag.flag = false;\n    }\n  }\n}\n","import { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\n\n/**\n * Store the data for Animator playback.\n */\nexport class AnimatorController {\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  private _layers: AnimatorControllerLayer[] = [];\n  private _layersMap: Record<string, AnimatorControllerLayer> = {};\n\n  /**\n   * The layers in the controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._layers;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._layersMap[name];\n  }\n\n  /**\n   * Add a layer to the controller.\n   * @param layer - The layer to add\n   */\n  addLayer(layer: AnimatorControllerLayer): void {\n    this._layers.push(layer);\n    this._layersMap[layer.name] = layer;\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Remove a layer from the controller.\n   * @param layerIndex - The index of the AnimatorLayer\n   */\n  removeLayer(layerIndex: number): void {\n    const theLayer = this.layers[layerIndex];\n    this._layers.splice(layerIndex, 1);\n    delete this._layersMap[theLayer.name];\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Clear layers.\n   */\n  clearLayers(): void {\n    this._layers.length = 0;\n    for (let name in this._layersMap) {\n      delete this._layersMap[name];\n    }\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  private _distributeUpdateFlag(): void {\n    this._updateFlagManager.distribute();\n  }\n}\n","import { AnimatorStateMachine } from \"./AnimatorStateMachine\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\n\n/**\n * The Animation Layer contains a state machine that controls animations of a model or part of it.\n */\nexport class AnimatorControllerLayer {\n  /** The blending weight that the layers has. It is not taken into account for the first layer. */\n  weight: number = 1.0;\n  /** The blending mode used by the layer. It is not taken into account for the first layer. */\n  blendingMode: AnimatorLayerBlendingMode = AnimatorLayerBlendingMode.Override;\n  /** The state machine for the layer. */\n  stateMachine: AnimatorStateMachine;\n\n  /**\n   * @param name - The layer's name\n   */\n  constructor(public readonly name: string) {}\n}\n","import { Animator } from \"../animation/Animator\";\nimport { AnimatorState } from \"../animation/AnimatorState\";\n\n/**\n * StateMachineScript is a component that can be added to a animator state. It's the base class every script on a state derives from.\n */\nexport class StateMachineScript {\n  /** @internal */\n  _destroyed: boolean = false;\n  /** @internal */\n  _state: AnimatorState;\n  /**\n   * onStateEnter is called when a transition starts and the state machine starts to evaluate this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateEnter(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateUpdate is called on each Update frame between onStateEnter and onStateExit callbacks.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateUpdate(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateExit is called when a transition ends and the state machine finishes evaluating this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateExit(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._state._removeStateMachineScript(this);\n    this._destroyed = true;\n  }\n}\n","import { AnimationClip } from \"./AnimationClip\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { WrapMode } from \"./enums/WrapMode\";\nimport { StateMachineScript } from \"./StateMachineScript\";\n\n/**\n * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.\n */\nexport class AnimatorState {\n  /** The speed of the clip. 1 is normal speed, default 1. */\n  speed: number = 1.0;\n  /** The wrap mode used in the state. */\n  wrapMode: WrapMode = WrapMode.Loop;\n\n  /** @internal */\n  _onStateEnterScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateUpdateScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateExitScripts: StateMachineScript[] = [];\n\n  private _clipStartTime: number = 0;\n  private _clipEndTime: number = 1;\n  private _clip: AnimationClip;\n  private _transitions: AnimatorStateTransition[] = [];\n\n  /**\n   * The transitions that are going out of the state.\n   */\n  get transitions(): Readonly<AnimatorStateTransition[]> {\n    return this._transitions;\n  }\n\n  /**\n   * The clip that is being played by this animator state.\n   */\n  get clip(): AnimationClip {\n    return this._clip;\n  }\n\n  set clip(clip: AnimationClip) {\n    this._clip = clip;\n    this._clipEndTime = Math.min(this._clipEndTime, 1);\n  }\n\n  /**\n   * The start time of the clip, the range is 0 to 1, default is 0.\n   */\n  get clipStartTime() {\n    return this._clipStartTime;\n  }\n\n  set clipStartTime(time: number) {\n    this._clipStartTime = Math.max(time, 0);\n  }\n\n  /**\n   * The start time of the clip, the range is 0 to 1, default is 1.\n   */\n  get clipEndTime() {\n    return this._clipEndTime;\n  }\n\n  set clipEndTime(time: number) {\n    this._clipEndTime = Math.min(time, 1);\n  }\n\n  /**\n   * @param name - The state's name\n   */\n  constructor(public readonly name: string) {}\n\n  /**\n   * Add an outgoing transition to the destination state.\n   * @param transition - The transition\n   */\n  addTransition(transition: AnimatorStateTransition): void {\n    this._transitions.push(transition);\n  }\n\n  /**\n   * Remove a transition from the state.\n   * @param transition - The transition\n   */\n  removeTransition(transition: AnimatorStateTransition): void {\n    const index = this._transitions.indexOf(transition);\n    index !== -1 && this._transitions.splice(index, 1);\n  }\n\n  /**\n   * Adds a state machine script class of type T to the AnimatorState.\n   * @param scriptType - The state machine script class of type T\n   */\n  addStateMachineScript<T extends StateMachineScript>(scriptType: new () => T): T {\n    const script = new scriptType();\n    script._state = this;\n\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      this._onStateEnterScripts.push(script);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      this._onStateUpdateScripts.push(script);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      this._onStateExitScripts.push(script);\n    }\n\n    return script;\n  }\n\n  /**\n   * Clears all transitions from the state.\n   */\n  clearTransitions(): void {\n    this._transitions.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _getDuration(): number {\n    if (this.clip) {\n      return (this._clipEndTime - this._clipStartTime) * this.clip.length;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeStateMachineScript(script: StateMachineScript): void {\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      const index = this._onStateEnterScripts.indexOf(script);\n      index !== -1 && this._onStateEnterScripts.splice(index, 1);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      const index = this._onStateUpdateScripts.indexOf(script);\n      index !== -1 && this._onStateUpdateScripts.splice(index, 1);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      const index = this._onStateExitScripts.indexOf(script);\n      index !== -1 && this._onStateExitScripts.splice(index, 1);\n    }\n  }\n}\n","import { AnimatorState } from \"./AnimatorState\";\nexport interface AnimatorStateMap {\n  [key: string]: AnimatorState;\n}\n\n/**\n * A graph controlling the interaction of states. Each state references a motion.\n */\nexport class AnimatorStateMachine {\n  /** The list of states. */\n  readonly states: AnimatorState[] = [];\n\n  /** @internal */\n  _statesMap: AnimatorStateMap = {};\n\n  /**\n   * Add a state to the state machine.\n   * @param name - The name of the new state\n   */\n  addState(name: string): AnimatorState {\n    let state = this.findStateByName(name);\n    if (!state) {\n      state = new AnimatorState(name);\n      this.states.push(state);\n      this._statesMap[name] = state;\n    } else {\n      console.warn(`The state named ${name} has existed.`);\n    }\n    return state;\n  }\n\n  /**\n   * Remove a state from the state machine.\n   * @param state - The state\n   */\n  removeState(state: AnimatorState): void {\n    const { name } = state;\n    const index = this.states.indexOf(state);\n    if (index > -1) {\n      this.states.splice(index, 1);\n    }\n    delete this._statesMap[name];\n  }\n\n  /**\n   * Get the state by name.\n   * @param name - The layer's name\n   */\n  findStateByName(name: string): AnimatorState {\n    return this._statesMap[name];\n  }\n\n  /**\n   * Makes a unique state name in the state machine.\n   * @param name - Desired name for the state.\n   * @returns Unique name.\n   */\n  makeUniqueStateName(name: string): string {\n    const { _statesMap } = this;\n    const originName = name;\n    let index = 0;\n    while (_statesMap[name]) {\n      name = `${originName} ${index}`;\n      index++;\n    }\n    return name;\n  }\n}\n","export enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion\n}\n","/**\n * Animation interpolation method.\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  Linear,\n  /** Cubic spline interpolation */\n  CubicSpine,\n  /** Stepped interpolation */\n  Step,\n  /** Hermite interpolation */\n  Hermite\n}\n","import { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { InterpolableValueType } from \"./enums/InterpolableValueType\";\nimport { InterpolationType } from \"./enums/InterpolationType\";\nimport {\n  FloatArrayKeyframe,\n  FloatKeyframe,\n  InterpolableValue,\n  QuaternionKeyframe,\n  UnionInterpolableKeyframe,\n  Vector2Keyframe,\n  Vector3Keyframe\n} from \"./KeyFrame\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\nexport class AnimationCurve {\n  /** All keys defined in the animation curve. */\n  keys: UnionInterpolableKeyframe[] = [];\n  /** The interpolationType of the animation curve. */\n  interpolation: InterpolationType;\n\n  /** @internal */\n  _valueSize: number;\n  /** @internal */\n  _valueType: InterpolableValueType;\n\n  private _currentValue: InterpolableValue;\n  private _length: number = 0;\n  private _currentIndex: number = 0;\n\n  /**\n   * Animation curve length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Add a new key to the curve.\n   * @param key - The keyframe\n   */\n  addKey(key: UnionInterpolableKeyframe): void {\n    const { time } = key;\n    this.keys.push(key);\n    if (time > this._length) {\n      this._length = time;\n    }\n\n    if (!this._valueSize) {\n      //CM: It's not reasonable to write here.\n      if (typeof key.value == \"number\") {\n        this._valueSize = 1;\n        this._valueType = InterpolableValueType.Float;\n        this._currentValue = 0;\n      }\n      if (key.value instanceof Vector2) {\n        this._valueSize = 2;\n        this._valueType = InterpolableValueType.Vector2;\n        this._currentValue = new Vector2();\n      }\n      if (key.value instanceof Vector3) {\n        this._valueSize = 3;\n        this._valueType = InterpolableValueType.Vector3;\n        this._currentValue = new Vector3();\n      }\n      if (key.value instanceof Vector4) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Vector4;\n        this._currentValue = new Vector4();\n      }\n      if (key.value instanceof Quaternion) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Quaternion;\n        this._currentValue = new Quaternion();\n      }\n\n      if (key.value instanceof Float32Array) {\n        const size = key.value.length;\n        this._valueSize = size;\n        this._valueType = InterpolableValueType.FloatArray;\n        this._currentValue = new Float32Array(size);\n      }\n    }\n    this.keys.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Evaluate the curve at time.\n   * @param time - The time within the curve you want to evaluate\n   */\n  evaluate(time: number): InterpolableValue {\n    const { keys, interpolation } = this;\n    const { length } = this.keys;\n\n    // Compute curIndex and nextIndex.\n    let curIndex = this._currentIndex;\n\n    // Reset loop.\n    if (curIndex !== -1 && time < keys[curIndex].time) {\n      curIndex = -1;\n    }\n\n    let nextIndex = curIndex + 1;\n    while (nextIndex < length) {\n      if (time < keys[nextIndex].time) {\n        break;\n      }\n      curIndex++;\n      nextIndex++;\n    }\n    this._currentIndex = curIndex;\n    // Evaluate value.\n    let value: InterpolableValue;\n    if (curIndex === -1) {\n      value = (<UnionInterpolableKeyframe>keys[0]).value;\n    } else if (nextIndex === length) {\n      value = (<UnionInterpolableKeyframe>keys[curIndex]).value;\n    } else {\n      // Time between first frame and end frame.\n      const curFrameTime = keys[curIndex].time;\n      const duration = keys[nextIndex].time - curFrameTime;\n      const t = (time - curFrameTime) / duration;\n      const dur = duration;\n\n      switch (interpolation) {\n        case InterpolationType.Linear:\n          value = this._evaluateLinear(curIndex, nextIndex, t);\n          break;\n        case InterpolationType.Step:\n          value = this._evaluateStep(nextIndex);\n          break;\n        case InterpolationType.CubicSpine:\n        case InterpolationType.Hermite:\n          value = this._evaluateHermite(curIndex, nextIndex, t, dur);\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Removes the keyframe at index and inserts key.\n   * @param index - The index of the key to move\n   * @param key - The key to insert\n   */\n  moveKey(index: number, key: UnionInterpolableKeyframe): void {\n    this.keys[index] = key;\n  }\n\n  /**\n   * Removes a key.\n   * @param index - The index of the key to remove\n   */\n  removeKey(index: number): void {\n    this.keys.splice(index, 1);\n    const { keys } = this;\n    const count = this.keys.length;\n    let newLength = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (keys[i].time > length) {\n        newLength = keys[i].time;\n      }\n    }\n    this._length = newLength;\n  }\n\n  private _evaluateLinear(frameIndex: number, nextFrameIndex: number, t: number): InterpolableValue {\n    const { _valueType, keys } = this;\n    switch (_valueType) {\n      case InterpolableValueType.Float:\n        return (<FloatKeyframe>keys[frameIndex]).value * (1 - t) + (<FloatKeyframe>keys[nextFrameIndex]).value * t;\n      case InterpolableValueType.FloatArray:\n        const curValue = this._currentValue;\n        const value = (<FloatArrayKeyframe>keys[frameIndex]).value;\n        const nextValue = (<FloatArrayKeyframe>keys[nextFrameIndex]).value;\n        for (let i = 0, n = value.length; i < n; i++) {\n          curValue[i] = value[i] * (1 - t) + nextValue[i] * t;\n        }\n        return curValue;\n      case InterpolableValueType.Vector2:\n        Vector2.lerp(\n          (<Vector2Keyframe>keys[frameIndex]).value,\n          (<Vector2Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector2>this._currentValue\n        );\n        return this._currentValue;\n      case InterpolableValueType.Vector3:\n        Vector3.lerp(\n          (<Vector3Keyframe>keys[frameIndex]).value,\n          (<Vector3Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector3>this._currentValue\n        );\n        return this._currentValue;\n      case InterpolableValueType.Quaternion:\n        Quaternion.slerp(\n          (<QuaternionKeyframe>keys[frameIndex]).value,\n          (<QuaternionKeyframe>keys[nextFrameIndex]).value,\n          t,\n          <Quaternion>this._currentValue\n        );\n        return this._currentValue;\n    }\n  }\n\n  private _evaluateStep(nextFrameIndex: number): InterpolableValue {\n    const { _valueSize, keys } = this;\n    if (_valueSize === 1) {\n      return (<UnionInterpolableKeyframe>keys[nextFrameIndex]).value;\n    } else {\n      return (<UnionInterpolableKeyframe>keys[nextFrameIndex]).value;\n    }\n  }\n\n  private _evaluateHermite(frameIndex: number, nextFrameIndex: number, t: number, dur: number): InterpolableValue {\n    const { _valueSize, keys } = this;\n    const curKey = keys[frameIndex];\n    const nextKey = keys[nextFrameIndex];\n    switch (_valueSize) {\n      case 1: {\n        const t0 = (<FloatKeyframe>curKey).outTangent,\n          t1 = (<FloatKeyframe>nextKey).inTangent,\n          p0 = (<FloatKeyframe>curKey).value,\n          p1 = (<FloatKeyframe>nextKey).value;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          const t2 = t * t;\n          const t3 = t2 * t;\n          const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n          const b = t3 - 2.0 * t2 + t;\n          const c = t3 - t2;\n          const d = -2.0 * t3 + 3.0 * t2;\n          return a * p0 + b * t0 * dur + c * t1 * dur + d * p1;\n        } else {\n          return (<FloatKeyframe>curKey).value;\n        }\n      }\n      case 2: {\n        const p0 = (<Vector2Keyframe>curKey).value;\n        const tan0 = (<Vector2Keyframe>curKey).outTangent;\n        const p1 = (<Vector2Keyframe>nextKey).value;\n        const tan1 = (<Vector2Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector2>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector2>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1))\n          (<Vector2>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        else {\n          (<Vector2>this._currentValue).y = p0.y;\n        }\n        return this._currentValue;\n      }\n      case 3: {\n        const p0 = (<Vector3Keyframe>curKey).value;\n        const tan0 = (<Vector3Keyframe>curKey).outTangent;\n        const p1 = (<Vector3Keyframe>nextKey).value;\n        const tan1 = (<Vector3Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector3>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Vector3>this._currentValue).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Vector3>this._currentValue).z = p0.z;\n        }\n        return <Vector3>this._currentValue;\n      }\n      case 4: {\n        const p0 = (<QuaternionKeyframe>curKey).value;\n        const tan0 = (<QuaternionKeyframe>curKey).outTangent;\n        const p1 = (<QuaternionKeyframe>nextKey).value;\n        const tan1 = (<QuaternionKeyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Quaternion>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Quaternion>this._currentValue).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Quaternion>this._currentValue).z = p0.z;\n        }\n\n        (t0 = tan0.w), (t1 = tan1.w);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n        } else {\n          (<Quaternion>this._currentValue).w = p0.w;\n        }\n        return <Quaternion>this._currentValue;\n      }\n    }\n  }\n}\n","import { Vector2, Vector3, Vector4, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * Keyframe.\n * @typeParam V - Type of Keyframe value\n */\nexport class Keyframe<V> {\n  /** The time of the Keyframe. */\n  time: number;\n  /** The value of the Keyframe. */\n  value: V;\n}\n\n/**\n * InterpolableKeyframe.\n * @typeParam T - Type of Tangent value\n * @typeParam V - Type of Keyframe value\n */\nexport class InterpolableKeyframe<T, V> extends Keyframe<V> {\n  /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key. */\n  inTangent?: T;\n  /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key. */\n  outTangent?: T;\n}\n\nexport type ObjectKeyframe = Keyframe<Object>;\nexport type FloatKeyframe = InterpolableKeyframe<number, number>;\nexport type FloatArrayKeyframe = InterpolableKeyframe<Float32Array, Float32Array>;\nexport type Vector2Keyframe = InterpolableKeyframe<Vector2, Vector2>;\nexport type Vector3Keyframe = InterpolableKeyframe<Vector3, Vector3>;\nexport type Vector4Keyframe = InterpolableKeyframe<Vector4, Vector4>;\nexport type QuaternionKeyframe = InterpolableKeyframe<Vector4, Quaternion>;\n\nexport type UnionInterpolableKeyframe =\n  | FloatKeyframe\n  | FloatArrayKeyframe\n  | Vector2Keyframe\n  | Vector3Keyframe\n  | Vector4Keyframe\n  | QuaternionKeyframe;\n\nexport type InterpolableValue = number | Vector2 | Vector3 | Vector4 | Quaternion | Float32Array | Object;\n","export enum AnimatorConditionMode {\n  If,\n  IfNot,\n  Greater,\n  Less,\n  Equals,\n  NotEquals\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { TextureCubeMap } from \"../texture\";\n\n/**\n * SkyboxMaterial\n */\nexport class SkyBoxMaterial extends Material {\n  private _decodeParam: Vector4 = new Vector4(0, 5, 0, 0);\n\n  /**\n   * Whether to decode from texture with RGBM format.\n   */\n  get textureDecodeRGBM(): boolean {\n    return Boolean(this._decodeParam.x);\n  }\n\n  set textureDecodeRGBM(value: boolean) {\n    this._decodeParam.x = Number(value);\n  }\n\n  /**\n   * RGBM decode factor, default 5.0.\n   */\n  get RGBMDecodeFactor(): number {\n    return this._decodeParam.y;\n  }\n\n  set RGBMDecodeFactor(value: number) {\n    this._decodeParam.y = value;\n  }\n\n  /**\n   * Texture cube map of the sky box material.\n   */\n  get textureCubeMap(): TextureCubeMap {\n    return this.shaderData.getTexture(\"u_cube\") as TextureCubeMap;\n  }\n\n  set textureCubeMap(v: TextureCubeMap) {\n    this.shaderData.setTexture(\"u_cube\", v);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.shaderData.setVector4(\"u_cubeDecodeParam\", this._decodeParam);\n  }\n}\n","import { MathUtil, Vector3, Color } from \"@oasis-engine/math\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Shader, CullMode } from \"../shader\";\nimport { Texture } from \"../texture\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\n\nenum DirtyFlagType {\n  Position = 0x1,\n  Velocity = 0x2,\n  Acceleration = 0x4,\n  Color = 0x8,\n  Alpha = 0x10,\n  Size = 0x20,\n  StartAngle = 0x40,\n  StartTime = 0x80,\n  LifeTime = 0x100,\n  RotateVelocity = 0x200,\n  Scale = 0x400,\n  Everything = 0xffffffff\n}\n\n/**\n * Blend mode enums of the particle renderer's material.\n */\nexport enum ParticleRendererBlendMode {\n  Transparent = 0,\n  Additive = 1\n}\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends MeshRenderer {\n  /** The max number of indices that Uint16Array can support. */\n  private static _uint16VertexLimit: number = 65535;\n\n  private static _getRandom(): number {\n    return Math.random() - 0.5;\n  }\n\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _maxCount: number = 1000;\n  private _position: Vector3 = new Vector3();\n  private _positionRandomness: Vector3 = new Vector3();\n  private _positionArray: Vector3[];\n  private _velocity: Vector3 = new Vector3();\n  private _velocityRandomness: Vector3 = new Vector3();\n  private _acceleration: Vector3 = new Vector3();\n  private _accelerationRandomness: Vector3 = new Vector3();\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _colorRandomness: number = 0;\n  private _size: number = 1;\n  private _sizeRandomness: number = 0;\n  private _alpha: number = 1;\n  private _alphaRandomness: number = 0;\n  private _startAngle: number = 0;\n  private _startAngleRandomness: number = 0;\n  private _rotateVelocity: number = 0;\n  private _rotateVelocityRandomness: number = 0;\n  private _lifetime: number = 5;\n  private _startTimeRandomness: number = 0;\n  private _scale: number = 1;\n  private _isOnce: boolean = false;\n  private _onceTime: number = 0;\n  private _time: number = 0;\n  private _isInit: boolean = false;\n  private _isStart: boolean = false;\n  private _updateDirtyFlag: number = DirtyFlagType.Everything;\n  private _isRotateToVelocity: boolean = false;\n  private _isUseOriginColor: boolean = false;\n  private _isScaleByLifetime: boolean = false;\n  private _is2d: boolean = true;\n  private _isFadeIn: boolean = false;\n  private _isFadeOut: boolean = false;\n  private _playOnEnable: boolean = true;\n  private _blendMode: ParticleRendererBlendMode = ParticleRendererBlendMode.Transparent;\n\n  /**\n   * Sprite sheet of texture.\n   */\n  public spriteSheet: { x: number; y: number; w: number; h: number }[];\n\n  /**\n   * Texture of particle.\n   */\n  get texture(): Texture {\n    return this.getMaterial().shaderData.getTexture(\"u_texture\");\n  }\n\n  set texture(texture: Texture) {\n    if (texture) {\n      this.shaderData.enableMacro(\"particleTexture\");\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    } else {\n      this.shaderData.disableMacro(\"particleTexture\");\n    }\n  }\n\n  /**\n   * Position of particles.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._position = value;\n  }\n\n  /**\n   * Random range of positions.\n   */\n  get positionRandomness(): Vector3 {\n    return this._positionRandomness;\n  }\n\n  set positionRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionRandomness = value;\n  }\n\n  /**\n   * Array of fixed positions.\n   */\n  get positionArray(): Vector3[] {\n    return this._positionArray;\n  }\n\n  set positionArray(value: Vector3[]) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionArray = value;\n  }\n\n  /**\n   * Velocity of particles.\n   */\n  get velocity(): Vector3 {\n    return this._velocity;\n  }\n\n  set velocity(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocity = value;\n  }\n\n  /**\n   * Random range of velocity.\n   */\n  get velocityRandomness(): Vector3 {\n    return this._velocityRandomness;\n  }\n\n  set velocityRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocityRandomness = value;\n  }\n\n  /**\n   * Acceleration of particles.\n   */\n  get acceleration(): Vector3 {\n    return this._acceleration;\n  }\n\n  set acceleration(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._acceleration = value;\n  }\n\n  /**\n   * Random range of acceleration.\n   */\n  get accelerationRandomness(): Vector3 {\n    return this._accelerationRandomness;\n  }\n\n  set accelerationRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._accelerationRandomness = value;\n  }\n\n  /**\n   * Color of particles.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._color = value;\n  }\n\n  /**\n   * Random range of color.\n   */\n  get colorRandomness(): number {\n    return this._colorRandomness;\n  }\n\n  set colorRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._colorRandomness = value;\n  }\n\n  /**\n   * Size of particles.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._size = value;\n  }\n\n  /**\n   * Random range of size.\n   */\n  get sizeRandomness(): number {\n    return this._sizeRandomness;\n  }\n\n  set sizeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._sizeRandomness = value;\n  }\n\n  /**\n   * Alpha of particles.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alpha = value;\n  }\n\n  /**\n   * Random range of alpha.\n   */\n  get alphaRandomness(): number {\n    return this._alphaRandomness;\n  }\n\n  set alphaRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alphaRandomness = value;\n  }\n\n  /**\n   * Angle of particles.\n   */\n  get angle(): number {\n    return this._startAngle;\n  }\n\n  set angle(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngle = value;\n  }\n\n  /**\n   * Random range of angle.\n   */\n  get angleRandomness(): number {\n    return this._startAngleRandomness;\n  }\n\n  set angleRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngleRandomness = value;\n  }\n\n  /**\n   * Rotate velocity of particles.\n   */\n  get rotateVelocity(): number {\n    return this._rotateVelocity;\n  }\n\n  set rotateVelocity(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocity = value;\n  }\n\n  /**\n   * Random range of rotate velocity.\n   */\n  get rotateVelocityRandomness(): number {\n    return this._rotateVelocityRandomness;\n  }\n\n  set rotateVelocityRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocityRandomness = value;\n  }\n\n  /**\n   * Lifetime of particles.\n   */\n  get lifetime(): number {\n    return this._lifetime;\n  }\n\n  set lifetime(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.LifeTime;\n    this._lifetime = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Random range of start time.\n   */\n  get startTimeRandomness(): number {\n    return this._startTimeRandomness;\n  }\n\n  set startTimeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartTime;\n    this._startTimeRandomness = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Scale factor of particles.\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  set scale(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Scale;\n    this._scale = value;\n  }\n\n  /**\n   * Max count of particles.\n   */\n  get maxCount(): number {\n    return this._maxCount;\n  }\n\n  set maxCount(value: number) {\n    this._isStart = false;\n    this._isInit = false;\n    this._maxCount = value;\n    this._updateDirtyFlag = DirtyFlagType.Everything;\n    this.mesh = this._createMesh();\n\n    this._updateBuffer();\n\n    this._isInit = true;\n    this.shaderData.setFloat(\"u_time\", 0);\n  }\n\n  /**\n   * Whether play once.\n   */\n  get isOnce(): boolean {\n    return this._isOnce;\n  }\n\n  set isOnce(value: boolean) {\n    this._time = 0;\n    this.shaderData.setInt(\"u_once\", value ? 1 : 0);\n    this._isOnce = value;\n  }\n\n  /**\n   * Whether follow the direction of velocity.\n   */\n  get isRotateToVelocity(): boolean {\n    return this._isRotateToVelocity;\n  }\n\n  set isRotateToVelocity(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"rotateToVelocity\");\n    } else {\n      this.shaderData.disableMacro(\"rotateToVelocity\");\n    }\n\n    this._isRotateToVelocity = value;\n  }\n\n  /**\n   * Whether use origin color.\n   */\n  get isUseOriginColor(): boolean {\n    return this._isUseOriginColor;\n  }\n\n  set isUseOriginColor(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"useOriginColor\");\n    } else {\n      this.shaderData.disableMacro(\"useOriginColor\");\n    }\n\n    this._isUseOriginColor = value;\n  }\n\n  /**\n   * Whether scale by lifetime.\n   */\n  get isScaleByLifetime(): boolean {\n    return this._isScaleByLifetime;\n  }\n\n  set isScaleByLifetime(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"isScaleByLifetime\");\n    } else {\n      this.shaderData.disableMacro(\"isScaleByLifetime\");\n    }\n\n    this._isScaleByLifetime = value;\n  }\n\n  /**\n   * Whether 2D rendering.\n   */\n  get is2d(): boolean {\n    return this._is2d;\n  }\n\n  set is2d(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"is2d\");\n    } else {\n      this.shaderData.disableMacro(\"is2d\");\n      this.getMaterial().renderState.rasterState.cullMode = CullMode.Off;\n    }\n\n    this._is2d = value;\n  }\n\n  /**\n   * Whether fade in.\n   */\n  get isFadeIn(): boolean {\n    return this._isFadeIn;\n  }\n\n  set isFadeIn(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeIn\");\n    } else {\n      this.shaderData.disableMacro(\"fadeIn\");\n    }\n\n    this._isFadeIn = value;\n  }\n\n  /**\n   * Whether fade out.\n   */\n  get isFadeOut(): boolean {\n    return this._isFadeOut;\n  }\n\n  set isFadeOut(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeOut\");\n    } else {\n      this.shaderData.disableMacro(\"fadeOut\");\n    }\n\n    this._isFadeOut = value;\n  }\n\n  /**\n   * Whether play on enable.\n   */\n  get playOnEnable(): boolean {\n    return this._playOnEnable;\n  }\n\n  set playOnEnable(value: boolean) {\n    this._playOnEnable = value;\n\n    if (value) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Blend mode of the particle renderer's material.\n   */\n  get blendMode(): ParticleRendererBlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: ParticleRendererBlendMode) {\n    const blendState = this.getMaterial().renderState.blendState;\n    const target = blendState.targetBlendState;\n\n    if (value === ParticleRendererBlendMode.Transparent) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    } else if (value === ParticleRendererBlendMode.Additive) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.One;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    }\n\n    this._blendMode = value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.setMaterial(this._createMaterial());\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  update(deltaTime: number): void {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    // Stop after play once\n    if (this._isOnce && this._time > this._onceTime) {\n      return this.stop();\n    }\n\n    if (this._updateDirtyFlag) {\n      this._updateBuffer();\n      this._updateDirtyFlag = 0;\n    }\n\n    this._time += deltaTime / 1000;\n    this.shaderData.setFloat(\"u_time\", this._time);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    super._onEnable();\n\n    if (this._playOnEnable) {\n      this.start();\n    }\n  }\n\n  /**\n   * Start emitting.\n   */\n  start(): void {\n    this._isStart = true;\n    this._time = 0;\n  }\n\n  /**\n   * Stop emitting.\n   */\n  stop(): void {\n    this._isStart = false;\n  }\n\n  private _createMaterial(): Material {\n    const material = new Material(this.engine, Shader.find(\"particle-shader\"));\n    const { renderState } = material;\n    const target = renderState.blendState.targetBlendState;\n\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    renderState.depthState.writeEnabled = false;\n\n    material.renderQueueType = RenderQueueType.Transparent;\n\n    this.isUseOriginColor = true;\n    this.is2d = true;\n    this.isFadeOut = true;\n\n    return material;\n  }\n\n  private _createMesh(): BufferMesh {\n    const mesh = new BufferMesh(this._entity.engine, \"particleMesh\");\n    const vertexStride = 96;\n    const vertexCount = this._maxCount * 4;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    let indices: Uint16Array | Uint32Array = null;\n    let useUint32: boolean = false;\n    if (vertexCount > ParticleRenderer._uint16VertexLimit) {\n      if (this.engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        useUint32 = true;\n        indices = new Uint32Array(6 * this._maxCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(6 * this._maxCount);\n    }\n\n    for (let i = 0, idx = 0; i < this._maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"a_position\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_velocity\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_acceleration\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_color\", 36, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_lifeAndSize\", 52, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_rotation\", 68, VertexElementFormat.Vector2, 0),\n      new VertexElement(\"a_uv\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_normalizedUv\", 88, VertexElementFormat.Vector2, 0)\n    ];\n\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setIndexBufferBinding(indexBuffer, useUint32 ? IndexFormat.UInt32 : IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride / 4;\n    this._vertices = vertices;\n    return mesh;\n  }\n\n  private _updateBuffer(): void {\n    for (let x = 0; x < this._maxCount; x++) {\n      this._updateSingleBuffer(x);\n    }\n\n    this._vertexBuffer.setData(this._vertices);\n  }\n\n  private _updateSingleBuffer(i: number): void {\n    const { _updateDirtyFlag, _vertices: vertices, _vertexStride: vertexStride } = this;\n    const { _getRandom: getRandom } = ParticleRenderer;\n    const offset = i * 4;\n\n    const k0 = offset * vertexStride;\n    const k1 = (offset + 1) * vertexStride;\n    const k2 = (offset + 2) * vertexStride;\n    const k3 = (offset + 3) * vertexStride;\n\n    if (_updateDirtyFlag & DirtyFlagType.Position) {\n      let { x, y, z } = this._position;\n      const { _positionArray, _positionRandomness } = this;\n\n      if (_positionArray) {\n        if (_positionArray.length !== this._maxCount) {\n          throw Error(\"The length of positionArray must be equal to maxCount.\");\n        }\n        const pos = _positionArray[i];\n\n        x += pos.x;\n        y += pos.y;\n        z += pos.z;\n      } else {\n        x += getRandom() * _positionRandomness.x;\n        y += getRandom() * _positionRandomness.y;\n        z += getRandom() * _positionRandomness.z;\n      }\n\n      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;\n      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;\n      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Velocity) {\n      const { _velocity, _velocityRandomness } = this;\n\n      vertices[k0 + 3] =\n        vertices[k1 + 3] =\n        vertices[k2 + 3] =\n        vertices[k3 + 3] =\n          _velocity.x + getRandom() * _velocityRandomness.x;\n      vertices[k0 + 4] =\n        vertices[k1 + 4] =\n        vertices[k2 + 4] =\n        vertices[k3 + 4] =\n          _velocity.y + getRandom() * _velocityRandomness.y;\n      vertices[k0 + 5] =\n        vertices[k1 + 5] =\n        vertices[k2 + 5] =\n        vertices[k3 + 5] =\n          _velocity.z + getRandom() * _velocityRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Acceleration) {\n      const { _acceleration, _accelerationRandomness } = this;\n\n      vertices[k0 + 6] =\n        vertices[k1 + 6] =\n        vertices[k2 + 6] =\n        vertices[k3 + 6] =\n          _acceleration.x + getRandom() * _accelerationRandomness.x;\n      vertices[k0 + 7] =\n        vertices[k1 + 7] =\n        vertices[k2 + 7] =\n        vertices[k3 + 7] =\n          _acceleration.y + getRandom() * _accelerationRandomness.y;\n      vertices[k0 + 8] =\n        vertices[k1 + 8] =\n        vertices[k2 + 8] =\n        vertices[k3 + 8] =\n          _acceleration.z + getRandom() * _accelerationRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Color) {\n      const { _color, _colorRandomness } = this;\n\n      vertices[k0 + 9] =\n        vertices[k1 + 9] =\n        vertices[k2 + 9] =\n        vertices[k3 + 9] =\n          MathUtil.clamp(_color.r + getRandom() * _colorRandomness, 0, 1);\n\n      vertices[k0 + 10] =\n        vertices[k1 + 10] =\n        vertices[k2 + 10] =\n        vertices[k3 + 10] =\n          MathUtil.clamp(_color.g + getRandom() * _colorRandomness, 0, 1);\n      vertices[k0 + 11] =\n        vertices[k1 + 11] =\n        vertices[k2 + 11] =\n        vertices[k3 + 11] =\n          MathUtil.clamp(_color.b + getRandom() * _colorRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Alpha) {\n      vertices[k0 + 12] =\n        vertices[k1 + 12] =\n        vertices[k2 + 12] =\n        vertices[k3 + 12] =\n          MathUtil.clamp(this._alpha + getRandom() * this._alphaRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartTime) {\n      vertices[k0 + 13] =\n        vertices[k1 + 13] =\n        vertices[k2 + 13] =\n        vertices[k3 + 13] =\n          Math.random() * this._startTimeRandomness;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.LifeTime) {\n      const { _lifetime } = this;\n\n      vertices[k0 + 14] =\n        vertices[k1 + 14] =\n        vertices[k2 + 14] =\n        vertices[k3 + 14] =\n          _lifetime + getRandom() * _lifetime;\n    }\n\n    // Update the duration of play once when startTime or lifetime changes.\n    if (_updateDirtyFlag & DirtyFlagType.StartTime || _updateDirtyFlag & DirtyFlagType.LifeTime) {\n      this._onceTime = Math.max(this._onceTime, vertices[k0 + 13] + vertices[k0 + 14]);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Size) {\n      const { _size } = this;\n\n      vertices[k0 + 15] =\n        vertices[k1 + 15] =\n        vertices[k2 + 15] =\n        vertices[k3 + 15] =\n          Math.max(_size + getRandom() * this._sizeRandomness * _size * 2, 0);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Scale) {\n      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartAngle) {\n      vertices[k0 + 17] =\n        vertices[k1 + 17] =\n        vertices[k2 + 17] =\n        vertices[k3 + 17] =\n          this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.RotateVelocity) {\n      vertices[k0 + 18] =\n        vertices[k1 + 18] =\n        vertices[k2 + 18] =\n        vertices[k3 + 18] =\n          this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;\n    }\n\n    this._updateSingleUv(i, k0, k1, k2, k3);\n  }\n\n  private _updateSingleUv(i: number, k0: number, k1: number, k2: number, k3: number): void {\n    const { spriteSheet } = this;\n    const texture = this.getMaterial().shaderData.getTexture(\"u_texture\");\n    const vertices = this._vertices;\n\n    if (texture) {\n      const width = texture.width;\n      const height = texture.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n        const ratio = h / w;\n\n        // left bottom\n        vertices[k0 + 19] = u;\n        vertices[k0 + 20] = q;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = p;\n        vertices[k1 + 20] = q;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = p;\n        vertices[k2 + 20] = v;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = u;\n        vertices[k3 + 20] = v;\n        vertices[k3 + 21] = ratio;\n      } else {\n        const ratio = height / width;\n\n        // left bottom\n        vertices[k0 + 19] = 0;\n        vertices[k0 + 20] = 1;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = 1;\n        vertices[k1 + 20] = 1;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = 1;\n        vertices[k2 + 20] = 0;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = 0;\n        vertices[k3 + 20] = 0;\n        vertices[k3 + 21] = ratio;\n      }\n    } else {\n      // left bottom\n      vertices[k0 + 19] = 0;\n      vertices[k0 + 20] = 0;\n      vertices[k0 + 21] = 1;\n\n      // right bottom\n      vertices[k1 + 19] = 1;\n      vertices[k1 + 20] = 0;\n      vertices[k1 + 21] = 1;\n\n      // right top\n      vertices[k2 + 19] = 1;\n      vertices[k2 + 20] = 1;\n      vertices[k2 + 21] = 1;\n\n      // left top\n      vertices[k3 + 19] = 0;\n      vertices[k3 + 20] = 1;\n      vertices[k3 + 21] = 1;\n    }\n\n    vertices[k0 + 22] = -0.5;\n    vertices[k0 + 23] = -0.5;\n    vertices[k1 + 22] = 0.5;\n    vertices[k1 + 23] = -0.5;\n    vertices[k2 + 22] = 0.5;\n    vertices[k2 + 23] = 0.5;\n    vertices[k3 + 22] = -0.5;\n    vertices[k3 + 23] = 0.5;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends MeshRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[i].cloneTo(this._points[newIdx]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this.entity.worldPosition.cloneTo(this._points[this._curPointNum]);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super._render(camera);\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  private _initGeometry() {\n    const mesh = new BufferMesh(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.mesh = mesh;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertices = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertices[p0] = up.x;\n      vertices[p0 + 1] = up.y;\n      vertices[p0 + 2] = up.z;\n\n      vertices[p1] = down.x;\n      vertices[p1 + 1] = down.y;\n      vertices[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertices = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertices[p0] = 0;\n      vertices[p0 + 1] = d;\n\n      vertices[p1] = 1.0;\n      vertices[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Fog.\n */\nexport class Fog extends Component {\n  protected static _colorProperty = Shader.getPropertyByName(\"u_fogColor\");\n\n  /**\n   * Fog color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color = value;\n    this.scene.shaderData.setColor(Fog._colorProperty, value);\n  }\n\n  private _color: Color = new Color(1, 0, 0, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.color = this._color;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_HAS_FOG\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_HAS_FOG\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Exponential fog.\n */\nexport class EXP2Fog extends Fog {\n  private static _densityProperty = Shader.getPropertyByName(\"u_fogDensity\");\n\n  /**\n   * Density of fog.\n   */\n  get density(): number {\n    return this._density;\n  }\n\n  set density(value: number) {\n    this._density = value;\n    this.scene.shaderData.setFloat(EXP2Fog._densityProperty, value);\n  }\n\n  private _density: number = 0.0025;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.density = this._density;\n  }\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_FOG_EXP2\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_FOG_EXP2\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Linear fog, according to the distance of the camera linear difference fog density.\n */\nexport class LinearFog extends Fog {\n  private static _nearProperty = Shader.getPropertyByName(\"u_fogNear\");\n  private static _farProperty = Shader.getPropertyByName(\"u_fogFar\");\n\n  /**\n   * Start of fog.\n   */\n  get near(): number {\n    return this._near;\n  }\n\n  set near(value: number) {\n    this._near = value;\n    this.scene.shaderData.setFloat(LinearFog._nearProperty, value);\n  }\n\n  /**\n   * End of fog.\n   */\n  get far(): number {\n    return this._far;\n  }\n\n  set far(value: number) {\n    this._far = value;\n    this.scene.shaderData.setFloat(LinearFog._farProperty, value);\n  }\n\n  private _near: number = 1;\n  private _far: number = 1000;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.near = this._near;\n    this.far = this._far;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat } from \"../texture/enums/RenderBufferDepthFormat\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): RenderColorTexture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: RenderColorTexture) {}\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  /**\n   * @override\n   */\n  onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n","import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /**\n   * @override\n   */\n  protected readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    camera.viewMatrix.cloneTo(this.oriViewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    this.oriViewMatrix.cloneTo(camera.viewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.setValue(0, 0, 1);\n        cacheDir.setValue(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.setValue(0, 0, -1);\n        cacheDir.setValue(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n","import { MathUtil, Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { Light } from \"../lighting/Light\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Shadow manager.\n */\nexport class LightShadow {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n  private static _shadowBiasProperty = Shader.getPropertyByName(\"u_shadowBias\");\n  private static _shadowIntensityProperty = Shader.getPropertyByName(\"u_shadowIntensity\");\n  private static _shadowRadiusProperty = Shader.getPropertyByName(\"u_shadowRadius\");\n  private static _shadowMapSizeProperty = Shader.getPropertyByName(\"u_shadowMapSize\");\n  private static _shadowMapsProperty = Shader.getPropertyByName(\"u_shadowMaps\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData) {\n    const data = LightShadow._combinedData;\n\n    shaderData.setFloatArray(LightShadow._viewMatFromLightProperty, data.viewMatrix);\n    shaderData.setFloatArray(LightShadow._projMatFromLightProperty, data.projectionMatrix);\n    shaderData.setFloatArray(LightShadow._shadowBiasProperty, data.bias);\n    shaderData.setFloatArray(LightShadow._shadowIntensityProperty, data.intensity);\n    shaderData.setFloatArray(LightShadow._shadowRadiusProperty, data.radius);\n    shaderData.setFloatArray(LightShadow._shadowMapSizeProperty, data.mapSize);\n    shaderData.setTextureArray(LightShadow._shadowMapsProperty, data.map);\n  }\n\n  /**\n   * Clear all shadow maps.\n   */\n  static clearMap() {\n    LightShadow._combinedData.map.length = 0;\n  }\n\n  private static _maxLight = 3;\n\n  private static _combinedData = {\n    viewMatrix: new Float32Array(16 * LightShadow._maxLight),\n    projectionMatrix: new Float32Array(16 * LightShadow._maxLight),\n    bias: new Float32Array(LightShadow._maxLight),\n    intensity: new Float32Array(LightShadow._maxLight),\n    radius: new Float32Array(LightShadow._maxLight),\n    mapSize: new Float32Array(2 * LightShadow._maxLight),\n    map: []\n  };\n\n  private _mapSize: Vector2;\n  private _renderTarget: RenderTarget;\n\n  /**\n   * Shadow's light.\n   */\n  readonly light: Light;\n\n  /**\n   * Shadow bias.\n   */\n  bias: number = 0.005;\n\n  /**\n   * Shadow intensity, the larger the value, the clearer and darker the shadow.\n   */\n  intensity: number = 0.2;\n\n  /**\n   * Pixel range used for shadow PCF interpolation.\n   */\n  radius: number = 1;\n\n  /**\n   * Generate the projection matrix used by the shadow map.\n   */\n  projectionMatrix: Matrix = new Matrix();\n\n  constructor(light: Light, props = { engine: null, width: 512, height: 512 }) {\n    this.light = light;\n    const { engine, width, height } = props;\n\n    this._mapSize = new Vector2(width, height);\n    this._renderTarget = new RenderTarget(engine, width, height, new RenderColorTexture(engine, width, height));\n  }\n\n  /**\n   * The RenderTarget corresponding to the shadow map.\n   */\n  get renderTarget(): RenderTarget {\n    return this._renderTarget;\n  }\n\n  /**\n   * Shadow map's color render texture.\n   */\n  get map(): RenderColorTexture {\n    return this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * Shadow map size.\n   */\n  get mapSize(): Vector2 {\n    return this._mapSize;\n  }\n\n  /**\n   * Initialize the projection matrix for lighting.\n   * @param light - The light to generate shadow\n   */\n  initShadowProjectionMatrix(light: Light) {\n    /**\n     * Directional light projection matrix, the default coverage area is left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50.\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Point light projection matrix, default configuration: fov: 50, aspect: 1, near: 0.5, far: 50.\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Spotlight projection matrix, the default configuration: fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  appendData(lightIndex: number): void {\n    const viewStart = lightIndex * 16;\n    const projectionStart = lightIndex * 16;\n    const biasStart = lightIndex;\n    const intensityStart = lightIndex;\n    const radiusStart = lightIndex;\n    const mapSizeStart = lightIndex * 2;\n    const mapStart = lightIndex;\n\n    const data = LightShadow._combinedData;\n\n    data.viewMatrix.set(this.light.viewMatrix.elements, viewStart);\n    data.projectionMatrix.set(this.projectionMatrix.elements, projectionStart);\n    data.bias[biasStart] = this.bias;\n    data.intensity[intensityStart] = this.intensity;\n    data.radius[radiusStart] = this.radius;\n    data.mapSize[mapSizeStart] = this.mapSize.x;\n    data.mapSize[mapSizeStart + 1] = this.mapSize.y;\n    data.map[mapStart] = this.map;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * Set whether the light to generate shadows.\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        this._enableShadow = false;\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow(this, { engine: this.engine, width: 512, height: 512 });\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * Set whether the renderer to receive shadows.\n */\nObject.defineProperty(Component.prototype, \"receiveShadow\", {\n  get: function () {\n    return this._recieveShadow;\n  },\n  set: function (enabled) {\n    this._recieveShadow = enabled;\n  }\n});\n\n/**\n * Set whether the renderer to cast shadows.\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow Map material.\n */\nexport class ShadowMapMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow-map\"));\n    this.shaderData.enableMacro(\"O3_GENERATE_SHADOW_MAP\");\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Light } from \"../lighting/Light\";\nimport { Material } from \"../material/Material\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Shader } from \"../shader/Shader\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * RenderPass for rendering shadow map.\n */\nexport class ShadowMapPass extends RenderPass {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n\n  readonly light: Light;\n\n  /**\n   * Constructor.\n   * @param light  - The light that the shadow belongs to\n   */\n  constructor(\n    name: string,\n    priority: number,\n    renderTarget: RenderTarget,\n    replaceMaterial: Material,\n    mask: Layer,\n    light: Light\n  ) {\n    super(name, priority, renderTarget, replaceMaterial, mask);\n    this.light = light;\n    this.clearColor = new Color(1, 1, 1, 1);\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    // The viewProjection matrix from the light.\n    const shaderData = this.replaceMaterial.shaderData;\n    shaderData.setMatrix(ShadowMapPass._viewMatFromLightProperty, this.light.viewMatrix);\n    shaderData.setMatrix(ShadowMapPass._projMatFromLightProperty, (this.light as any).shadow.projectionMatrix);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderQueueType } from \"../material\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow material.\n */\nexport class ShadowMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow\"));\n\n    const targetBlendState = this.renderState.blendState.targetBlendState;\n    targetBlendState.enabled = true;\n    targetBlendState.sourceColorBlendFactor = targetBlendState.sourceAlphaBlendFactor = BlendFactor.DestinationColor;\n    targetBlendState.destinationColorBlendFactor = targetBlendState.destinationAlphaBlendFactor = BlendFactor.Zero;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.renderQueueType = RenderQueueType.Transparent;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { LightShadow } from \"./LightShadow\";\n\n/**\n * RenderPass for rendering shadow.\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearFlags = CameraClearFlags.None;\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    const lights = lightMgr.visibleLights;\n    const shaderData = this.replaceMaterial.shaderData;\n\n    // keep render based on default render pass\n    const pass = camera._renderPipeline.defaultRenderPass;\n    this.renderTarget = pass.renderTarget;\n\n    let shadowMapCount = 0;\n\n    LightShadow.clearMap();\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const lgt: any = lights[i];\n      if (lgt.enableShadow) {\n        lgt.shadow.appendData(shadowMapCount++);\n      }\n    }\n\n    if (shadowMapCount) {\n      this.enabled = true;\n      LightShadow._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SHADOW_MAP_COUNT\", shadowMapCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SHADOW_MAP_COUNT\");\n    }\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Scene } from \"../Scene\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\n\n/**\n * Shadow plug-in.\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass: ShadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n\n  /**\n   * @override\n   */\n  preRender(scene: Scene, camera: Camera) {\n    const lights = scene.findFeature(LightFeature).visibleLights;\n\n    if (lights.length > 0) {\n      // Check RenderPass for rendering shadows.\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // Check RenderPass for rendering shadow map.\n      const renderPipeline = camera._renderPipeline;\n\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          renderPipeline.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      }\n\n      this.updatePassRenderFlag(renderPipeline._opaqueQueue);\n      this.updatePassRenderFlag(renderPipeline._alphaTestQueue);\n      this.updatePassRenderFlag(renderPipeline._transparentQueue);\n    }\n  }\n\n  /**\n   * Add RenderPass for rendering shadows.\n   * @param camera - The camera for rendering\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(camera.engine);\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, Layer.Layer30); // SHADOW\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * Add RenderPass for rendering shadow map.\n   * @param camera - The camera for rendering\n   * @param light - The light that the shadow belongs to\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // Share shadow map material.\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(camera.engine);\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      Layer.Layer31, // SHADOW_MAP\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * Update the renderPassFlag state of renderers in the scene.\n   * @param renderQueue - Render queue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const ability: Component = item.component;\n\n      const receiveShadow = (ability as any).recieveShadow;\n      const castShadow = (ability as any).castShadow;\n      if (receiveShadow === true) {\n        ability.entity.layer |= Layer.Layer30; //SHADOW;\n      } else if (receiveShadow === false) {\n        ability.entity.layer &= ~Layer.Layer30; //SHADOW;\n      }\n\n      if (castShadow === true) {\n        ability.entity.layer |= Layer.Layer31; //SHADOW_MAP;\n      } else if (castShadow === false) {\n        ability.entity.layer &= ~Layer.Layer31; //SHADOW_MAP;\n      }\n    }\n  }\n}\n","import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n","export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneFeature } from \"./SceneFeature\";\nexport { SceneManager } from \"./SceneManager\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { Renderer } from \"./Renderer\";\nexport { dependencies } from \"./ComponentsDependencies\";\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { UpdateFlag } from \"./UpdateFlag\";\nexport type { EngineSettings } from \"./EngineSettings\";\n\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { RefObject } from \"./asset/RefObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline/RenderQueue\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport { RenderElement } from \"./RenderPipeline/RenderElement\";\nexport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nexport * from \"./base\";\n\n// Lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\n\nexport { Background } from \"./Background\";\nexport { BackgroundMode } from \"./enums/BackgroundMode\";\nexport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nexport { ColorSpace } from \"./enums/ColorSpace\";\nexport * from \"./input/index\";\nexport * from \"./lighting/index\";\nexport * from \"./material/index\";\nexport * from \"./texture/index\";\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./mesh/index\";\nexport * from \"./sky/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe/index\";\nexport * from \"./shadow/index\";\nexport * from \"./shader/index\";\nexport * from \"./Layer\";\nexport * from \"./clone/CloneManager\";\nexport * from \"./renderingHardwareInterface/index\";\nexport * from \"./physics/index\";\n"],"names":["AssetPromiseStatus","AssetPromise","all","promises","resolve","reject","setProgress","Array","isArray","completed","total","length","results","forEach","value","index","Promise","then","result","catch","err","onProgress","callback","_listeners","add","cancel","_status","Pending","_reject","executor","newReject","progress","_progress","listener","reason","Failed","Success","Set","Util","toString","call","isArrayLike","x","clone","obj","rst","slice","i","l","k","hasOwnProperty","downloadBlob","blob","fileName","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","style","display","href","download","addEventListener","parentElement","removeChild","click","revokeObjectURL","removeFromArray","array","item","indexOf","last","end","ObjectValues","Object","keys","map","key","ResourceManager","_addLoader","type","loader","extnames","_loaders","len","_extTypeMapping","_getTypeByUrl","path","split","substring","lastIndexOf","engine","retryCount","retryInterval","timeout","_assetPool","create","_assetUrlPool","_refObjectPool","_loadingPromises","load","assetInfo","_loadSingleItem","cancelNotLoaded","promise","p","gc","objects","isGCIgnored","destroy","getAssetPath","instanceId","_addAsset","asset","_deleteAsset","id","_addRefObject","_deleteRefObject","_assignDefaultOptions","undefined","urls","join","info","res","useCache","resourceLoader","assetType","Target","Event","target","data","bubbles","_timeStamp","_target","_currentTarget","_bubbles","_propagationStopped","_type","Date","getTime","stopPropagation","t","CloneMode","ignoreClone","propertyKey","CloneManager","registerCloneMode","Ignore","assignmentClone","Assignment","shallowClone","Shallow","deepClone","Deep","mode","targetMap","_subCloneModeMap","get","constructor","set","getCloneMode","cloneModes","_cloneModeMap","objectType","_objectType","cloneModeMap","subCloneModes","getPrototypeOf","deepCloneObject","source","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","n","_deepCloneObjectItem","customSource","cloneTo","sourceItem","itemType","sourceTypeArrayItem","targetTypeArrayItem","sourceArrayItem","targetArrayItem","sourceCustomItem","targetCustomItem","targetItem","Map","EngineObject","_engine","_instanceIdCounter","EventDispatcher","_evtCount","hasEvent","event","_evts","eventNames","listenerCount","listeners","fn","dispatch","once","removeEventListener","on","events","push","off","_clearEvent","temp","removeAllEventListeners","trigger","e","noop","message","debug","console","log","bind","warn","error","Logger","isEnabled","enable","disable","Time","_clock","_timeScale","_deltaTime","_startTime","_lastTickTime","performance","now","reset","tick","nowTime","s","DataType","GLCapabilityType","DisorderedArray","count","_elements","element","delete","deleteByIndex","elements","lastIndex","garbageCollection","ShaderMacroCollection","_mask","_length","unionCollection","left","right","out","outMask","minSize","maxSize","minMask","maxMask","macro","_index","size","mask","maskStart","_value","endIndex","newValue","macroCollection","addMask","addSize","maskSize","complementaryCollection","removeMask","Math","min","intersectionCollection","unionMask","isEnable","clear","ComponentsManager","_onStartScripts","_onUpdateScripts","_onLateUpdateScripts","_destroyComponents","_onUpdateAnimations","_renderers","_onUpdateRenderers","_componentsContainerPool","_colliders","addRenderer","renderer","_rendererIndex","removeRenderer","replaced","addOnStartScript","script","_onStartIndex","removeOnStartScript","addCollider","collider","removeCollider","addOnUpdateScript","_onUpdateIndex","removeOnUpdateScript","addOnLateUpdateScript","_onLateUpdateIndex","removeOnLateUpdateScript","addOnUpdateAnimations","animation","removeOnUpdateAnimations","addOnUpdateRenderers","removeOnUpdateRenderers","addDestroyComponent","component","callScriptOnStart","onStartScripts","_started","onStart","callScriptOnUpdate","deltaTime","onUpdate","callScriptOnLateUpdate","onLateUpdate","callAnimationUpdate","update","callRendererOnUpdate","callRender","context","camera","_camera","cullingMask","_entity","layer","enableFrustumCulling","isCulled","_frustum","intersectsBox","bounds","transform","entity","position","worldPosition","center","getCenter","_tempVector0","isOrthographic","forward","getWorldForward","_tempVector1","Vector3","subtract","_distanceForSort","dot","distanceSquared","_updateShaderData","_render","_globalShaderMacro","shaderData","_macroCollection","callComponentDestroy","destroyComponents","onDestroy","callCameraOnBeginRender","camComps","_components","camComp","onBeginRender","callCameraOnEndRender","onEndRender","callColliderOnUpdate","_onUpdate","callColliderOnLateUpdate","_onLateUpdate","getActiveChangedTempList","pop","putActiveChangedTempList","componentContainer","ComponentCloner","cloneComponent","cloneMode","sourcePropS","tarProp","sourcePropD","_cloneTo","ComponentsDependencies","register","currentComponent","dependentComponent","_addDependency","_dependenciesMap","_invDependenciesMap","_addCheck","dependencies","getComponent","_removeCheck","invDependencies","components","abilityClass","ability","Layer","Component","_destroyed","_removeComponent","isActiveInHierarchy","_enabled","_onDisable","_onInActive","_onDestroy","_onAwake","_onEnable","_onActive","_setActive","_awoken","_isActiveInHierarchy","scene","UpdateFlag","_flags","flag","flags","UpdateFlagManager","_updateFlags","distribute","updateFlags","Transform","_dirtyFlag","TransformFlag","WmWpWeWqWs","setPosition","y","z","_position","setValue","setRotation","_rotation","rotation","setRotationQuaternion","w","_rotationQuaternion","rotationQuaternion","setScale","_scale","scale","setWorldPosition","_worldPosition","setWorldRotation","_worldRotation","worldRotation","setWorldRotationQuaternion","_worldRotationQuaternion","worldRotationQuaternion","worldMatrix","normalize","getWorldRight","getWorldUp","up","translate","translationOrX","relativeToLocalOrY","relativeToLocal","_tempVec3","_translate","rotate","rotationOrX","_rotateXYZ","rotateByAxis","axis","angle","rad","MathUtil","degreeToRadFactor","Quaternion","rotationAxisAngle","_tempQuat0","_rotateByQuat","lookAt","worldUp","EPSILON","zeroTolerance","abs","rotMat","_tempMat43","Matrix","getRotation","invert","registerWorldChangeFlag","_updateFlagManager","_parentChange","_isParentDirty","_updateAllWorldFlag","_updateWorldPositionFlag","_isContainDirtyFlags","WmWp","_worldAssociatedChange","nodeChildren","_children","_updateWorldRotationFlag","WmWeWq","_updateWorldPositionAndRotationFlag","WmWpWeWq","_updateWorldScaleFlag","WmWs","_updateWorldPositionAndScaleFlag","WmWpWs","_getParentTransform","_parentTransformCache","parentCache","parent","_getScaleMatrix","invRotation","invRotationMat","_tempMat30","worldRotScaMat","_tempMat31","scaMat","_tempMat32","setValueByMatrix","Matrix3x3","multiply","targetDirtyFlags","_isContainDirtyFlag","_setDirtyFlagTrue","_setDirtyFlagFalse","rotateQuat","translation","radFactor","rotQuat","rotationEuler","LocalMatrix","WorldPosition","getTranslation","_tempMat41","transformCoordinate","LocalEuler","toEuler","radToDegreeFactor","LocalQuat","WorldEuler","degreeToRadian","WorldQuat","WorldScale","scaleMat","_lossyWorldScale","affineTransformation","_localMatrix","decompose","WorldMatrix","localMatrix","_worldMatrix","_tempMat42","_tempMat40","Entity","_findChildByName","root","name","children","child","_traverseSetOwnerScene","_scene","childCount","Layer0","_scripts","_isRoot","_isActive","_parent","_activeChangedComponents","_invModelMatrix","_inverseWorldMatFlag","addComponent","getComponents","getComponentsIncludeChildren","_getComponentsInChildren","addChild","getChild","findByName","grandson","findByPath","splits","createChild","clearChildren","_processInActive","cloneEntity","sourceComp","targetComp","abilityArray","parentChildren","splice","_addScript","_entityCacheIndex","_removeScript","_removeFromParent","oldParent","oldParentChildren","_processActive","_componentsManager","_setActiveInHierarchy","_setActiveComponents","_setInActiveInHierarchy","isActive","activeChangedComponents","_setTransformDirty","getInvModelMatrix","_isActiveInEngine","newParent","parentScene","val","FeatureManager","_features","_objects","registerFeature","IFeature","featureArray","objectArray","features","addObject","callFeatureMethod","method","args","feature","apply","findFeature","CameraClearFlags","HitResult","distance","point","normal","PhysicsMaterialCombineMode","ColliderShapeUpAxis","PhysicsManager","_nativePhysicsManager","_physicalObjectsMap","_onContactEnter","obj1","obj2","_onContactExit","_onContactStay","_onTriggerEnter","shape1","shape2","scripts","onTriggerEnter","_onTriggerExit","onTriggerExit","_onTriggerStay","onTriggerStay","_nativePhysics","createPhysicsManager","raycast","ray","distanceOrResult","layerMaskOrResult","outHitResult","hitResult","Number","MAX_VALUE","layerMask","Everything","idx","_collider","_update","_addColliderShape","colliderShape","addColliderShape","_nativeShape","_removeColliderShape","removeColliderShape","_addCollider","_nativeCollider","_removeCollider","PhysicsMaterial","_bounciness","_dynamicFriction","_staticFriction","_bounceCombine","Average","_frictionCombine","_nativeMaterial","createPhysicsMaterial","setBounciness","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","ColliderShape","_id","_material","_isTrigger","_isSceneQuery","_idGenerator","setMaterial","setIsTrigger","BoxColliderShape","_size","createBoxColliderShape","setSize","SphereColliderShape","_radius","createSphereColliderShape","setRadius","PlaneColliderShape","createPlaneColliderShape","CapsuleColliderShape","_height","_upAxis","Y","createCapsuleColliderShape","setHeight","setUpAxis","Collider","_updateFlag","_shapes","addShape","shape","oldCollider","removeShape","physicsManager","clearShapes","shapes","setWorldTransform","worldScale","lossyWorldScale","setWorldScale","StaticCollider","createStaticCollider","DynamicCollider","linearVelocity","angularVelocity","linearDamping","angularDamping","mass","isKinematic","createDynamicCollider","applyForce","force","addForce","applyTorque","torque","addTorque","getWorldTransform","PointerPhase","Pointer","phase","Leave","Vector2","_uniqueID","_needUpdate","PointerManager","_pointers","_multiPointerEnabled","_enablePhysics","_canvas","_nativeEvents","_pointerPool","_keyEventList","_keyEventCount","_needOverallPointers","_currentPosition","_currentPressedEntity","_currentEnteredEntity","canvas","htmlCanvas","_webCanvas","touchAction","onpointerdown","onpointerup","onpointerout","onpointermove","evt","_overallPointers","_handlePointerEvent","rayCastEntity","_pointerRayCast","keyEventCount","keyEventList","PointerKeyEvent","Down","_firePointerDown","Up","_firePointerUpAndClick","_firePointerExitAndEnter","_firePointerDrag","_destroy","pointers","deleteCount","totalCount","_getIndexByPointerID","pointerId","_addPointer","lastCount","pointerPool","pointer","_removePointer","pointerIndex","_updatePointer","updatedPointer","nativeEvents","activePointerCount","nativeEventsLen","offsetX","offsetY","Move","pointerCount","currentPosition","pixelRatioWidth","width","clientWidth","pixelRatioHeight","height","clientHeight","lastNativeEvent","_tempPoint","_tempRay","_tempHitResult","cameras","sceneManager","activeScene","_activeCameras","enabled","renderTarget","viewport","vpX","vpY","vpW","vpH","viewportPointToRay","clearFlags","DepthColor","onPointerDrag","onPointerExit","onPointerEnter","onPointerDown","pressedEntity","sameTarget","onPointerClick","onPointerUp","Ray","InputManager","_pointerManager","RenderQueueType","RefObject","_refCount","resourceManager","refCount","_getRefCount","_addRefCount","_addToResourceManager","ShaderDataGroup","Texture","_platformTexture","_mipmap","_width","_mipmapCount","_wrapModeU","_wrapModeV","_filterMode","_anisoLevel","generateMipmaps","_getMaxMiplevel","floor","log2","_getMipmapCount","max","wrapModeU","wrapModeV","filterMode","_hardwareRenderer","capability","maxAnisoLevel","anisoLevel","pbr_frag_define","pbr_helper","brdf","direct_irradiance_frag_define","ibl_frag_define","pbr_frag","ShaderLib","common","common_vert","common_frag","color_share","normal_share","uv_share","worldpos_share","shadow_share","fog_share","begin_normal_vert","begin_position_vert","position_vert","color_vert","normal_vert","skinning_vert","blendShape_input","blendShape_vert","uv_vert","worldpos_vert","shadow_vert","fog_vert","light_frag_define","mobile_material_frag","fog_frag","begin_mobile_frag","begin_viewdir_frag","mobile_blinnphong_frag","noise_common","noise_cellular_2D","noise_cellular_2x2","noise_cellular_2x2x2","noise_cellular_3D","noise_cellular","noise_perlin_2D","noise_perlin_3D","noise_perlin_4D","noise_perlin","noise_psrd_2D","noise_simplex_2D","noise_simplex_3D_grad","noise_simplex_3D","noise_simplex_4D","noise_simplex","PBRShaderLib","normal_get","ShaderFactory","parseCustomMacros","macros","m","parseIncludes","src","regex","replace","match","trim","parseExtension","extensions","convertTo300","shader","isFrag","isMRT","test","_replaceMRTShader","declaration","mrtIndexSet","ShaderMacro","ColorSpace","ShaderUniform","propertyId","location","applyFunc","cacheValue","textureIndex","textureDefault","_rhi","_gl","_colorSpace","rhi","gl","settings","colorSpace","upload1f","shaderUniform","uniform1f","upload1fv","uniform1fv","upload2f","r","g","Linear","uniform2f","Color","gammaToLinearSpace","upload2fv","uniform2fv","upload3f","b","uniform3f","upload3fv","uniform3fv","upload4f","uniform4f","upload4fv","uniform4fv","upload1i","uniform1i","upload1iv","uniform1iv","upload2i","uniform2i","upload2iv","uniform2iv","upload3i","uniform3i","upload3iv","uniform3iv","upload4i","uniform4i","upload4iv","uniform4iv","uploadMat4","uniformMatrix4fv","uploadMat4v","uploadTexture","activeTexture","bindTexture","uploadTextureArray","textureIndices","texture","ShaderUniformBlock","constUniforms","textureUniforms","ShaderProgram","_addLineNum","str","lines","limitLength","prefix","line","vertexSource","fragmentSource","sceneUniformBlock","cameraUniformBlock","rendererUniformBlock","materialUniformBlock","otherUniformBlock","_uploadRenderCount","_uploadCamera","_uploadRenderer","_uploadMaterial","attributeLocation","_isValid","_vertexShader","_fragmentShader","_glProgram","_activeTextureUint","_createProgram","_recordLocation","_counter","uploadAll","uniformBlock","uploadUniforms","uploadTextures","properties","_properties","uniform","uploadUngroupTextures","groupingOtherUniformBlock","_groupingSubOtherUniforms","_currentBind","useProgram","deleteShader","deleteProgram","uniforms","isTexture","group","Shader","_getShaderPropertyGroup","_groupingUniform","Scene","Camera","Renderer","Material","vertexShader","_createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","validateProgram","isContextLost","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderType","shaderSource","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","uniformInfos","_getUniformInfos","attributeInfos","_getAttributeInfos","substr","getUniformLocation","getPropertyByName","_uniqueId","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","Vector4","BOOL","INT","BOOL_VEC2","INT_VEC2","BOOL_VEC3","INT_VEC3","BOOL_VEC4","INT_VEC4","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","defaultTexture","_whiteTexture2D","_whiteTextureCube","defaultTextures","glTextureIndices","TEXTURE0","getAttribLocation","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","attributeCount","ACTIVE_ATTRIBUTES","getActiveAttrib","ShaderProperty","_group","_propertyNameCounter","shaderMap","_shaderMap","find","getMacroByName","_macroMap","maskMap","_macroMaskMap","counter","_macroCounter","bit","propertyNameMap","_propertyNameMap","property","propertyName","shaderProperty","_getNamesByMacros","subMaskMap","subMask","j","_shaderId","_vertexSource","_fragmentSource","_shaderCounter","compileVariant","compileMacros","_compileMacros","_getShaderProgram","isValid","shaderProgramPool","_getShaderProgramPool","shaderProgram","isWebGL2","macroNameList","macroNameStr","versionStr","precisionStr","canIUse","shaderTextureLod","standardDerivatives","_shaderExtension","cache","ShaderData","_variableMacros","getFloat","_getData","setFloat","_setData","getInt","setInt","getFloatArray","setFloatArray","getIntArray","setIntArray","getVector2","setVector2","getVector3","setVector3","getVector4","setVector4","getMatrix","setMatrix","getColor","setColor","getTexture","setTexture","lastValue","getTextureArray","setTextureArray","enableMacro","_enableVariableMacro","disableMacro","variableValue","_disableVariableMacro","targetProperties","targetProperty","variableMacro","oldMacro","BlendFactor","BlendOperation","ColorWriteMask","RenderTargetBlendState","colorBlendOperation","Add","alphaBlendOperation","sourceColorBlendFactor","One","sourceAlphaBlendFactor","destinationColorBlendFactor","Zero","destinationAlphaBlendFactor","colorWriteMask","All","BlendState","targetBlendState","blendColor","alphaToCoverage","_getGLBlendFactor","blendFactor","ZERO","ONE","SourceColor","SRC_COLOR","OneMinusSourceColor","ONE_MINUS_SRC_COLOR","DestinationColor","DST_COLOR","OneMinusDestinationColor","ONE_MINUS_DST_COLOR","SourceAlpha","SRC_ALPHA","OneMinusSourceAlpha","ONE_MINUS_SRC_ALPHA","DestinationAlpha","DST_ALPHA","OneMinusDestinationAlpha","ONE_MINUS_DST_ALPHA","SourceAlphaSaturate","SRC_ALPHA_SATURATE","BlendColor","CONSTANT_COLOR","OneMinusBlendColor","ONE_MINUS_CONSTANT_COLOR","_getGLBlendOperation","blendOperation","FUNC_ADD","Subtract","FUNC_SUBTRACT","ReverseSubtract","FUNC_REVERSE_SUBTRACT","Min","blendMinMax","Error","MIN","Max","MAX","_apply","hardwareRenderer","lastRenderState","_platformApply","blendState","lastState","lastTargetBlendState","BLEND","blendFuncSeparate","blendEquationSeparate","equals","colorMask","Red","Green","Blue","Alpha","SAMPLE_ALPHA_TO_COVERAGE","CompareFunction","DepthState","writeEnabled","compareFunction","Less","_getGLCompareFunction","Never","NEVER","LESS","Equal","EQUAL","LessEqual","LEQUAL","Greater","GREATER","NotEqual","NOTEQUAL","GreaterEqual","GEQUAL","Always","ALWAYS","depthState","DEPTH_TEST","depthFunc","depthMask","CullMode","RasterState","cullMode","Back","depthBias","slopeScaledDepthBias","_cullFaceEnable","rasterState","cullFaceEnable","Off","CULL_FACE","cullFace","BACK","FRONT","POLYGON_OFFSET_FILL","polygonOffset","StencilOperation","StencilState","referenceValue","writeMask","compareFunctionFront","compareFunctionBack","passOperationFront","Keep","passOperationBack","failOperationFront","failOperationBack","zFailOperationFront","zFailOperationBack","_getGLStencilOperation","KEEP","Replace","REPLACE","IncrementSaturate","INCR","DecrementSaturate","DECR","Invert","INVERT","IncrementWrap","INCR_WRAP","DecrementWrap","DECR_WRAP","stencilState","STENCIL_TEST","referenceOrMaskChange","stencilFuncSeparate","stencilOpSeparate","stencilMask","RenderState","_lastRenderState","renderQueueType","Opaque","renderState","dest","_preRender","renderElement","ClassPool","_elementPoolIndex","_elementPool","getFromPool","pool","resetPool","RenderContext","_viewProjectMatrix","_setContext","projectionMatrix","viewMatrix","RenderElement","mesh","subMesh","material","SpriteElement","positions","uv","triangles","color","SpriteMaskElement","isAdd","SpriteMaskInteraction","prototype","_overrideUpdate","_transformChangeFlag","getInstanceMaterial","materials","_materials","_materialsInstanced","_createInstanceMaterial","getMaterial","indexOrMaterial","materialsInstance","internalMaterial","getInstanceMaterials","getMaterials","setMaterials","internalMaterials","materialsInstanced","mvMatrix","_mvMatrix","mvpMatrix","_mvpMatrix","mvInvMatrix","_mvInvMatrix","normalMatrix","_normalMatrix","transpose","_localMatrixProperty","_worldMatrixProperty","_mvMatrixProperty","_mvpMatrixProperty","_mvInvMatrixProperty","_normalMatrixProperty","componentsManager","_updateBounds","worldBounds","insMaterial","changeFlag","_bounds","BoundingBox","SpriteMaskLayer","SpriteMask","_maskElement","_worldMatrixDirtyFlag","_spriteMaskDefaultMaterial","_alphaCutoffProperty","_alphaCutoff","sprite","_positions","localDirty","_updateMeshData","_isSpriteDirty","localPositions","localVertexPos","curVertexPos","transformToVec3","_textureProperty","spriteMaskElementPool","_spriteMaskElementPool","maskElement","_uv","_triangles","_renderPipeline","_allSpriteMasks","_sprite","VertexElementFormat","BufferUsage","IndexFormat","BufferUtil","_getGLBufferUsage","bufferUsage","Static","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","_getGLIndexType","indexFormat","UInt8","UNSIGNED_BYTE","UInt16","UNSIGNED_SHORT","UInt32","UNSIGNED_INT","_getGLIndexByteCount","_getElementInfo","format","normalized","Float","Byte4","BYTE","UByte4","NormalizedByte4","NormalizedUByte4","Short2","SHORT","UShort2","NormalizedShort2","NormalizedUShort2","Short4","UShort4","NormalizedShort4","NormalizedUShort4","VertexElement","semantic","offset","bindingIndex","instanceStepRate","_glElementInfo","_semantic","_offset","_format","_bindingIndex","_instanceStepRate","BufferBindFlag","SetDataOptions","Buffer","byteLengthOrData","_glBindTarget","_glBufferUsage","_nativeBuffer","_byteLength","_bufferUsage","glBufferUsage","glBindTarget","VertexBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","createBuffer","bufferData","byteLength","bindBuffer","setData","bufferByteOffset","dataOffset","dataLength","options","None","Discard","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","byteOffset","bufferSubData","subData","buffer","getData","getBufferSubData","deleteBuffer","resize","MeshTopology","IndexBufferBinding","_buffer","SubMesh","start","topology","Triangles","Mesh","_vertexElementMap","_glIndexType","_glIndexByteCount","_platformPrimitive","_instanceCount","_vertexBufferBindings","_indexBufferBinding","_vertexElements","_subMeshes","createPlatformPrimitive","addSubMesh","startOrSubMesh","removeSubMesh","subMeshes","clearSubMesh","registerUpdateFlag","_draw","draw","vertexBufferBindings","_setVertexElements","_clearVertexElements","_addVertexElement","_setVertexBufferBinding","binding","lastBinding","_setIndexBufferBinding","vertexElementMap","VertexBufferBinding","stride","_stride","TextureFilterMode","TextureFormat","TextureWrapMode","Texture2D","mipmap","R8G8B8A8","createPlatformTexture2D","Bilinear","Repeat","setPixelBuffer","colorBuffer","mipLevel","setImageSource","imageSource","flipY","premultiplyAlpha","getPixelBuffer","xOrMipLevelOrOut","yOrMipLevel","mipLevelOrOut","argsLength","arguments","RenderBufferColorFormat","RenderBufferDepthFormat","TextureCubeFace","TextureCubeMap","createPlatformTextureCubeMap","Clamp","face","RenderDepthTexture","isCube","Depth","_autoMipmap","_isCube","createPlatformRenderDepthTexture","RenderTarget","renderTexture","depth","antiAliasing","_platformRenderTarget","_colorTextures","_depth","_antiAliasing","_depthTexture","createPlatformRenderTarget","getColorTexture","colorTextureCount","autoGenerateMipmaps","colorTexture","_setRenderTargetInfo","faceIndex","setRenderTargetInfo","_blitRenderTarget","blitRenderTarget","RenderColorTexture","createPlatformRenderColorTexture","ModelMesh","_hasBlendShape","_useBlendShapeNormal","_useBlendShapeTangent","_blendShapeTexture","_vertexCount","_accessible","_verticesFloat32","_verticesUint8","_indices","_indicesFormat","_vertexSlotChanged","_vertexChangeFlag","_indicesChangeFlag","_elementCount","_vertexElementsCache","_normals","_colors","_tangents","_uv1","_uv2","_uv3","_uv4","_uv5","_uv6","_uv7","_boneWeights","_boneIndices","_blendShapes","_blendShapeUpdateFlags","setPositions","ValueChanged","Position","getPositions","setNormals","normals","Normal","getNormals","setColors","colors","getColors","setBoneWeights","boneWeights","BoneWeight","getBoneWeights","setBoneIndices","boneIndices","BoneIndex","getBoneIndices","setTangents","tangents","Tangent","getTangents","setUVs","channelIndex","UV","UV1","UV2","UV3","UV4","UV5","UV6","UV7","getUVs","setIndices","indices","getIndices","addBlendShape","blendShape","BlendShape","_registerChangeFlag","clearBlendShapes","blendShapeUpdateFlags","uploadData","noLongerAccessible","vertexElements","_updateVertexElements","elementCount","vertexBuffer","vertexFloatCount","vertices","_updateVertices","newVertexBuffer","indexBuffer","newIndexBuffer","IndexBuffer","_releaseCache","POSITION_VERTEX_ELEMENT","blendShapeCount","weight","joint","internalStart","tangent","blendShapes","blendShapeUpdateFlag","frames","frameCount","endFrame","deltaPositions","deltaPosition","deltaNormals","deltaNormal","deltaTangents","deltaTangent","Skin","inverseBindMatrices","joints","skeleton","MeshRenderer","_mesh","_meshUpdateFlag","_uvMacro","_normalMacro","_tangentMacro","_vertexColorMacro","renderPipeline","renderElementPool","_renderElementPool","pushPrimitive","destroyed","localBounds","lastMesh","SkinnedMeshRenderer","_skin","_blendShapeWeights","_mat","_useJointTexture","matrixPalette","_jointMatrixProperty","_blendShapeWeightsProperty","_blendShapeMacro","_blendShapeNormalMacro","_blendShapeTangentMacro","_initJoints","skin","jointNodes","findByNodeName","maxAttribUniformVec4","renderStates","getParameter","MAX_VERTEX_UNIFORM_VECTORS","maxJoints","jointCount","_jointCountProperty","canIUseMoreJoints","_maxJoints","nodeName","_hasInitJoints","ibms","worldToLocal","mat","identity","createJointTexture","jointTexture","R32G32B32A32","Point","_jointSamplerProperty","PrimitiveMesh","createSphere","radius","segments","vertexCount","rectangleCount","_generateIndices","thetaRange","PI","alphaRange","countReciprocal","segmentsReciprocal","uvs","u","v","alphaDelta","thetaDelta","sinTheta","sin","posX","cos","posY","posZ","c","d","_initialize","createCuboid","halfWidth","halfHeight","halfDepth","createPlane","horizontalSegments","verticalSegments","horizontalCount","verticalCount","gridWidth","gridHeight","horizontalCountReciprocal","horizontalSegmentsReciprocal","verticalSegmentsReciprocal","createCylinder","radiusTop","radiusBottom","radialSegments","heightSegments","radialCount","unitHeight","torsoVertexCount","torsoRectangleCount","capTriangleCount","totalVertexCount","radialCountReciprocal","radialSegmentsReciprocal","heightSegmentsReciprocal","indicesOffset","thetaStart","radiusDiff","slope","radiusSlope","theta","cosTheta","diameterTopReciprocal","diameterBottomReciprocal","positionStride","curPosBottom","curPosX","curPosZ","curPosTop","topCapIndex","bottomIndiceIndex","topIndiceIndex","firstStride","secondStride","radiusMax","createTorus","tubeRadius","tubularSegments","arc","cosV","sinV","cosU","sinU","centerX","centerY","outerRadius","createCone","curRadius","curPos","createCapsule","capVertexCount","capRectangleCount","halfPI","doublePI","_createCapsuleCap","indexCount","elementIndexUint","capAlphaRange","posIndex","BufferMesh","setVertexElements","setVertexBufferBinding","bufferOrBinding","strideOrFirstIndex","isBinding","bindings","setVertexBufferBindings","firstIndex","needLength","setIndexBufferBinding","BlendShapeFrame","_frames","addFrame","frameOrWeight","frame","_addFrame","clearFrames","Basic2DBatcher","_subMeshPool","_batchedQueue","_meshes","_meshCount","_vertexBuffers","_indiceBuffers","_vertices","_flushId","MAX_VERTEX_COUNT","_createMesh","drawElement","flush","batchedQueue","_updateData","drawBatches","_canUploadSameBuffer","meshes","vertexBuffers","indiceBuffers","vertexStride","createVertexElements","vertexIndex","indiceIndex","vertexStartIndex","curIndiceStartIndex","curMeshIndex","preElement","curElement","updateVertices","triangleNum","canBatch","_getSubMeshFromPool","SpriteMaskBatcher","preShaderData","curShaderData","textureProperty","alphaCutoffProperty","verticesNum","curUV","spriteMaskElement","op","drawPrimitive","SpriteMaskManager","_batcher","_preMaskLayer","preRender","maskInteraction","_processMasksDiff","postRender","maskLayer","preMaskLayer","curMaskLayer","allMasks","commonLayer","addLayer","reduceLayer","allMaskElements","influenceLayers","maskRenderElement","BackgroundMode","BackgroundTextureFillMode","Sky","_matrix","Background","SolidColor","solidColor","sky","_textureFillMode","AspectFitHeight","_texture","_createPlane","_resizeBackgroundTexture","_backgroundTextureMesh","Fill","AspectFitWidth","fitWidthScale","fitHeightScale","_backgroundTextureMaterial","DiffuseMode","AmbientLight","_diffuseSphericalHarmonics","_diffuseSolidColor","_diffuseIntensity","_specularReflection","_specularIntensity","_diffuseMode","_shArray","_specularTextureDecodeRGBM","_setScene","_diffuseColorProperty","diffuseMode","diffuseSphericalHarmonics","diffuseIntensity","specularTexture","specularIntensity","specularTextureDecodeRGBM","_preComputeSH","sh","coefficients","_decodeRGBMMacro","SphericalHarmonics","_shMacro","_diffuseSHProperty","_diffuseIntensityProperty","_specularTextureProperty","_mipLevelProperty","mipmapCount","_specularMacro","_specularIntensityProperty","SceneFeature","preUpdate","postUpdate","Light","_viewMat","_inverseViewMat","LightFeature","attachRenderLight","detachRenderLight","_maxLight","DirectLight","intensity","_forward","_lightColor","_reverseDirection","_combinedData","_colorProperty","_directionProperty","direction","_appendData","lightIndex","colorStart","directionStart","lightColor","PointLight","_positionProperty","_distanceProperty","positionStart","distanceStart","lightPosition","SpotLight","penumbra","_inverseDirection","_angleCosProperty","angleCos","_penumbraCosProperty","penumbraCos","penumbraCosStart","angleCosStart","hasLight","visibleLights","light","directLightCount","pointLightCount","spotLightCount","lights","background","_rootEntities","_ambientLight","sceneFeatureManager","ambientLight","createRootEntity","addRootEntity","isRoot","oldScene","_removeEntity","removeRootEntity","getRootEntity","findEntityByName","findEntityByPath","filter","Boolean","rootEntitiesCount","findEntity","_attachRenderCamera","_detachRenderCamera","active","rootEntities","lightMgr","oldRootEntities","Feature","lastAmbientLight","SceneManager","_activeScene","loadScene","destroyOldScene","scenePromise","mergeScenes","sourceScene","destScene","ShaderPool","init","blinnPhongVs","blinnPhongFs","pbrVs","pbrFs","pbrSpecularFs","unlitVs","unlitFs","shadowMapVs","shadowMapFs","shadowFs","skyboxVs","skyboxFs","particleVs","particleFs","spriteMaskVs","spriteMaskFs","spriteVs","spriteFs","backgroundTextureVs","backgroundTextureFs","ShaderProgramPool","_cacheHierarchy","_cacheMap","_lastQueryMap","_lastQueryKey","cacheMap","maskLength","_resizeCacheMapHierarchy","maxEndIndex","subCacheShaders","cacheKey","hierarchy","resizeLength","engineFeatureManager","Engine","physics","inputManager","_spriteElementPool","_spriteDefaultMaterial","_renderContext","_renderCount","_shaderProgramPools","_spriteMaskManager","_settings","_resourceManager","_sceneManager","_vSyncCount","_targetFrameRate","_time","_isPaused","_requestId","_timeoutId","_vSyncCounter","_targetFrameInterval","_animate","requestAnimationFrame","setTimeout","_createSpriteMaterial","_createSpriteMaskMaterial","whitePixel","whiteTexture2D","whiteTextureCube","PositiveX","NegativeX","PositiveY","NegativeY","PositiveZ","NegativeZ","Gamma","_gammaMacro","createEntity","pause","cancelAnimationFrame","clearTimeout","resume","time","sort","camera1","camera2","priority","run","shaderProgramPools","cameraEntity","render","Transparent","SystemInfo","_isIos","ua","navigator","userAgent","toLocaleLowerCase","devicePixelRatio","EngineFeature","preLoad","preTick","currentScene","postTick","shutdown","Script","onAwake","onEnable","other","onDisable","passNum","RenderPass","replaceMaterial","renderOverride","clearColor","opaqueQueue","alphaTestQueue","transparentQueue","SpriteBatcher","preRenderer","curRenderer","checkBatchWithMask","leftMaskInteraction","maskManager","spriteElement","RenderQueue","_compareFromNearToFar","_renderSortId","_compareFromFarToNear","items","_spriteBatcher","renderCount","sceneData","cameraData","renderPassFlag","rendererData","materialData","switchProgram","switchRenderCount","compareFunc","_quickSort","from","to","_insertionSort","third_index","v0","v1","v2","c01","tmp","c02","c12","pivot","low_end","high_start","partition","order","top_elem","BasicRenderPipeline","_opaqueQueue","_transparentQueue","_alphaTestQueue","_defaultPass","_renderPassArray","_lastCanvasSize","addRenderPass","nameOrPass","renderPass","p1","p2","removeRenderPass","pass","getRenderPass","cubeFace","_drawRenderPass","activeRenderTarget","clearRenderTarget","_drawSky","_drawBackgroundTexture","AlphaTest","MathTemp","tempMat4","tempVec4","tempVec3","tempVec2","_isOrthographic","_isProjMatSetting","_nearClipPlane","_farClipPlane","_fieldOfView","_orthographicSize","_isProjectionDirty","_isInvProjMatDirty","_isFrustumProjectDirty","_customAspectRatio","_renderTarget","_transform","_isViewMatrixDirty","_isInvViewProjDirty","_frustumViewChangeFlag","resetProjectionMatrix","_projMatChange","resetAspectRatio","worldToViewportPoint","nx","ny","nz","viewportToWorldPoint","invViewProjMat","_innerViewportToWorldPoint","clipPoint","origin","farPoint","_invViewProjMat","screenToViewportPoint","viewportToScreenPoint","worldToScreenPoint","screenToWorldPoint","screenPointToRay","viewportPoint","calculateFromMatrix","invW","_viewMatrixProperty","_projectionMatrixProperty","_vpMatrixProperty","_inverseViewMatrixProperty","_inverseProjectionMatrixProperty","inverseProjectionMatrix","_cameraPositionProperty","_viewport","_viewMatrix","_lastAspectSize","_projectionMatrix","aspectRatio","perspective","ortho","_inverseProjectionMatrix","BoundingFrustum","mimeType","json","gltf","mtl","prefab","txt","bin","png","webp","jpg","defaultRetryCount","defaultTimeout","defaultInterval","request","config","getMimeTypeFromUrl","realRequest","requestImage","requestRes","lastError","MultiExecutor","stop","img","Image","onerror","onabort","timeoutId","onload","crossOrigin","xhr","XMLHttpRequest","status","response","responseText","ontimeout","onprogress","loaded","open","withCredentials","credentials","responseType","headers","setRequestHeader","send","extname","execFunc","interval","_currentCount","done","exec","Loader","AssetType","RenderFace","BlendMode","BaseMaterial","_renderFace","Front","_isTransparent","_blendMode","blendMode","_alphaCutoffProp","_alphaCutoffMacro","Double","Additive","BlinnPhongMaterial","_diffuseColorProp","_specularColorProp","_emissiveColorProp","_tilingOffsetProp","_shininessProp","_normalIntensityProp","baseColor","_baseTextureProp","specularColor","_specularTextureProp","emissiveColor","_emissiveTextureProp","_normalTextureProp","tilingOffset","PBRBaseMaterial","_baseColorProp","_normalTextureIntensityProp","_occlusionTextureIntensityProp","_occlusionTextureProp","PBRMaterial","_metallicProp","_roughnessProp","_metallicRoughnessTextureProp","PBRSpecularMaterial","_glossinessProp","_specularGlossinessTextureProp","UnlitMaterial","SpriteAtlas","getSprite","_sprites","_spriteNamesToIndex","getSprites","outSprites","_addSprite","Sprite","cloneSprite","_region","_pivot","_pixelsPerUnit","_assetID","_atlasRotated","_atlasRegion","_atlasRegionOffset","region","pixelsPerUnit","Rect","DirtyFlag","_rectangleTriangles","_updatePositionsAndBounds","atlasRegion","atlasRegionOffset","regionX","regionY","regionW","regionH","pPUReciprocal","lx","ty","rx","by","textureW","textureH","realRenderW","realRenderH","blankLeft","blankTop","blankRight","blankBottom","oriWidth","oriHeight","_updateMesh","top","bottom","atlasRegionW","atlasRegionH","atlasRegionX","atlasRegionY","clamp","SpriteRenderer","_isWorldMatrixDirty","flipX","Flip","_cacheFlipX","_cacheFlipY","flipXChange","flipYChange","MaskInteraction","_updateStencilState","spriteElementPool","_customLocalBounds","_customRootEntity","_maskInteraction","compare","VisibleInsideMask","_color","_flipX","_flipY","_maskLayer","AnimationClipCurveBinding","relativePath","curve","AnimationEvent","functionName","parameter","AnimationProperty","Motion","AnimationClip","_curveBindings","_events","addEvent","param","clearEvents","addCurveBinding","Rotation","Scale","BlendShapeWeights","curveBinding","clearCurveBindings","_sampleAnimation","curveData","evaluate","AnimatorUtils","scaleWeight","sX","sY","sZ","pow","scaleBlend","sa","sb","saw","_tempVector30","sbw","_tempVector31","sng","quaternionWeight","AnimatorLayerBlendingMode","AnimatorStatePlayState","LayerState","AnimationCurveOwner","crossCurveMark","crossCurveIndex","defaultValue","fixedPoseValue","_hasSavedDefaultValue","saveDefaultValue","blendShapeWeights","saveFixedPoseValue","AnimationEventHandler","handlers","AnimatorStateTransition","duration","exitTime","destinationState","WrapMode","AnimatorStatePlayData","state","stateData","frameTime","playState","clipTime","currentEventIndex","offsetFrameTime","UnStarted","clipStartTime","clip","_getDuration","Playing","wrapMode","Loop","Finished","AnimatorLayerData","animatorStateDataMap","srcPlayData","destPlayData","layerState","Standby","manuallyTransition","crossFadeTransition","switchPlayData","switchTemp","AnimatorStateData","curveOwners","eventHandlers","AnimatorStateInfo","layerIndex","CrossCurveData","curveOwner","srcCurveIndex","destCurveIndex","Animator","_animatorController","play","stateName","normalizedTimeOffset","_controllerUpdateFlag","_clearPlayData","animatorInfo","_getAnimatorStateInfo","_animatorInfo","animatorLayerData","_getAnimatorLayerData","curState","_revertDefaultValue","animatorStateData","_getAnimatorStateData","_saveDefaultValues","_reset","animatorController","layers","states","stateMachine","crossFade","normalizedTransitionDuration","_crossFadeByTransition","speed","_updateLayer","getCurrentAnimatorState","_animatorLayersData","findStateByName","animatorState","animatorStateDataCollection","_saveAnimatorStateData","_saveAnimatorEventHandlers","animationCureOwners","_animationCurveOwners","curves","targetEntity","propertyOwners","eventHandlerPool","_animationEventHandlerPool","scriptCount","eventHandler","funcName","handler","_clearCrossData","_crossCurveDataCollection","_crossCurveDataPool","_addCrossCurveData","crossCurveData","owner","curCurveIndex","nextCurveIndex","dataItem","_prepareCrossFading","_prepareSrcCrossData","_prepareDestCrossData","_prepareStandbyCrossFading","_prepareFixedPoseCrossFading","saveFixed","_evaluateCurve","additive","baseValue","pos","_tempVector3","rot","_tempQuaternion","conjugate","divide","firstLayer","blendingMode","animLayerData","crossFadeTransitionInfo","layerAdditive","layerWeight","_checkTransition","_updatePlayingState","FixedCrossFading","_updateCrossFadeFromPose","CrossFading","_updateCrossFade","playData","layerData","delta","lastPlayState","lastClipTime","_fireAnimationEvents","_callAnimatorScriptOnEnter","_callAnimatorScriptOnExit","_callAnimatorScriptOnUpdate","_applyClipValueAdditive","_applyClipValue","crossCurveDataCollection","srcCurves","srcState","srcStateData","lastSrcPlayState","srcEventHandler","destState","destStateData","lastDstPlayState","destEventHandler","destCurves","lastSrcClipTime","lastDestClipTime","crossWeight","srcPlayState","destPlayState","_updateCrossFadeData","srcClipTime","destClipTime","srcValue","destValue","_applyCrossClipValue","fixed","lerp","slerp","additiveValue","transitions","transition","animatorStateInfo","crossState","clipDuration","_fireSubAnimationEvents","clipEndTime","curClipTime","_onStateEnterScripts","onStateEnter","_onStateUpdateScripts","onStateUpdate","_onStateExitScripts","onStateExit","_speed","AnimatorController","_layers","_layersMap","findLayerByName","_distributeUpdateFlag","removeLayer","theLayer","clearLayers","AnimatorControllerLayer","Override","StateMachineScript","_state","animator","_removeStateMachineScript","AnimatorState","_clipStartTime","_clipEndTime","_clip","_transitions","addTransition","removeTransition","addStateMachineScript","scriptType","clearTransitions","AnimatorStateMachine","_statesMap","addState","removeState","makeUniqueStateName","originName","InterpolableValueType","InterpolationType","AnimationCurve","interpolation","_valueSize","_valueType","_currentValue","_currentIndex","addKey","FloatArray","curIndex","nextIndex","curFrameTime","dur","_evaluateLinear","Step","_evaluateStep","CubicSpine","Hermite","_evaluateHermite","moveKey","removeKey","newLength","frameIndex","nextFrameIndex","curValue","nextValue","curKey","nextKey","t0","outTangent","t1","inTangent","p0","isFinite","t2","t3","tan0","tan1","Keyframe","InterpolableKeyframe","AnimatorConditionMode","SkyBoxMaterial","_decodeParam","DirtyFlagType","ParticleRendererBlendMode","ParticleRenderer","_getRandom","random","props","_vertexStride","_vertexBuffer","_maxCount","_positionRandomness","_positionArray","_velocity","_velocityRandomness","_acceleration","_accelerationRandomness","_colorRandomness","_sizeRandomness","_alpha","_alphaRandomness","_startAngle","_startAngleRandomness","_rotateVelocity","_rotateVelocityRandomness","_lifetime","_startTimeRandomness","_isOnce","_onceTime","_isInit","_isStart","_updateDirtyFlag","_isRotateToVelocity","_isUseOriginColor","_isScaleByLifetime","_is2d","_isFadeIn","_isFadeOut","_playOnEnable","spriteSheet","_createMaterial","_updateBuffer","isUseOriginColor","is2d","isFadeOut","useUint32","_uint16VertexLimit","startIndex","_updateSingleBuffer","getRandom","k0","k1","k2","k3","Velocity","Acceleration","StartTime","LifeTime","Size","StartAngle","RotateVelocity","_updateSingleUv","h","q","ratio","VERT_SHADER","FRAG_SHADER","TrailMaterial","TrailRenderer","_stroke","_minSeg","_maxPointNum","_points","_pointStates","_strapPoints","_curPointNum","_prePointsNum","stroke","minSeg","lifetime","targetFrameRate","_initGeometry","mov","newIdx","appendNewPoint","lastPoint","_updateStrapVertices","_updateStrapCoords","TriangleStrip","points","vx","vy","vz","down","transformByQuat","dy","cross","perpVector","_projectOnPlane","acos","texDelta","_projectOnVector","n_p","cosine","Fog","EXP2Fog","_density","density","_densityProperty","LinearFog","_near","_far","near","far","_nearProperty","_farProperty","Probe","probeLayer","_oriCameraRenderTarget","_renderTargetSwap","_activeRenderTarget","_oriCameraCullingMask","onTextureChange","renderColorTexture","cacheTarget","cacheUp","cacheDir","CubeProbe","oriViewMatrix","_oriFieldOfView","_storeCamera","_setCamera","_restoreCamera","fieldOfView","LightShadow","_viewMatFromLightProperty","_projMatFromLightProperty","_shadowBiasProperty","bias","_shadowIntensityProperty","_shadowRadiusProperty","_shadowMapSizeProperty","mapSize","_shadowMapsProperty","clearMap","_mapSize","initShadowProjectionMatrix","fov","sqrt","appendData","viewStart","projectionStart","biasStart","intensityStart","radiusStart","mapSizeStart","mapStart","defineProperty","_enableShadow","shadow","_recieveShadow","_castShadow","ShadowMapMaterial","ShadowMapPass","queue","ShadowMaterial","ShadowPass","defaultRenderPass","shadowMapCount","lgt","enableShadow","ShadowFeature","_shadowPass","_shadowMapMaterial","addShadowPass","shadowMapPass","addShadowMapPass","updatePassRenderFlag","shadowMaterial","Layer30","Layer31","renderQueue","receiveShadow","recieveShadow","castShadow"],"mappings":"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"}